
wifi_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce18  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  0800d0c8  0800d0c8  0000e0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d2bc  0800d2bc  0000e2bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d2c4  0800d2c4  0000e2c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800d2c8  0800d2c8  0000e2c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000080  24000000  0800d2cc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000e68  24000080  0800d34c  0000f080  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000ee8  0800d34c  0000fee8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f080  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023979  00000000  00000000  0000f0ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003f0a  00000000  00000000  00032a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001bb0  00000000  00000000  00036938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000156f  00000000  00000000  000384e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037dc4  00000000  00000000  00039a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00025718  00000000  00000000  0007181b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015a778  00000000  00000000  00096f33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f16ab  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008108  00000000  00000000  001f16f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  001f97f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000080 	.word	0x24000080
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800d0b0 	.word	0x0800d0b0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000084 	.word	0x24000084
 80002ec:	0800d0b0 	.word	0x0800d0b0

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr

08000304 <strlen>:
 8000304:	4603      	mov	r3, r0
 8000306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800030a:	2a00      	cmp	r2, #0
 800030c:	d1fb      	bne.n	8000306 <strlen+0x2>
 800030e:	1a18      	subs	r0, r3, r0
 8000310:	3801      	subs	r0, #1
 8000312:	4770      	bx	lr
	...

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <transmit_char>:
/**
 * Transmission and reception macros
 */

#ifndef USE_ITM
	static void transmit_char(char ch){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Transmit(&UART_HANDLE, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80006ba:	1df9      	adds	r1, r7, #7
 80006bc:	f04f 33ff 	mov.w	r3, #4294967295
 80006c0:	2201      	movs	r2, #1
 80006c2:	4803      	ldr	r0, [pc, #12]	@ (80006d0 <transmit_char+0x20>)
 80006c4:	f009 faed 	bl	8009ca2 <HAL_UART_Transmit>
	}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	240004c8 	.word	0x240004c8

080006d4 <receive_char>:
	static char receive_char(){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
		char ch;
		HAL_UART_Receive(&UART_HANDLE, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80006da:	1df9      	adds	r1, r7, #7
 80006dc:	f04f 33ff 	mov.w	r3, #4294967295
 80006e0:	2201      	movs	r2, #1
 80006e2:	4804      	ldr	r0, [pc, #16]	@ (80006f4 <receive_char+0x20>)
 80006e4:	f009 fb6b 	bl	8009dbe <HAL_UART_Receive>
		return ch;
 80006e8:	79fb      	ldrb	r3, [r7, #7]
	}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	240004c8 	.word	0x240004c8

080006f8 <__io_putchar>:
/**
 * @brief PUTCHAR_PROTOTYPE function, called from printf
 * @param ch 	: Char to be written to console
 * @return
 */
PUTCHAR_PROTOTYPE{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]

	transmit_char((char) ch);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	b2db      	uxtb	r3, r3
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ffd3 	bl	80006b0 <transmit_char>

	return 0;
 800070a:	2300      	movs	r3, #0
}
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <__io_getchar>:
/**
 * @brief GETCHAR_PROTOTYPE function, called from scanf
 * @return read out character
 */
GETCHAR_PROTOTYPE{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
	char ch;

	ch = receive_char();
 800071a:	f7ff ffdb 	bl	80006d4 <receive_char>
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
	transmit_char(ch);
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ffc3 	bl	80006b0 <transmit_char>

	return (int)ch;
 800072a:	79fb      	ldrb	r3, [r7, #7]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <WIFI_Init_main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void WIFI_Init_main(){
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0

	hwifi.handle = &hspi2;
 800073a:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <WIFI_Init_main+0x54>)
 800073c:	4a13      	ldr	r2, [pc, #76]	@ (800078c <WIFI_Init_main+0x58>)
 800073e:	601a      	str	r2, [r3, #0]
	hwifi.ssid = ssid;
 8000740:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <WIFI_Init_main+0x54>)
 8000742:	4a13      	ldr	r2, [pc, #76]	@ (8000790 <WIFI_Init_main+0x5c>)
 8000744:	605a      	str	r2, [r3, #4]
	hwifi.passphrase = passphrase;
 8000746:	4b10      	ldr	r3, [pc, #64]	@ (8000788 <WIFI_Init_main+0x54>)
 8000748:	4a12      	ldr	r2, [pc, #72]	@ (8000794 <WIFI_Init_main+0x60>)
 800074a:	609a      	str	r2, [r3, #8]
	hwifi.securityType = WPA;
 800074c:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <WIFI_Init_main+0x54>)
 800074e:	2202      	movs	r2, #2
 8000750:	731a      	strb	r2, [r3, #12]
	hwifi.DHCP = SET;
 8000752:	4b0d      	ldr	r3, [pc, #52]	@ (8000788 <WIFI_Init_main+0x54>)
 8000754:	2201      	movs	r2, #1
 8000756:	735a      	strb	r2, [r3, #13]
	hwifi.ipStatus = IP_V4;
 8000758:	4b0b      	ldr	r3, [pc, #44]	@ (8000788 <WIFI_Init_main+0x54>)
 800075a:	2200      	movs	r2, #0
 800075c:	739a      	strb	r2, [r3, #14]
	hwifi.transportProtocol = WIFI_TCP_PROTOCOL;
 800075e:	4b0a      	ldr	r3, [pc, #40]	@ (8000788 <WIFI_Init_main+0x54>)
 8000760:	2200      	movs	r2, #0
 8000762:	73da      	strb	r2, [r3, #15]
	hwifi.port = 8080;
 8000764:	4b08      	ldr	r3, [pc, #32]	@ (8000788 <WIFI_Init_main+0x54>)
 8000766:	f641 7290 	movw	r2, #8080	@ 0x1f90
 800076a:	821a      	strh	r2, [r3, #16]
	WIFI_StatusTypeDef result;

	result = WIFI_Init(&hwifi);
 800076c:	4806      	ldr	r0, [pc, #24]	@ (8000788 <WIFI_Init_main+0x54>)
 800076e:	f001 fc29 	bl	8001fc4 <WIFI_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
	printf("%d",(uint8_t)result);
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	4619      	mov	r1, r3
 800077a:	4807      	ldr	r0, [pc, #28]	@ (8000798 <WIFI_Init_main+0x64>)
 800077c:	f00b fbee 	bl	800bf5c <iprintf>
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	2400009c 	.word	0x2400009c
 800078c:	24000440 	.word	0x24000440
 8000790:	24000000 	.word	0x24000000
 8000794:	24000008 	.word	0x24000008
 8000798:	0800d0c8 	.word	0x0800d0c8

0800079c <UART_DebugPrint>:
	if(GPIO_Pin == WIFI_CMD_DATA_READY_Pin){
		cmdDataReady = HAL_GPIO_ReadPin(WIFI_CMD_DATA_READY_GPIO_Port, WIFI_CMD_DATA_READY_Pin);
	}
}

void UART_DebugPrint(const char* message) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 100);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff fdad 	bl	8000304 <strlen>
 80007aa:	4603      	mov	r3, r0
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	2364      	movs	r3, #100	@ 0x64
 80007b0:	6879      	ldr	r1, [r7, #4]
 80007b2:	4806      	ldr	r0, [pc, #24]	@ (80007cc <UART_DebugPrint+0x30>)
 80007b4:	f009 fa75 	bl	8009ca2 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"---", 2, 100);
 80007b8:	2364      	movs	r3, #100	@ 0x64
 80007ba:	2202      	movs	r2, #2
 80007bc:	4904      	ldr	r1, [pc, #16]	@ (80007d0 <UART_DebugPrint+0x34>)
 80007be:	4803      	ldr	r0, [pc, #12]	@ (80007cc <UART_DebugPrint+0x30>)
 80007c0:	f009 fa6f 	bl	8009ca2 <HAL_UART_Transmit>
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	240004c8 	.word	0x240004c8
 80007d0:	0800d0cc 	.word	0x0800d0cc

080007d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d8:	f001 fe66 	bl	80024a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007dc:	f000 f820 	bl	8000820 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007e0:	f000 f8a8 	bl	8000934 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e4:	f000 fba2 	bl	8000f2c <MX_GPIO_Init>
  MX_FMC_Init();
 80007e8:	f000 fb52 	bl	8000e90 <MX_FMC_Init>
  MX_I2C4_Init();
 80007ec:	f000 f8d8 	bl	80009a0 <MX_I2C4_Init>
  MX_I2S6_Init();
 80007f0:	f000 f916 	bl	8000a20 <MX_I2S6_Init>
  MX_LTDC_Init();
 80007f4:	f000 f948 	bl	8000a88 <MX_LTDC_Init>
  MX_OCTOSPI1_Init();
 80007f8:	f000 f9f8 	bl	8000bec <MX_OCTOSPI1_Init>
  MX_RTC_Init();
 80007fc:	f000 fa58 	bl	8000cb0 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000800:	f000 fa80 	bl	8000d04 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8000804:	f000 faa2 	bl	8000d4c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000808:	f000 faf6 	bl	8000df8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  WIFI_Init_main();
 800080c:	f7ff ff92 	bl	8000734 <WIFI_Init_main>


  WIFI_JoinNetwork(&hwifi);
 8000810:	4802      	ldr	r0, [pc, #8]	@ (800081c <main+0x48>)
 8000812:	f001 fcbd 	bl	8002190 <WIFI_JoinNetwork>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000816:	bf00      	nop
 8000818:	e7fd      	b.n	8000816 <main+0x42>
 800081a:	bf00      	nop
 800081c:	2400009c 	.word	0x2400009c

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b09c      	sub	sp, #112	@ 0x70
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800082a:	224c      	movs	r2, #76	@ 0x4c
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f00b fc3d 	bl	800c0ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2220      	movs	r2, #32
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f00b fc37 	bl	800c0ae <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000840:	4b3a      	ldr	r3, [pc, #232]	@ (800092c <SystemClock_Config+0x10c>)
 8000842:	f04f 32ff 	mov.w	r2, #4294967295
 8000846:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800084a:	2004      	movs	r0, #4
 800084c:	f003 fd18 	bl	8004280 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000850:	2300      	movs	r3, #0
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	4b36      	ldr	r3, [pc, #216]	@ (8000930 <SystemClock_Config+0x110>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	4a35      	ldr	r2, [pc, #212]	@ (8000930 <SystemClock_Config+0x110>)
 800085a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800085e:	6193      	str	r3, [r2, #24]
 8000860:	4b33      	ldr	r3, [pc, #204]	@ (8000930 <SystemClock_Config+0x110>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800086c:	bf00      	nop
 800086e:	4b30      	ldr	r3, [pc, #192]	@ (8000930 <SystemClock_Config+0x110>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000876:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800087a:	d1f8      	bne.n	800086e <SystemClock_Config+0x4e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800087c:	f003 fcf0 	bl	8004260 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000880:	4b2a      	ldr	r3, [pc, #168]	@ (800092c <SystemClock_Config+0x10c>)
 8000882:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000884:	4a29      	ldr	r2, [pc, #164]	@ (800092c <SystemClock_Config+0x10c>)
 8000886:	f023 0318 	bic.w	r3, r3, #24
 800088a:	6713      	str	r3, [r2, #112]	@ 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800088c:	2307      	movs	r3, #7
 800088e:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000890:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000894:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000896:	2301      	movs	r3, #1
 8000898:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800089a:	2301      	movs	r3, #1
 800089c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800089e:	2340      	movs	r3, #64	@ 0x40
 80008a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a2:	2302      	movs	r3, #2
 80008a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a6:	2302      	movs	r3, #2
 80008a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80008aa:	230c      	movs	r3, #12
 80008ac:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 80008ae:	f44f 738c 	mov.w	r3, #280	@ 0x118
 80008b2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008b4:	2302      	movs	r3, #2
 80008b6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80008b8:	2303      	movs	r3, #3
 80008ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 80008bc:	2304      	movs	r3, #4
 80008be:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80008c0:	2304      	movs	r3, #4
 80008c2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d0:	4618      	mov	r0, r3
 80008d2:	f003 fd2f 	bl	8004334 <HAL_RCC_OscConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008dc:	f000 fc74 	bl	80011c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e0:	233f      	movs	r3, #63	@ 0x3f
 80008e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e4:	2303      	movs	r3, #3
 80008e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008ec:	2308      	movs	r3, #8
 80008ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008f0:	2340      	movs	r3, #64	@ 0x40
 80008f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008f4:	2340      	movs	r3, #64	@ 0x40
 80008f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008fe:	2340      	movs	r3, #64	@ 0x40
 8000900:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2103      	movs	r1, #3
 8000906:	4618      	mov	r0, r3
 8000908:	f004 f946 	bl	8004b98 <HAL_RCC_ClockConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000912:	f000 fc59 	bl	80011c8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8000916:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800091a:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
 800091e:	2000      	movs	r0, #0
 8000920:	f004 faf0 	bl	8004f04 <HAL_RCC_MCOConfig>
}
 8000924:	bf00      	nop
 8000926:	3770      	adds	r7, #112	@ 0x70
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	58024400 	.word	0x58024400
 8000930:	58024800 	.word	0x58024800

08000934 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b0b0      	sub	sp, #192	@ 0xc0
 8000938:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800093a:	463b      	mov	r3, r7
 800093c:	22c0      	movs	r2, #192	@ 0xc0
 800093e:	2100      	movs	r1, #0
 8000940:	4618      	mov	r0, r3
 8000942:	f00b fbb4 	bl	800c0ae <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_OSPI
 8000946:	4a15      	ldr	r2, [pc, #84]	@ (800099c <PeriphCommonClock_Config+0x68>)
 8000948:	f04f 0300 	mov.w	r3, #0
 800094c:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.PLL2.PLL2M = 12;
 8000950:	230c      	movs	r3, #12
 8000952:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 200;
 8000954:	23c8      	movs	r3, #200	@ 0xc8
 8000956:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000958:	2302      	movs	r3, #2
 800095a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800095c:	2302      	movs	r3, #2
 800095e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 4;
 8000960:	2304      	movs	r3, #4
 8000962:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000964:	2340      	movs	r3, #64	@ 0x40
 8000966:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 8000970:	2302      	movs	r3, #2
 8000972:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8000974:	2320      	movs	r3, #32
 8000976:	64fb      	str	r3, [r7, #76]	@ 0x4c
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000978:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800097c:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 800097e:	2300      	movs	r3, #0
 8000980:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000982:	463b      	mov	r3, r7
 8000984:	4618      	mov	r0, r3
 8000986:	f004 fcfd 	bl	8005384 <HAL_RCCEx_PeriphCLKConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 8000990:	f000 fc1a 	bl	80011c8 <Error_Handler>
  }
}
 8000994:	bf00      	nop
 8000996:	37c0      	adds	r7, #192	@ 0xc0
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	83010000 	.word	0x83010000

080009a0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80009a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a14 <MX_I2C4_Init+0x74>)
 80009a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a18 <MX_I2C4_Init+0x78>)
 80009a8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0xC010151E;
 80009aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000a14 <MX_I2C4_Init+0x74>)
 80009ac:	4a1b      	ldr	r2, [pc, #108]	@ (8000a1c <MX_I2C4_Init+0x7c>)
 80009ae:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80009b0:	4b18      	ldr	r3, [pc, #96]	@ (8000a14 <MX_I2C4_Init+0x74>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009b6:	4b17      	ldr	r3, [pc, #92]	@ (8000a14 <MX_I2C4_Init+0x74>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009bc:	4b15      	ldr	r3, [pc, #84]	@ (8000a14 <MX_I2C4_Init+0x74>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80009c2:	4b14      	ldr	r3, [pc, #80]	@ (8000a14 <MX_I2C4_Init+0x74>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009c8:	4b12      	ldr	r3, [pc, #72]	@ (8000a14 <MX_I2C4_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ce:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <MX_I2C4_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a14 <MX_I2C4_Init+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80009da:	480e      	ldr	r0, [pc, #56]	@ (8000a14 <MX_I2C4_Init+0x74>)
 80009dc:	f002 f8e0 	bl	8002ba0 <HAL_I2C_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80009e6:	f000 fbef 	bl	80011c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ea:	2100      	movs	r1, #0
 80009ec:	4809      	ldr	r0, [pc, #36]	@ (8000a14 <MX_I2C4_Init+0x74>)
 80009ee:	f002 f973 	bl	8002cd8 <HAL_I2CEx_ConfigAnalogFilter>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80009f8:	f000 fbe6 	bl	80011c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80009fc:	2100      	movs	r1, #0
 80009fe:	4805      	ldr	r0, [pc, #20]	@ (8000a14 <MX_I2C4_Init+0x74>)
 8000a00:	f002 f9b5 	bl	8002d6e <HAL_I2CEx_ConfigDigitalFilter>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a0a:	f000 fbdd 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	240001f0 	.word	0x240001f0
 8000a18:	58001c00 	.word	0x58001c00
 8000a1c:	c010151e 	.word	0xc010151e

08000a20 <MX_I2S6_Init>:
  * @brief I2S6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S6_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END I2S6_Init 0 */

  /* USER CODE BEGIN I2S6_Init 1 */

  /* USER CODE END I2S6_Init 1 */
  hi2s6.Instance = SPI6;
 8000a24:	4b16      	ldr	r3, [pc, #88]	@ (8000a80 <MX_I2S6_Init+0x60>)
 8000a26:	4a17      	ldr	r2, [pc, #92]	@ (8000a84 <MX_I2S6_Init+0x64>)
 8000a28:	601a      	str	r2, [r3, #0]
  hi2s6.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 8000a2a:	4b15      	ldr	r3, [pc, #84]	@ (8000a80 <MX_I2S6_Init+0x60>)
 8000a2c:	220a      	movs	r2, #10
 8000a2e:	605a      	str	r2, [r3, #4]
  hi2s6.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a30:	4b13      	ldr	r3, [pc, #76]	@ (8000a80 <MX_I2S6_Init+0x60>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  hi2s6.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a36:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <MX_I2S6_Init+0x60>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
  hi2s6.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000a3c:	4b10      	ldr	r3, [pc, #64]	@ (8000a80 <MX_I2S6_Init+0x60>)
 8000a3e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000a42:	611a      	str	r2, [r3, #16]
  hi2s6.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000a44:	4b0e      	ldr	r3, [pc, #56]	@ (8000a80 <MX_I2S6_Init+0x60>)
 8000a46:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000a4a:	615a      	str	r2, [r3, #20]
  hi2s6.Init.CPOL = I2S_CPOL_LOW;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <MX_I2S6_Init+0x60>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	619a      	str	r2, [r3, #24]
  hi2s6.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <MX_I2S6_Init+0x60>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	61da      	str	r2, [r3, #28]
  hi2s6.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000a58:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <MX_I2S6_Init+0x60>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	621a      	str	r2, [r3, #32]
  hi2s6.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	@ (8000a80 <MX_I2S6_Init+0x60>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s6.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000a64:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <MX_I2S6_Init+0x60>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s6) != HAL_OK)
 8000a6a:	4805      	ldr	r0, [pc, #20]	@ (8000a80 <MX_I2S6_Init+0x60>)
 8000a6c:	f002 f9cc 	bl	8002e08 <HAL_I2S_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_I2S6_Init+0x5a>
  {
    Error_Handler();
 8000a76:	f000 fba7 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S6_Init 2 */

  /* USER CODE END I2S6_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	24000244 	.word	0x24000244
 8000a84:	58001400 	.word	0x58001400

08000a88 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b09a      	sub	sp, #104	@ 0x68
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000a8e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000a92:	2234      	movs	r2, #52	@ 0x34
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f00b fb09 	bl	800c0ae <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	2234      	movs	r2, #52	@ 0x34
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f00b fb03 	bl	800c0ae <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000aa8:	4b4e      	ldr	r3, [pc, #312]	@ (8000be4 <MX_LTDC_Init+0x15c>)
 8000aaa:	4a4f      	ldr	r2, [pc, #316]	@ (8000be8 <MX_LTDC_Init+0x160>)
 8000aac:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000aae:	4b4d      	ldr	r3, [pc, #308]	@ (8000be4 <MX_LTDC_Init+0x15c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ab4:	4b4b      	ldr	r3, [pc, #300]	@ (8000be4 <MX_LTDC_Init+0x15c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000aba:	4b4a      	ldr	r3, [pc, #296]	@ (8000be4 <MX_LTDC_Init+0x15c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ac0:	4b48      	ldr	r3, [pc, #288]	@ (8000be4 <MX_LTDC_Init+0x15c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8000ac6:	4b47      	ldr	r3, [pc, #284]	@ (8000be4 <MX_LTDC_Init+0x15c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000acc:	4b45      	ldr	r3, [pc, #276]	@ (8000be4 <MX_LTDC_Init+0x15c>)
 8000ace:	2209      	movs	r2, #9
 8000ad0:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 43;
 8000ad2:	4b44      	ldr	r3, [pc, #272]	@ (8000be4 <MX_LTDC_Init+0x15c>)
 8000ad4:	222b      	movs	r2, #43	@ 0x2b
 8000ad6:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 21;
 8000ad8:	4b42      	ldr	r3, [pc, #264]	@ (8000be4 <MX_LTDC_Init+0x15c>)
 8000ada:	2215      	movs	r2, #21
 8000adc:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 523;
 8000ade:	4b41      	ldr	r3, [pc, #260]	@ (8000be4 <MX_LTDC_Init+0x15c>)
 8000ae0:	f240 220b 	movw	r2, #523	@ 0x20b
 8000ae4:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 293;
 8000ae6:	4b3f      	ldr	r3, [pc, #252]	@ (8000be4 <MX_LTDC_Init+0x15c>)
 8000ae8:	f240 1225 	movw	r2, #293	@ 0x125
 8000aec:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 531;
 8000aee:	4b3d      	ldr	r3, [pc, #244]	@ (8000be4 <MX_LTDC_Init+0x15c>)
 8000af0:	f240 2213 	movw	r2, #531	@ 0x213
 8000af4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 297;
 8000af6:	4b3b      	ldr	r3, [pc, #236]	@ (8000be4 <MX_LTDC_Init+0x15c>)
 8000af8:	f240 1229 	movw	r2, #297	@ 0x129
 8000afc:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000afe:	4b39      	ldr	r3, [pc, #228]	@ (8000be4 <MX_LTDC_Init+0x15c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000b06:	4b37      	ldr	r3, [pc, #220]	@ (8000be4 <MX_LTDC_Init+0x15c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b0e:	4b35      	ldr	r3, [pc, #212]	@ (8000be4 <MX_LTDC_Init+0x15c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b16:	4833      	ldr	r0, [pc, #204]	@ (8000be4 <MX_LTDC_Init+0x15c>)
 8000b18:	f002 faa6 	bl	8003068 <HAL_LTDC_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000b22:	f000 fb51 	bl	80011c8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000b36:	2300      	movs	r3, #0
 8000b38:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b46:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000b48:	2305      	movs	r3, #5
 8000b4a:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b6a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000b6e:	2200      	movs	r2, #0
 8000b70:	4619      	mov	r1, r3
 8000b72:	481c      	ldr	r0, [pc, #112]	@ (8000be4 <MX_LTDC_Init+0x15c>)
 8000b74:	f002 fb15 	bl	80031a2 <HAL_LTDC_ConfigLayer>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000b7e:	f000 fb23 	bl	80011c8 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ba2:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000ba4:	2305      	movs	r3, #5
 8000ba6:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000bc6:	463b      	mov	r3, r7
 8000bc8:	2201      	movs	r2, #1
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4805      	ldr	r0, [pc, #20]	@ (8000be4 <MX_LTDC_Init+0x15c>)
 8000bce:	f002 fae8 	bl	80031a2 <HAL_LTDC_ConfigLayer>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000bd8:	f000 faf6 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000bdc:	bf00      	nop
 8000bde:	3768      	adds	r7, #104	@ 0x68
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	24000298 	.word	0x24000298
 8000be8:	50001000 	.word	0x50001000

08000bec <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
 8000c00:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000c02:	4b28      	ldr	r3, [pc, #160]	@ (8000ca4 <MX_OCTOSPI1_Init+0xb8>)
 8000c04:	4a28      	ldr	r2, [pc, #160]	@ (8000ca8 <MX_OCTOSPI1_Init+0xbc>)
 8000c06:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000c08:	4b26      	ldr	r3, [pc, #152]	@ (8000ca4 <MX_OCTOSPI1_Init+0xb8>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000c0e:	4b25      	ldr	r3, [pc, #148]	@ (8000ca4 <MX_OCTOSPI1_Init+0xb8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000c14:	4b23      	ldr	r3, [pc, #140]	@ (8000ca4 <MX_OCTOSPI1_Init+0xb8>)
 8000c16:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000c1a:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000c1c:	4b21      	ldr	r3, [pc, #132]	@ (8000ca4 <MX_OCTOSPI1_Init+0xb8>)
 8000c1e:	2220      	movs	r2, #32
 8000c20:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000c22:	4b20      	ldr	r3, [pc, #128]	@ (8000ca4 <MX_OCTOSPI1_Init+0xb8>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000c28:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca4 <MX_OCTOSPI1_Init+0xb8>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca4 <MX_OCTOSPI1_Init+0xb8>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000c34:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca4 <MX_OCTOSPI1_Init+0xb8>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca4 <MX_OCTOSPI1_Init+0xb8>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000c40:	4b18      	ldr	r3, [pc, #96]	@ (8000ca4 <MX_OCTOSPI1_Init+0xb8>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000c46:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <MX_OCTOSPI1_Init+0xb8>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000c4c:	4b15      	ldr	r3, [pc, #84]	@ (8000ca4 <MX_OCTOSPI1_Init+0xb8>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000c52:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <MX_OCTOSPI1_Init+0xb8>)
 8000c54:	2208      	movs	r2, #8
 8000c56:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 8000c58:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <MX_OCTOSPI1_Init+0xb8>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <MX_OCTOSPI1_Init+0xb8>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000c64:	480f      	ldr	r0, [pc, #60]	@ (8000ca4 <MX_OCTOSPI1_Init+0xb8>)
 8000c66:	f002 fc51 	bl	800350c <HAL_OSPI_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 8000c70:	f000 faaa 	bl	80011c8 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8000c74:	2301      	movs	r3, #1
 8000c76:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.DQSPort = 1;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	607b      	str	r3, [r7, #4]
  sOspiManagerCfg.NCSPort = 1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000c80:	4b0a      	ldr	r3, [pc, #40]	@ (8000cac <MX_OCTOSPI1_Init+0xc0>)
 8000c82:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c84:	463b      	mov	r3, r7
 8000c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	@ (8000ca4 <MX_OCTOSPI1_Init+0xb8>)
 8000c8e:	f002 fd09 	bl	80036a4 <HAL_OSPIM_Config>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_OCTOSPI1_Init+0xb0>
  {
    Error_Handler();
 8000c98:	f000 fa96 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	24000340 	.word	0x24000340
 8000ca8:	52005000 	.word	0x52005000
 8000cac:	01000001 	.word	0x01000001

08000cb0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <MX_RTC_Init+0x4c>)
 8000cb6:	4a12      	ldr	r2, [pc, #72]	@ (8000d00 <MX_RTC_Init+0x50>)
 8000cb8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000cba:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <MX_RTC_Init+0x4c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cfc <MX_RTC_Init+0x4c>)
 8000cc2:	227f      	movs	r2, #127	@ 0x7f
 8000cc4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000cfc <MX_RTC_Init+0x4c>)
 8000cc8:	22ff      	movs	r2, #255	@ 0xff
 8000cca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8000cfc <MX_RTC_Init+0x4c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cfc <MX_RTC_Init+0x4c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000cd8:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <MX_RTC_Init+0x4c>)
 8000cda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cde:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <MX_RTC_Init+0x4c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ce6:	4805      	ldr	r0, [pc, #20]	@ (8000cfc <MX_RTC_Init+0x4c>)
 8000ce8:	f006 ff56 	bl	8007b98 <HAL_RTC_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8000cf2:	f000 fa69 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	2400039c 	.word	0x2400039c
 8000d00:	58004000 	.word	0x58004000

08000d04 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000d08:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <MX_SDMMC1_SD_Init+0x40>)
 8000d0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000d48 <MX_SDMMC1_SD_Init+0x44>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d44 <MX_SDMMC1_SD_Init+0x40>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000d14:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <MX_SDMMC1_SD_Init+0x40>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d44 <MX_SDMMC1_SD_Init+0x40>)
 8000d1c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d20:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000d22:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <MX_SDMMC1_SD_Init+0x40>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000d28:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <MX_SDMMC1_SD_Init+0x40>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000d2e:	4805      	ldr	r0, [pc, #20]	@ (8000d44 <MX_SDMMC1_SD_Init+0x40>)
 8000d30:	f007 f850 	bl	8007dd4 <HAL_SD_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000d3a:	f000 fa45 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	240003c4 	.word	0x240003c4
 8000d48:	52007000 	.word	0x52007000

08000d4c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d50:	4b27      	ldr	r3, [pc, #156]	@ (8000df0 <MX_SPI2_Init+0xa4>)
 8000d52:	4a28      	ldr	r2, [pc, #160]	@ (8000df4 <MX_SPI2_Init+0xa8>)
 8000d54:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d56:	4b26      	ldr	r3, [pc, #152]	@ (8000df0 <MX_SPI2_Init+0xa4>)
 8000d58:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000d5c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d5e:	4b24      	ldr	r3, [pc, #144]	@ (8000df0 <MX_SPI2_Init+0xa4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000d64:	4b22      	ldr	r3, [pc, #136]	@ (8000df0 <MX_SPI2_Init+0xa4>)
 8000d66:	220f      	movs	r2, #15
 8000d68:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d6a:	4b21      	ldr	r3, [pc, #132]	@ (8000df0 <MX_SPI2_Init+0xa4>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d70:	4b1f      	ldr	r3, [pc, #124]	@ (8000df0 <MX_SPI2_Init+0xa4>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d76:	4b1e      	ldr	r3, [pc, #120]	@ (8000df0 <MX_SPI2_Init+0xa4>)
 8000d78:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000d7c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000df0 <MX_SPI2_Init+0xa4>)
 8000d80:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000d84:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d86:	4b1a      	ldr	r3, [pc, #104]	@ (8000df0 <MX_SPI2_Init+0xa4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d8c:	4b18      	ldr	r3, [pc, #96]	@ (8000df0 <MX_SPI2_Init+0xa4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d92:	4b17      	ldr	r3, [pc, #92]	@ (8000df0 <MX_SPI2_Init+0xa4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000d98:	4b15      	ldr	r3, [pc, #84]	@ (8000df0 <MX_SPI2_Init+0xa4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d9e:	4b14      	ldr	r3, [pc, #80]	@ (8000df0 <MX_SPI2_Init+0xa4>)
 8000da0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000da4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000da6:	4b12      	ldr	r3, [pc, #72]	@ (8000df0 <MX_SPI2_Init+0xa4>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000dac:	4b10      	ldr	r3, [pc, #64]	@ (8000df0 <MX_SPI2_Init+0xa4>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000db2:	4b0f      	ldr	r3, [pc, #60]	@ (8000df0 <MX_SPI2_Init+0xa4>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000db8:	4b0d      	ldr	r3, [pc, #52]	@ (8000df0 <MX_SPI2_Init+0xa4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <MX_SPI2_Init+0xa4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000df0 <MX_SPI2_Init+0xa4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000dca:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <MX_SPI2_Init+0xa4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000dd0:	4b07      	ldr	r3, [pc, #28]	@ (8000df0 <MX_SPI2_Init+0xa4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000dd6:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <MX_SPI2_Init+0xa4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ddc:	4804      	ldr	r0, [pc, #16]	@ (8000df0 <MX_SPI2_Init+0xa4>)
 8000dde:	f008 f8a3 	bl	8008f28 <HAL_SPI_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8000de8:	f000 f9ee 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	24000440 	.word	0x24000440
 8000df4:	40003800 	.word	0x40003800

08000df8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dfc:	4b22      	ldr	r3, [pc, #136]	@ (8000e88 <MX_USART1_UART_Init+0x90>)
 8000dfe:	4a23      	ldr	r2, [pc, #140]	@ (8000e8c <MX_USART1_UART_Init+0x94>)
 8000e00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e02:	4b21      	ldr	r3, [pc, #132]	@ (8000e88 <MX_USART1_UART_Init+0x90>)
 8000e04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000e88 <MX_USART1_UART_Init+0x90>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e10:	4b1d      	ldr	r3, [pc, #116]	@ (8000e88 <MX_USART1_UART_Init+0x90>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e16:	4b1c      	ldr	r3, [pc, #112]	@ (8000e88 <MX_USART1_UART_Init+0x90>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e88 <MX_USART1_UART_Init+0x90>)
 8000e1e:	220c      	movs	r2, #12
 8000e20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e22:	4b19      	ldr	r3, [pc, #100]	@ (8000e88 <MX_USART1_UART_Init+0x90>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e28:	4b17      	ldr	r3, [pc, #92]	@ (8000e88 <MX_USART1_UART_Init+0x90>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e2e:	4b16      	ldr	r3, [pc, #88]	@ (8000e88 <MX_USART1_UART_Init+0x90>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e34:	4b14      	ldr	r3, [pc, #80]	@ (8000e88 <MX_USART1_UART_Init+0x90>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e3a:	4b13      	ldr	r3, [pc, #76]	@ (8000e88 <MX_USART1_UART_Init+0x90>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e40:	4811      	ldr	r0, [pc, #68]	@ (8000e88 <MX_USART1_UART_Init+0x90>)
 8000e42:	f008 fede 	bl	8009c02 <HAL_UART_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e4c:	f000 f9bc 	bl	80011c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e50:	2100      	movs	r1, #0
 8000e52:	480d      	ldr	r0, [pc, #52]	@ (8000e88 <MX_USART1_UART_Init+0x90>)
 8000e54:	f00a f941 	bl	800b0da <HAL_UARTEx_SetTxFifoThreshold>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e5e:	f000 f9b3 	bl	80011c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e62:	2100      	movs	r1, #0
 8000e64:	4808      	ldr	r0, [pc, #32]	@ (8000e88 <MX_USART1_UART_Init+0x90>)
 8000e66:	f00a f976 	bl	800b156 <HAL_UARTEx_SetRxFifoThreshold>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e70:	f000 f9aa 	bl	80011c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e74:	4804      	ldr	r0, [pc, #16]	@ (8000e88 <MX_USART1_UART_Init+0x90>)
 8000e76:	f00a f8f7 	bl	800b068 <HAL_UARTEx_DisableFifoMode>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e80:	f000 f9a2 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	240004c8 	.word	0x240004c8
 8000e8c:	40011000 	.word	0x40011000

08000e90 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
 8000ea4:	615a      	str	r2, [r3, #20]
 8000ea6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000ea8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f24 <MX_FMC_Init+0x94>)
 8000eaa:	4a1f      	ldr	r2, [pc, #124]	@ (8000f28 <MX_FMC_Init+0x98>)
 8000eac:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000eae:	4b1d      	ldr	r3, [pc, #116]	@ (8000f24 <MX_FMC_Init+0x94>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f24 <MX_FMC_Init+0x94>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000eba:	4b1a      	ldr	r3, [pc, #104]	@ (8000f24 <MX_FMC_Init+0x94>)
 8000ebc:	2204      	movs	r2, #4
 8000ebe:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000ec0:	4b18      	ldr	r3, [pc, #96]	@ (8000f24 <MX_FMC_Init+0x94>)
 8000ec2:	2210      	movs	r2, #16
 8000ec4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000ec6:	4b17      	ldr	r3, [pc, #92]	@ (8000f24 <MX_FMC_Init+0x94>)
 8000ec8:	2240      	movs	r2, #64	@ 0x40
 8000eca:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000ecc:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <MX_FMC_Init+0x94>)
 8000ece:	2280      	movs	r2, #128	@ 0x80
 8000ed0:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ed2:	4b14      	ldr	r3, [pc, #80]	@ (8000f24 <MX_FMC_Init+0x94>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <MX_FMC_Init+0x94>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000ede:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <MX_FMC_Init+0x94>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f24 <MX_FMC_Init+0x94>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000eea:	2310      	movs	r3, #16
 8000eec:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000eee:	2310      	movs	r3, #16
 8000ef0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000ef2:	2310      	movs	r3, #16
 8000ef4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000ef6:	2310      	movs	r3, #16
 8000ef8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000efa:	2310      	movs	r3, #16
 8000efc:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000efe:	2310      	movs	r3, #16
 8000f00:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000f02:	2310      	movs	r3, #16
 8000f04:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4806      	ldr	r0, [pc, #24]	@ (8000f24 <MX_FMC_Init+0x94>)
 8000f0c:	f007 ffd0 	bl	8008eb0 <HAL_SDRAM_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000f16:	f000 f957 	bl	80011c8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000f1a:	bf00      	nop
 8000f1c:	3720      	adds	r7, #32
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	2400055c 	.word	0x2400055c
 8000f28:	52004140 	.word	0x52004140

08000f2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b090      	sub	sp, #64	@ 0x40
 8000f30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
 8000f40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f42:	4b9b      	ldr	r3, [pc, #620]	@ (80011b0 <MX_GPIO_Init+0x284>)
 8000f44:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f48:	4a99      	ldr	r2, [pc, #612]	@ (80011b0 <MX_GPIO_Init+0x284>)
 8000f4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f4e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f52:	4b97      	ldr	r3, [pc, #604]	@ (80011b0 <MX_GPIO_Init+0x284>)
 8000f54:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f60:	4b93      	ldr	r3, [pc, #588]	@ (80011b0 <MX_GPIO_Init+0x284>)
 8000f62:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f66:	4a92      	ldr	r2, [pc, #584]	@ (80011b0 <MX_GPIO_Init+0x284>)
 8000f68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f6c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f70:	4b8f      	ldr	r3, [pc, #572]	@ (80011b0 <MX_GPIO_Init+0x284>)
 8000f72:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000f7e:	4b8c      	ldr	r3, [pc, #560]	@ (80011b0 <MX_GPIO_Init+0x284>)
 8000f80:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f84:	4a8a      	ldr	r2, [pc, #552]	@ (80011b0 <MX_GPIO_Init+0x284>)
 8000f86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f8a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f8e:	4b88      	ldr	r3, [pc, #544]	@ (80011b0 <MX_GPIO_Init+0x284>)
 8000f90:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f98:	623b      	str	r3, [r7, #32]
 8000f9a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f9c:	4b84      	ldr	r3, [pc, #528]	@ (80011b0 <MX_GPIO_Init+0x284>)
 8000f9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fa2:	4a83      	ldr	r2, [pc, #524]	@ (80011b0 <MX_GPIO_Init+0x284>)
 8000fa4:	f043 0308 	orr.w	r3, r3, #8
 8000fa8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000fac:	4b80      	ldr	r3, [pc, #512]	@ (80011b0 <MX_GPIO_Init+0x284>)
 8000fae:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fb2:	f003 0308 	and.w	r3, r3, #8
 8000fb6:	61fb      	str	r3, [r7, #28]
 8000fb8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fba:	4b7d      	ldr	r3, [pc, #500]	@ (80011b0 <MX_GPIO_Init+0x284>)
 8000fbc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fc0:	4a7b      	ldr	r2, [pc, #492]	@ (80011b0 <MX_GPIO_Init+0x284>)
 8000fc2:	f043 0304 	orr.w	r3, r3, #4
 8000fc6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000fca:	4b79      	ldr	r3, [pc, #484]	@ (80011b0 <MX_GPIO_Init+0x284>)
 8000fcc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fd0:	f003 0304 	and.w	r3, r3, #4
 8000fd4:	61bb      	str	r3, [r7, #24]
 8000fd6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fd8:	4b75      	ldr	r3, [pc, #468]	@ (80011b0 <MX_GPIO_Init+0x284>)
 8000fda:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fde:	4a74      	ldr	r2, [pc, #464]	@ (80011b0 <MX_GPIO_Init+0x284>)
 8000fe0:	f043 0310 	orr.w	r3, r3, #16
 8000fe4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000fe8:	4b71      	ldr	r3, [pc, #452]	@ (80011b0 <MX_GPIO_Init+0x284>)
 8000fea:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fee:	f003 0310 	and.w	r3, r3, #16
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff6:	4b6e      	ldr	r3, [pc, #440]	@ (80011b0 <MX_GPIO_Init+0x284>)
 8000ff8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ffc:	4a6c      	ldr	r2, [pc, #432]	@ (80011b0 <MX_GPIO_Init+0x284>)
 8000ffe:	f043 0302 	orr.w	r3, r3, #2
 8001002:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001006:	4b6a      	ldr	r3, [pc, #424]	@ (80011b0 <MX_GPIO_Init+0x284>)
 8001008:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001014:	4b66      	ldr	r3, [pc, #408]	@ (80011b0 <MX_GPIO_Init+0x284>)
 8001016:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800101a:	4a65      	ldr	r2, [pc, #404]	@ (80011b0 <MX_GPIO_Init+0x284>)
 800101c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001020:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001024:	4b62      	ldr	r3, [pc, #392]	@ (80011b0 <MX_GPIO_Init+0x284>)
 8001026:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800102a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	4b5f      	ldr	r3, [pc, #380]	@ (80011b0 <MX_GPIO_Init+0x284>)
 8001034:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001038:	4a5d      	ldr	r2, [pc, #372]	@ (80011b0 <MX_GPIO_Init+0x284>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001042:	4b5b      	ldr	r3, [pc, #364]	@ (80011b0 <MX_GPIO_Init+0x284>)
 8001044:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001050:	4b57      	ldr	r3, [pc, #348]	@ (80011b0 <MX_GPIO_Init+0x284>)
 8001052:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001056:	4a56      	ldr	r2, [pc, #344]	@ (80011b0 <MX_GPIO_Init+0x284>)
 8001058:	f043 0320 	orr.w	r3, r3, #32
 800105c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001060:	4b53      	ldr	r3, [pc, #332]	@ (80011b0 <MX_GPIO_Init+0x284>)
 8001062:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001066:	f003 0320 	and.w	r3, r3, #32
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800106e:	4b50      	ldr	r3, [pc, #320]	@ (80011b0 <MX_GPIO_Init+0x284>)
 8001070:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001074:	4a4e      	ldr	r2, [pc, #312]	@ (80011b0 <MX_GPIO_Init+0x284>)
 8001076:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800107a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800107e:	4b4c      	ldr	r3, [pc, #304]	@ (80011b0 <MX_GPIO_Init+0x284>)
 8001080:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001088:	603b      	str	r3, [r7, #0]
 800108a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RESET_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	210e      	movs	r1, #14
 8001090:	4848      	ldr	r0, [pc, #288]	@ (80011b4 <MX_GPIO_Init+0x288>)
 8001092:	f001 fd6b 	bl	8002b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USER_LED1_Pin|USER_LED2_Pin, GPIO_PIN_RESET);
 8001096:	2200      	movs	r2, #0
 8001098:	f640 0104 	movw	r1, #2052	@ 0x804
 800109c:	4846      	ldr	r0, [pc, #280]	@ (80011b8 <MX_GPIO_Init+0x28c>)
 800109e:	f001 fd65 	bl	8002b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_NSS_GPIO_Port, WIFI_NSS_Pin, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010a8:	4844      	ldr	r0, [pc, #272]	@ (80011bc <MX_GPIO_Init+0x290>)
 80010aa:	f001 fd5f 	bl	8002b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_NRST_GPIO_Port, AUDIO_NRST_Pin, GPIO_PIN_SET);
 80010ae:	2201      	movs	r2, #1
 80010b0:	2108      	movs	r1, #8
 80010b2:	4841      	ldr	r0, [pc, #260]	@ (80011b8 <MX_GPIO_Init+0x28c>)
 80010b4:	f001 fd5a 	bl	8002b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_SET);
 80010b8:	2201      	movs	r2, #1
 80010ba:	2106      	movs	r1, #6
 80010bc:	483f      	ldr	r0, [pc, #252]	@ (80011bc <MX_GPIO_Init+0x290>)
 80010be:	f001 fd55 	bl	8002b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WIFI_GPIO_Pin WIFI_CMD_DATA_READY_Pin */
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_CMD_DATA_READY_Pin;
 80010c2:	2330      	movs	r3, #48	@ 0x30
 80010c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010c6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80010d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010d4:	4619      	mov	r1, r3
 80010d6:	4837      	ldr	r0, [pc, #220]	@ (80011b4 <MX_GPIO_Init+0x288>)
 80010d8:	f001 fb80 	bl	80027dc <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_BOOT_Pin WIFI_WKUP_Pin WIFI_RESET_Pin */
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RESET_Pin;
 80010dc:	230e      	movs	r3, #14
 80010de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e0:	2301      	movs	r3, #1
 80010e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	2300      	movs	r3, #0
 80010ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80010ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010f0:	4619      	mov	r1, r3
 80010f2:	4830      	ldr	r0, [pc, #192]	@ (80011b4 <MX_GPIO_Init+0x288>)
 80010f4:	f001 fb72 	bl	80027dc <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED1_Pin AUDIO_NRST_Pin USER_LED2_Pin */
  GPIO_InitStruct.Pin = USER_LED1_Pin|AUDIO_NRST_Pin|USER_LED2_Pin;
 80010f8:	f640 030c 	movw	r3, #2060	@ 0x80c
 80010fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fe:	2301      	movs	r3, #1
 8001100:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800110a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800110e:	4619      	mov	r1, r3
 8001110:	4829      	ldr	r0, [pc, #164]	@ (80011b8 <MX_GPIO_Init+0x28c>)
 8001112:	f001 fb63 	bl	80027dc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001116:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800111a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800111c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001120:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001122:	2301      	movs	r3, #1
 8001124:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001126:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800112a:	4619      	mov	r1, r3
 800112c:	4821      	ldr	r0, [pc, #132]	@ (80011b4 <MX_GPIO_Init+0x288>)
 800112e:	f001 fb55 	bl	80027dc <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_NSS_Pin LCD_BL_CTRL_Pin LCD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = WIFI_NSS_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin;
 8001132:	f640 0306 	movw	r3, #2054	@ 0x806
 8001136:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001138:	2301      	movs	r3, #1
 800113a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2300      	movs	r3, #0
 8001142:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001144:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001148:	4619      	mov	r1, r3
 800114a:	481c      	ldr	r0, [pc, #112]	@ (80011bc <MX_GPIO_Init+0x290>)
 800114c:	f001 fb46 	bl	80027dc <HAL_GPIO_Init>

  /*Configure GPIO pin : WAKEUP_Pin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 8001150:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001154:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001156:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800115a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8001160:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001164:	4619      	mov	r1, r3
 8001166:	4816      	ldr	r0, [pc, #88]	@ (80011c0 <MX_GPIO_Init+0x294>)
 8001168:	f001 fb38 	bl	80027dc <HAL_GPIO_Init>

  /*Configure GPIO pin : MCO_Pin */
  GPIO_InitStruct.Pin = MCO_Pin;
 800116c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001170:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800117e:	2300      	movs	r3, #0
 8001180:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 8001182:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001186:	4619      	mov	r1, r3
 8001188:	480c      	ldr	r0, [pc, #48]	@ (80011bc <MX_GPIO_Init+0x290>)
 800118a:	f001 fb27 	bl	80027dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800118e:	2304      	movs	r3, #4
 8001190:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001192:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001196:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800119c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011a0:	4619      	mov	r1, r3
 80011a2:	4808      	ldr	r0, [pc, #32]	@ (80011c4 <MX_GPIO_Init+0x298>)
 80011a4:	f001 fb1a 	bl	80027dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011a8:	bf00      	nop
 80011aa:	3740      	adds	r7, #64	@ 0x40
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	58024400 	.word	0x58024400
 80011b4:	58022000 	.word	0x58022000
 80011b8:	58021800 	.word	0x58021800
 80011bc:	58020000 	.word	0x58020000
 80011c0:	58020800 	.word	0x58020800
 80011c4:	58021c00 	.word	0x58021c00

080011c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011cc:	b672      	cpsid	i
}
 80011ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <Error_Handler+0x8>

080011d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011da:	4b0a      	ldr	r3, [pc, #40]	@ (8001204 <HAL_MspInit+0x30>)
 80011dc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80011e0:	4a08      	ldr	r2, [pc, #32]	@ (8001204 <HAL_MspInit+0x30>)
 80011e2:	f043 0302 	orr.w	r3, r3, #2
 80011e6:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80011ea:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <HAL_MspInit+0x30>)
 80011ec:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	58024400 	.word	0x58024400

08001208 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b0ba      	sub	sp, #232	@ 0xe8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	22c0      	movs	r2, #192	@ 0xc0
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f00a ff40 	bl	800c0ae <memset>
  if(hi2c->Instance==I2C4)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a27      	ldr	r2, [pc, #156]	@ (80012d0 <HAL_I2C_MspInit+0xc8>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d146      	bne.n	80012c6 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001238:	f04f 0210 	mov.w	r2, #16
 800123c:	f04f 0300 	mov.w	r3, #0
 8001240:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001244:	2300      	movs	r3, #0
 8001246:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	4618      	mov	r0, r3
 8001250:	f004 f898 	bl	8005384 <HAL_RCCEx_PeriphCLKConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800125a:	f7ff ffb5 	bl	80011c8 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800125e:	4b1d      	ldr	r3, [pc, #116]	@ (80012d4 <HAL_I2C_MspInit+0xcc>)
 8001260:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001264:	4a1b      	ldr	r2, [pc, #108]	@ (80012d4 <HAL_I2C_MspInit+0xcc>)
 8001266:	f043 0308 	orr.w	r3, r3, #8
 800126a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800126e:	4b19      	ldr	r3, [pc, #100]	@ (80012d4 <HAL_I2C_MspInit+0xcc>)
 8001270:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001274:	f003 0308 	and.w	r3, r3, #8
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 800127c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001280:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001284:	2312      	movs	r3, #18
 8001286:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800128a:	2301      	movs	r3, #1
 800128c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2300      	movs	r3, #0
 8001292:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001296:	2304      	movs	r3, #4
 8001298:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800129c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012a0:	4619      	mov	r1, r3
 80012a2:	480d      	ldr	r0, [pc, #52]	@ (80012d8 <HAL_I2C_MspInit+0xd0>)
 80012a4:	f001 fa9a 	bl	80027dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80012a8:	4b0a      	ldr	r3, [pc, #40]	@ (80012d4 <HAL_I2C_MspInit+0xcc>)
 80012aa:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80012ae:	4a09      	ldr	r2, [pc, #36]	@ (80012d4 <HAL_I2C_MspInit+0xcc>)
 80012b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012b4:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80012b8:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <HAL_I2C_MspInit+0xcc>)
 80012ba:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80012be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 80012c6:	bf00      	nop
 80012c8:	37e8      	adds	r7, #232	@ 0xe8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	58001c00 	.word	0x58001c00
 80012d4:	58024400 	.word	0x58024400
 80012d8:	58020c00 	.word	0x58020c00

080012dc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b0bc      	sub	sp, #240	@ 0xf0
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f4:	f107 0318 	add.w	r3, r7, #24
 80012f8:	22c0      	movs	r2, #192	@ 0xc0
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f00a fed6 	bl	800c0ae <memset>
  if(hi2s->Instance==SPI6)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a39      	ldr	r2, [pc, #228]	@ (80013ec <HAL_I2S_MspInit+0x110>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d16a      	bne.n	80013e2 <HAL_I2S_MspInit+0x106>

  /* USER CODE END SPI6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 800130c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001310:	f04f 0300 	mov.w	r3, #0
 8001314:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
 8001318:	2300      	movs	r3, #0
 800131a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800131e:	f107 0318 	add.w	r3, r7, #24
 8001322:	4618      	mov	r0, r3
 8001324:	f004 f82e 	bl	8005384 <HAL_RCCEx_PeriphCLKConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_I2S_MspInit+0x56>
    {
      Error_Handler();
 800132e:	f7ff ff4b 	bl	80011c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI6_CLK_ENABLE();
 8001332:	4b2f      	ldr	r3, [pc, #188]	@ (80013f0 <HAL_I2S_MspInit+0x114>)
 8001334:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001338:	4a2d      	ldr	r2, [pc, #180]	@ (80013f0 <HAL_I2S_MspInit+0x114>)
 800133a:	f043 0320 	orr.w	r3, r3, #32
 800133e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001342:	4b2b      	ldr	r3, [pc, #172]	@ (80013f0 <HAL_I2S_MspInit+0x114>)
 8001344:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001348:	f003 0320 	and.w	r3, r3, #32
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001350:	4b27      	ldr	r3, [pc, #156]	@ (80013f0 <HAL_I2S_MspInit+0x114>)
 8001352:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001356:	4a26      	ldr	r2, [pc, #152]	@ (80013f0 <HAL_I2S_MspInit+0x114>)
 8001358:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800135c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001360:	4b23      	ldr	r3, [pc, #140]	@ (80013f0 <HAL_I2S_MspInit+0x114>)
 8001362:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	4b20      	ldr	r3, [pc, #128]	@ (80013f0 <HAL_I2S_MspInit+0x114>)
 8001370:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001374:	4a1e      	ldr	r2, [pc, #120]	@ (80013f0 <HAL_I2S_MspInit+0x114>)
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800137e:	4b1c      	ldr	r3, [pc, #112]	@ (80013f0 <HAL_I2S_MspInit+0x114>)
 8001380:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]
    PG12     ------> I2S6_SDI
    PG13     ------> I2S6_CK
    PA0     ------> I2S6_WS
    PA3     ------> I2S6_MCK
    */
    GPIO_InitStruct.Pin = I2S6_SDO_Pin|I2S6_SDI_Pin|I2S6_CK_Pin;
 800138c:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8001390:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 80013a6:	2305      	movs	r3, #5
 80013a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013ac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013b0:	4619      	mov	r1, r3
 80013b2:	4810      	ldr	r0, [pc, #64]	@ (80013f4 <HAL_I2S_MspInit+0x118>)
 80013b4:	f001 fa12 	bl	80027dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S6_WS_Pin|I2S6_MCK_Pin;
 80013b8:	2309      	movs	r3, #9
 80013ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 80013d0:	2305      	movs	r3, #5
 80013d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013da:	4619      	mov	r1, r3
 80013dc:	4806      	ldr	r0, [pc, #24]	@ (80013f8 <HAL_I2S_MspInit+0x11c>)
 80013de:	f001 f9fd 	bl	80027dc <HAL_GPIO_Init>

  /* USER CODE END SPI6_MspInit 1 */

  }

}
 80013e2:	bf00      	nop
 80013e4:	37f0      	adds	r7, #240	@ 0xf0
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	58001400 	.word	0x58001400
 80013f0:	58024400 	.word	0x58024400
 80013f4:	58021800 	.word	0x58021800
 80013f8:	58020000 	.word	0x58020000

080013fc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b0bc      	sub	sp, #240	@ 0xf0
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001414:	f107 0318 	add.w	r3, r7, #24
 8001418:	22c0      	movs	r2, #192	@ 0xc0
 800141a:	2100      	movs	r1, #0
 800141c:	4618      	mov	r0, r3
 800141e:	f00a fe46 	bl	800c0ae <memset>
  if(hltdc->Instance==LTDC)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a52      	ldr	r2, [pc, #328]	@ (8001570 <HAL_LTDC_MspInit+0x174>)
 8001428:	4293      	cmp	r3, r2
 800142a:	f040 809d 	bne.w	8001568 <HAL_LTDC_MspInit+0x16c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800142e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001432:	f04f 0300 	mov.w	r3, #0
 8001436:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 800143a:	2318      	movs	r3, #24
 800143c:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 800143e:	23c0      	movs	r3, #192	@ 0xc0
 8001440:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 17;
 8001442:	2311      	movs	r3, #17
 8001444:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001446:	2302      	movs	r3, #2
 8001448:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800144a:	2302      	movs	r3, #2
 800144c:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800144e:	2300      	movs	r3, #0
 8001450:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001452:	2300      	movs	r3, #0
 8001454:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800145a:	f107 0318 	add.w	r3, r7, #24
 800145e:	4618      	mov	r0, r3
 8001460:	f003 ff90 	bl	8005384 <HAL_RCCEx_PeriphCLKConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_LTDC_MspInit+0x72>
    {
      Error_Handler();
 800146a:	f7ff fead 	bl	80011c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800146e:	4b41      	ldr	r3, [pc, #260]	@ (8001574 <HAL_LTDC_MspInit+0x178>)
 8001470:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8001474:	4a3f      	ldr	r2, [pc, #252]	@ (8001574 <HAL_LTDC_MspInit+0x178>)
 8001476:	f043 0308 	orr.w	r3, r3, #8
 800147a:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
 800147e:	4b3d      	ldr	r3, [pc, #244]	@ (8001574 <HAL_LTDC_MspInit+0x178>)
 8001480:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8001484:	f003 0308 	and.w	r3, r3, #8
 8001488:	617b      	str	r3, [r7, #20]
 800148a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 800148c:	4b39      	ldr	r3, [pc, #228]	@ (8001574 <HAL_LTDC_MspInit+0x178>)
 800148e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001492:	4a38      	ldr	r2, [pc, #224]	@ (8001574 <HAL_LTDC_MspInit+0x178>)
 8001494:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001498:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800149c:	4b35      	ldr	r3, [pc, #212]	@ (8001574 <HAL_LTDC_MspInit+0x178>)
 800149e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80014a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80014aa:	4b32      	ldr	r3, [pc, #200]	@ (8001574 <HAL_LTDC_MspInit+0x178>)
 80014ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80014b0:	4a30      	ldr	r2, [pc, #192]	@ (8001574 <HAL_LTDC_MspInit+0x178>)
 80014b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014b6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80014ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001574 <HAL_LTDC_MspInit+0x178>)
 80014bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80014c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80014c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001574 <HAL_LTDC_MspInit+0x178>)
 80014ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80014ce:	4a29      	ldr	r2, [pc, #164]	@ (8001574 <HAL_LTDC_MspInit+0x178>)
 80014d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014d4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80014d8:	4b26      	ldr	r3, [pc, #152]	@ (8001574 <HAL_LTDC_MspInit+0x178>)
 80014da:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80014de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_B4_Pin|LCD_B5_Pin
 80014e6:	23ff      	movs	r3, #255	@ 0xff
 80014e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G6_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014fe:	230e      	movs	r3, #14
 8001500:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001504:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001508:	4619      	mov	r1, r3
 800150a:	481b      	ldr	r0, [pc, #108]	@ (8001578 <HAL_LTDC_MspInit+0x17c>)
 800150c:	f001 f966 	bl	80027dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B1_Pin|LCD_B0_Pin
 8001510:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001514:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |LCD_G4_Pin|LCD_G3_Pin|LCD_G2_Pin|LCD_G1_Pin
                          |LCD_R7_Pin|LCD_G0_Pin|LCD_R1_Pin|LCD_R6_Pin
                          |LCD_R2_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001518:	2302      	movs	r3, #2
 800151a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800152a:	230e      	movs	r3, #14
 800152c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001530:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001534:	4619      	mov	r1, r3
 8001536:	4811      	ldr	r0, [pc, #68]	@ (800157c <HAL_LTDC_MspInit+0x180>)
 8001538:	f001 f950 	bl	80027dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_CLK_Pin|LCD_VSYNC_Pin|LCD_R0_Pin;
 800153c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001540:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001556:	230e      	movs	r3, #14
 8001558:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800155c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001560:	4619      	mov	r1, r3
 8001562:	4807      	ldr	r0, [pc, #28]	@ (8001580 <HAL_LTDC_MspInit+0x184>)
 8001564:	f001 f93a 	bl	80027dc <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001568:	bf00      	nop
 800156a:	37f0      	adds	r7, #240	@ 0xf0
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	50001000 	.word	0x50001000
 8001574:	58024400 	.word	0x58024400
 8001578:	58022800 	.word	0x58022800
 800157c:	58022400 	.word	0x58022400
 8001580:	58022000 	.word	0x58022000

08001584 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08e      	sub	sp, #56	@ 0x38
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  if(hospi->Instance==OCTOSPI1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a68      	ldr	r2, [pc, #416]	@ (8001744 <HAL_OSPI_MspInit+0x1c0>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	f040 80ca 	bne.w	800173c <HAL_OSPI_MspInit+0x1b8>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80015a8:	4b67      	ldr	r3, [pc, #412]	@ (8001748 <HAL_OSPI_MspInit+0x1c4>)
 80015aa:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80015ae:	4a66      	ldr	r2, [pc, #408]	@ (8001748 <HAL_OSPI_MspInit+0x1c4>)
 80015b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015b4:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 80015b8:	4b63      	ldr	r3, [pc, #396]	@ (8001748 <HAL_OSPI_MspInit+0x1c4>)
 80015ba:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80015be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015c2:	623b      	str	r3, [r7, #32]
 80015c4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80015c6:	4b60      	ldr	r3, [pc, #384]	@ (8001748 <HAL_OSPI_MspInit+0x1c4>)
 80015c8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80015cc:	4a5e      	ldr	r2, [pc, #376]	@ (8001748 <HAL_OSPI_MspInit+0x1c4>)
 80015ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015d2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 80015d6:	4b5c      	ldr	r3, [pc, #368]	@ (8001748 <HAL_OSPI_MspInit+0x1c4>)
 80015d8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80015dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015e0:	61fb      	str	r3, [r7, #28]
 80015e2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80015e4:	4b58      	ldr	r3, [pc, #352]	@ (8001748 <HAL_OSPI_MspInit+0x1c4>)
 80015e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80015ea:	4a57      	ldr	r2, [pc, #348]	@ (8001748 <HAL_OSPI_MspInit+0x1c4>)
 80015ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015f0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80015f4:	4b54      	ldr	r3, [pc, #336]	@ (8001748 <HAL_OSPI_MspInit+0x1c4>)
 80015f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80015fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015fe:	61bb      	str	r3, [r7, #24]
 8001600:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001602:	4b51      	ldr	r3, [pc, #324]	@ (8001748 <HAL_OSPI_MspInit+0x1c4>)
 8001604:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001608:	4a4f      	ldr	r2, [pc, #316]	@ (8001748 <HAL_OSPI_MspInit+0x1c4>)
 800160a:	f043 0308 	orr.w	r3, r3, #8
 800160e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001612:	4b4d      	ldr	r3, [pc, #308]	@ (8001748 <HAL_OSPI_MspInit+0x1c4>)
 8001614:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001618:	f003 0308 	and.w	r3, r3, #8
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001620:	4b49      	ldr	r3, [pc, #292]	@ (8001748 <HAL_OSPI_MspInit+0x1c4>)
 8001622:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001626:	4a48      	ldr	r2, [pc, #288]	@ (8001748 <HAL_OSPI_MspInit+0x1c4>)
 8001628:	f043 0304 	orr.w	r3, r3, #4
 800162c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001630:	4b45      	ldr	r3, [pc, #276]	@ (8001748 <HAL_OSPI_MspInit+0x1c4>)
 8001632:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800163e:	4b42      	ldr	r3, [pc, #264]	@ (8001748 <HAL_OSPI_MspInit+0x1c4>)
 8001640:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001644:	4a40      	ldr	r2, [pc, #256]	@ (8001748 <HAL_OSPI_MspInit+0x1c4>)
 8001646:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800164a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800164e:	4b3e      	ldr	r3, [pc, #248]	@ (8001748 <HAL_OSPI_MspInit+0x1c4>)
 8001650:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001654:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165c:	4b3a      	ldr	r3, [pc, #232]	@ (8001748 <HAL_OSPI_MspInit+0x1c4>)
 800165e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001662:	4a39      	ldr	r2, [pc, #228]	@ (8001748 <HAL_OSPI_MspInit+0x1c4>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800166c:	4b36      	ldr	r3, [pc, #216]	@ (8001748 <HAL_OSPI_MspInit+0x1c4>)
 800166e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> OCTOSPIM_P1_IO4
    PH3     ------> OCTOSPIM_P1_IO5
    PC5     ------> OCTOSPIM_P1_DQS
    PB2     ------> OCTOSPIM_P1_CLK
    */
    GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 800167a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800167e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001680:	2302      	movs	r3, #2
 8001682:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001688:	2303      	movs	r3, #3
 800168a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800168c:	2309      	movs	r3, #9
 800168e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 8001690:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001694:	4619      	mov	r1, r3
 8001696:	482d      	ldr	r0, [pc, #180]	@ (800174c <HAL_OSPI_MspInit+0x1c8>)
 8001698:	f001 f8a0 	bl	80027dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO7_Pin;
 800169c:	2380      	movs	r3, #128	@ 0x80
 800169e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a8:	2303      	movs	r3, #3
 80016aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80016ac:	230a      	movs	r3, #10
 80016ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(OCSPI1_IO7_GPIO_Port, &GPIO_InitStruct);
 80016b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016b4:	4619      	mov	r1, r3
 80016b6:	4826      	ldr	r0, [pc, #152]	@ (8001750 <HAL_OSPI_MspInit+0x1cc>)
 80016b8:	f001 f890 	bl	80027dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 80016bc:	2340      	movs	r3, #64	@ 0x40
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c8:	2303      	movs	r3, #3
 80016ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80016cc:	230a      	movs	r3, #10
 80016ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 80016d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016d4:	4619      	mov	r1, r3
 80016d6:	481d      	ldr	r0, [pc, #116]	@ (800174c <HAL_OSPI_MspInit+0x1c8>)
 80016d8:	f001 f880 	bl	80027dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO4_Pin|OCSPI1_DQS_Pin;
 80016dc:	2322      	movs	r3, #34	@ 0x22
 80016de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	2302      	movs	r3, #2
 80016e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e8:	2303      	movs	r3, #3
 80016ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80016ec:	230a      	movs	r3, #10
 80016ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016f4:	4619      	mov	r1, r3
 80016f6:	4817      	ldr	r0, [pc, #92]	@ (8001754 <HAL_OSPI_MspInit+0x1d0>)
 80016f8:	f001 f870 	bl	80027dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO5_Pin;
 80016fc:	2308      	movs	r3, #8
 80016fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	2302      	movs	r3, #2
 8001702:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001708:	2303      	movs	r3, #3
 800170a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800170c:	2309      	movs	r3, #9
 800170e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(OCSPI1_IO5_GPIO_Port, &GPIO_InitStruct);
 8001710:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001714:	4619      	mov	r1, r3
 8001716:	4810      	ldr	r0, [pc, #64]	@ (8001758 <HAL_OSPI_MspInit+0x1d4>)
 8001718:	f001 f860 	bl	80027dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 800171c:	2304      	movs	r3, #4
 800171e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800172c:	2309      	movs	r3, #9
 800172e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 8001730:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001734:	4619      	mov	r1, r3
 8001736:	4809      	ldr	r0, [pc, #36]	@ (800175c <HAL_OSPI_MspInit+0x1d8>)
 8001738:	f001 f850 	bl	80027dc <HAL_GPIO_Init>

  /* USER CODE END OCTOSPI1_MspInit 1 */

  }

}
 800173c:	bf00      	nop
 800173e:	3738      	adds	r7, #56	@ 0x38
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	52005000 	.word	0x52005000
 8001748:	58024400 	.word	0x58024400
 800174c:	58021800 	.word	0x58021800
 8001750:	58020c00 	.word	0x58020c00
 8001754:	58020800 	.word	0x58020800
 8001758:	58021c00 	.word	0x58021c00
 800175c:	58020400 	.word	0x58020400

08001760 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b0b2      	sub	sp, #200	@ 0xc8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001768:	f107 0308 	add.w	r3, r7, #8
 800176c:	22c0      	movs	r2, #192	@ 0xc0
 800176e:	2100      	movs	r1, #0
 8001770:	4618      	mov	r0, r3
 8001772:	f00a fc9c 	bl	800c0ae <memset>
  if(hrtc->Instance==RTC)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a10      	ldr	r2, [pc, #64]	@ (80017bc <HAL_RTC_MspInit+0x5c>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d119      	bne.n	80017b4 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001780:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001784:	f04f 0300 	mov.w	r3, #0
 8001788:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800178c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001790:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001794:	f107 0308 	add.w	r3, r7, #8
 8001798:	4618      	mov	r0, r3
 800179a:	f003 fdf3 	bl	8005384 <HAL_RCCEx_PeriphCLKConfig>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80017a4:	f7ff fd10 	bl	80011c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017a8:	4b05      	ldr	r3, [pc, #20]	@ (80017c0 <HAL_RTC_MspInit+0x60>)
 80017aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ac:	4a04      	ldr	r2, [pc, #16]	@ (80017c0 <HAL_RTC_MspInit+0x60>)
 80017ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017b2:	6713      	str	r3, [r2, #112]	@ 0x70

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80017b4:	bf00      	nop
 80017b6:	37c8      	adds	r7, #200	@ 0xc8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	58004000 	.word	0x58004000
 80017c0:	58024400 	.word	0x58024400

080017c4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	@ 0x28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a2a      	ldr	r2, [pc, #168]	@ (800188c <HAL_SD_MspInit+0xc8>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d14d      	bne.n	8001882 <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80017e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001890 <HAL_SD_MspInit+0xcc>)
 80017e8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80017ec:	4a28      	ldr	r2, [pc, #160]	@ (8001890 <HAL_SD_MspInit+0xcc>)
 80017ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017f2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 80017f6:	4b26      	ldr	r3, [pc, #152]	@ (8001890 <HAL_SD_MspInit+0xcc>)
 80017f8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80017fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001804:	4b22      	ldr	r3, [pc, #136]	@ (8001890 <HAL_SD_MspInit+0xcc>)
 8001806:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800180a:	4a21      	ldr	r2, [pc, #132]	@ (8001890 <HAL_SD_MspInit+0xcc>)
 800180c:	f043 0304 	orr.w	r3, r3, #4
 8001810:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001814:	4b1e      	ldr	r3, [pc, #120]	@ (8001890 <HAL_SD_MspInit+0xcc>)
 8001816:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800181a:	f003 0304 	and.w	r3, r3, #4
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001822:	4b1b      	ldr	r3, [pc, #108]	@ (8001890 <HAL_SD_MspInit+0xcc>)
 8001824:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001828:	4a19      	ldr	r2, [pc, #100]	@ (8001890 <HAL_SD_MspInit+0xcc>)
 800182a:	f043 0308 	orr.w	r3, r3, #8
 800182e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001832:	4b17      	ldr	r3, [pc, #92]	@ (8001890 <HAL_SD_MspInit+0xcc>)
 8001834:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001838:	f003 0308 	and.w	r3, r3, #8
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	68bb      	ldr	r3, [r7, #8]
    PC12     ------> SDMMC1_CK
    PC11     ------> SDMMC1_D3
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D3_Pin|SDIO1_D1_Pin
 8001840:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001844:	617b      	str	r3, [r7, #20]
                          |SDIO1_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184e:	2303      	movs	r3, #3
 8001850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001852:	230c      	movs	r3, #12
 8001854:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	4619      	mov	r1, r3
 800185c:	480d      	ldr	r0, [pc, #52]	@ (8001894 <HAL_SD_MspInit+0xd0>)
 800185e:	f000 ffbd 	bl	80027dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8001862:	2304      	movs	r3, #4
 8001864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	2302      	movs	r3, #2
 8001868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186e:	2303      	movs	r3, #3
 8001870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001872:	230c      	movs	r3, #12
 8001874:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	4619      	mov	r1, r3
 800187c:	4806      	ldr	r0, [pc, #24]	@ (8001898 <HAL_SD_MspInit+0xd4>)
 800187e:	f000 ffad 	bl	80027dc <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8001882:	bf00      	nop
 8001884:	3728      	adds	r7, #40	@ 0x28
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	52007000 	.word	0x52007000
 8001890:	58024400 	.word	0x58024400
 8001894:	58020800 	.word	0x58020800
 8001898:	58020c00 	.word	0x58020c00

0800189c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b0bc      	sub	sp, #240	@ 0xf0
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018b4:	f107 0318 	add.w	r3, r7, #24
 80018b8:	22c0      	movs	r2, #192	@ 0xc0
 80018ba:	2100      	movs	r1, #0
 80018bc:	4618      	mov	r0, r3
 80018be:	f00a fbf6 	bl	800c0ae <memset>
  if(hspi->Instance==SPI2)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a39      	ldr	r2, [pc, #228]	@ (80019ac <HAL_SPI_MspInit+0x110>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d16a      	bne.n	80019a2 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80018cc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 80018d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80018dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018de:	f107 0318 	add.w	r3, r7, #24
 80018e2:	4618      	mov	r0, r3
 80018e4:	f003 fd4e 	bl	8005384 <HAL_RCCEx_PeriphCLKConfig>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80018ee:	f7ff fc6b 	bl	80011c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018f2:	4b2f      	ldr	r3, [pc, #188]	@ (80019b0 <HAL_SPI_MspInit+0x114>)
 80018f4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80018f8:	4a2d      	ldr	r2, [pc, #180]	@ (80019b0 <HAL_SPI_MspInit+0x114>)
 80018fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018fe:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001902:	4b2b      	ldr	r3, [pc, #172]	@ (80019b0 <HAL_SPI_MspInit+0x114>)
 8001904:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001908:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001910:	4b27      	ldr	r3, [pc, #156]	@ (80019b0 <HAL_SPI_MspInit+0x114>)
 8001912:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001916:	4a26      	ldr	r2, [pc, #152]	@ (80019b0 <HAL_SPI_MspInit+0x114>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001920:	4b23      	ldr	r3, [pc, #140]	@ (80019b0 <HAL_SPI_MspInit+0x114>)
 8001922:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800192e:	4b20      	ldr	r3, [pc, #128]	@ (80019b0 <HAL_SPI_MspInit+0x114>)
 8001930:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001934:	4a1e      	ldr	r2, [pc, #120]	@ (80019b0 <HAL_SPI_MspInit+0x114>)
 8001936:	f043 0304 	orr.w	r3, r3, #4
 800193a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800193e:	4b1c      	ldr	r3, [pc, #112]	@ (80019b0 <HAL_SPI_MspInit+0x114>)
 8001940:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA12     ------> SPI2_SCK
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 800194c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001950:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001954:	2302      	movs	r3, #2
 8001956:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001960:	2300      	movs	r3, #0
 8001962:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001966:	2305      	movs	r3, #5
 8001968:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800196c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001970:	4619      	mov	r1, r3
 8001972:	4810      	ldr	r0, [pc, #64]	@ (80019b4 <HAL_SPI_MspInit+0x118>)
 8001974:	f000 ff32 	bl	80027dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8001978:	230c      	movs	r3, #12
 800197a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198a:	2300      	movs	r3, #0
 800198c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001990:	2305      	movs	r3, #5
 8001992:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001996:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800199a:	4619      	mov	r1, r3
 800199c:	4806      	ldr	r0, [pc, #24]	@ (80019b8 <HAL_SPI_MspInit+0x11c>)
 800199e:	f000 ff1d 	bl	80027dc <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80019a2:	bf00      	nop
 80019a4:	37f0      	adds	r7, #240	@ 0xf0
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40003800 	.word	0x40003800
 80019b0:	58024400 	.word	0x58024400
 80019b4:	58020000 	.word	0x58020000
 80019b8:	58020800 	.word	0x58020800

080019bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b0ba      	sub	sp, #232	@ 0xe8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019d4:	f107 0310 	add.w	r3, r7, #16
 80019d8:	22c0      	movs	r2, #192	@ 0xc0
 80019da:	2100      	movs	r1, #0
 80019dc:	4618      	mov	r0, r3
 80019de:	f00a fb66 	bl	800c0ae <memset>
  if(huart->Instance==USART1)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a27      	ldr	r2, [pc, #156]	@ (8001a84 <HAL_UART_MspInit+0xc8>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d146      	bne.n	8001a7a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019ec:	f04f 0201 	mov.w	r2, #1
 80019f0:	f04f 0300 	mov.w	r3, #0
 80019f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80019f8:	2300      	movs	r3, #0
 80019fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019fe:	f107 0310 	add.w	r3, r7, #16
 8001a02:	4618      	mov	r0, r3
 8001a04:	f003 fcbe 	bl	8005384 <HAL_RCCEx_PeriphCLKConfig>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001a0e:	f7ff fbdb 	bl	80011c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a12:	4b1d      	ldr	r3, [pc, #116]	@ (8001a88 <HAL_UART_MspInit+0xcc>)
 8001a14:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001a18:	4a1b      	ldr	r2, [pc, #108]	@ (8001a88 <HAL_UART_MspInit+0xcc>)
 8001a1a:	f043 0310 	orr.w	r3, r3, #16
 8001a1e:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8001a22:	4b19      	ldr	r3, [pc, #100]	@ (8001a88 <HAL_UART_MspInit+0xcc>)
 8001a24:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001a28:	f003 0310 	and.w	r3, r3, #16
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a30:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <HAL_UART_MspInit+0xcc>)
 8001a32:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a36:	4a14      	ldr	r2, [pc, #80]	@ (8001a88 <HAL_UART_MspInit+0xcc>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001a40:	4b11      	ldr	r3, [pc, #68]	@ (8001a88 <HAL_UART_MspInit+0xcc>)
 8001a42:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	60bb      	str	r3, [r7, #8]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8001a4e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	2300      	movs	r3, #0
 8001a64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a68:	2307      	movs	r3, #7
 8001a6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a72:	4619      	mov	r1, r3
 8001a74:	4805      	ldr	r0, [pc, #20]	@ (8001a8c <HAL_UART_MspInit+0xd0>)
 8001a76:	f000 feb1 	bl	80027dc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001a7a:	bf00      	nop
 8001a7c:	37e8      	adds	r7, #232	@ 0xe8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40011000 	.word	0x40011000
 8001a88:	58024400 	.word	0x58024400
 8001a8c:	58020000 	.word	0x58020000

08001a90 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001aa4:	4b34      	ldr	r3, [pc, #208]	@ (8001b78 <HAL_FMC_MspInit+0xe8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d161      	bne.n	8001b70 <HAL_FMC_MspInit+0xe0>
    return;
  }
  FMC_Initialized = 1;
 8001aac:	4b32      	ldr	r3, [pc, #200]	@ (8001b78 <HAL_FMC_MspInit+0xe8>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001ab2:	4b32      	ldr	r3, [pc, #200]	@ (8001b7c <HAL_FMC_MspInit+0xec>)
 8001ab4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001ab8:	4a30      	ldr	r2, [pc, #192]	@ (8001b7c <HAL_FMC_MspInit+0xec>)
 8001aba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001abe:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8001ac2:	4b2e      	ldr	r3, [pc, #184]	@ (8001b7c <HAL_FMC_MspInit+0xec>)
 8001ac4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001ac8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001acc:	603b      	str	r3, [r7, #0]
 8001ace:	683b      	ldr	r3, [r7, #0]
  PG0   ------> FMC_A10
  PE8   ------> FMC_D5
  PE11   ------> FMC_D8
  PH7   ------> FMC_SDCKE1
  */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A15_Pin|A14_Pin
 8001ad0:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001ad4:	607b      	str	r3, [r7, #4]
                          |A11_Pin|A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ae2:	230c      	movs	r3, #12
 8001ae4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ae6:	1d3b      	adds	r3, r7, #4
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4825      	ldr	r0, [pc, #148]	@ (8001b80 <HAL_FMC_MspInit+0xf0>)
 8001aec:	f000 fe76 	bl	80027dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D3_Pin|D2_Pin|D0_Pin|D1_Pin
 8001af0:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001af4:	607b      	str	r3, [r7, #4]
                          |D13_Pin|D15_Pin|D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b02:	230c      	movs	r3, #12
 8001b04:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b06:	1d3b      	adds	r3, r7, #4
 8001b08:	4619      	mov	r1, r3
 8001b0a:	481e      	ldr	r0, [pc, #120]	@ (8001b84 <HAL_FMC_MspInit+0xf4>)
 8001b0c:	f000 fe66 	bl	80027dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL0_Pin|FMC_NBL1_Pin|D9_Pin|D4_Pin
 8001b10:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001b14:	607b      	str	r3, [r7, #4]
                          |D10_Pin|D11_Pin|D7_Pin|D6_Pin
                          |D12_Pin|D5_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b22:	230c      	movs	r3, #12
 8001b24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4817      	ldr	r0, [pc, #92]	@ (8001b88 <HAL_FMC_MspInit+0xf8>)
 8001b2c:	f000 fe56 	bl	80027dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin|A4_Pin
 8001b30:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001b34:	607b      	str	r3, [r7, #4]
                          |A3_Pin|A5_Pin|A7_Pin|SDNRAS_Pin
                          |A9_Pin|A8_Pin|A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b36:	2302      	movs	r3, #2
 8001b38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b42:	230c      	movs	r3, #12
 8001b44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4810      	ldr	r0, [pc, #64]	@ (8001b8c <HAL_FMC_MspInit+0xfc>)
 8001b4c:	f000 fe46 	bl	80027dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNE1_Pin|SDNWE_Pin|SDCKE1_Pin;
 8001b50:	23e0      	movs	r3, #224	@ 0xe0
 8001b52:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b60:	230c      	movs	r3, #12
 8001b62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	4619      	mov	r1, r3
 8001b68:	4809      	ldr	r0, [pc, #36]	@ (8001b90 <HAL_FMC_MspInit+0x100>)
 8001b6a:	f000 fe37 	bl	80027dc <HAL_GPIO_Init>
 8001b6e:	e000      	b.n	8001b72 <HAL_FMC_MspInit+0xe2>
    return;
 8001b70:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	24000590 	.word	0x24000590
 8001b7c:	58024400 	.word	0x58024400
 8001b80:	58021800 	.word	0x58021800
 8001b84:	58020c00 	.word	0x58020c00
 8001b88:	58021000 	.word	0x58021000
 8001b8c:	58021400 	.word	0x58021400
 8001b90:	58021c00 	.word	0x58021c00

08001b94 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001b9c:	f7ff ff78 	bl	8001a90 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bac:	bf00      	nop
 8001bae:	e7fd      	b.n	8001bac <NMI_Handler+0x4>

08001bb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bb4:	bf00      	nop
 8001bb6:	e7fd      	b.n	8001bb4 <HardFault_Handler+0x4>

08001bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bbc:	bf00      	nop
 8001bbe:	e7fd      	b.n	8001bbc <MemManage_Handler+0x4>

08001bc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc4:	bf00      	nop
 8001bc6:	e7fd      	b.n	8001bc4 <BusFault_Handler+0x4>

08001bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <UsageFault_Handler+0x4>

08001bd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bfe:	f000 fcc5 	bl	800258c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	e00a      	b.n	8001c2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c18:	f7fe fd7c 	bl	8000714 <__io_getchar>
 8001c1c:	4601      	mov	r1, r0
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	1c5a      	adds	r2, r3, #1
 8001c22:	60ba      	str	r2, [r7, #8]
 8001c24:	b2ca      	uxtb	r2, r1
 8001c26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	dbf0      	blt.n	8001c18 <_read+0x12>
  }

  return len;
 8001c36:	687b      	ldr	r3, [r7, #4]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	e009      	b.n	8001c66 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	1c5a      	adds	r2, r3, #1
 8001c56:	60ba      	str	r2, [r7, #8]
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7fe fd4c 	bl	80006f8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	3301      	adds	r3, #1
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	dbf1      	blt.n	8001c52 <_write+0x12>
  }
  return len;
 8001c6e:	687b      	ldr	r3, [r7, #4]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <_close>:

int _close(int file)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ca0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <_isatty>:

int _isatty(int file)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cb8:	2301      	movs	r3, #1
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b085      	sub	sp, #20
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	60f8      	str	r0, [r7, #12]
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ce8:	4a14      	ldr	r2, [pc, #80]	@ (8001d3c <_sbrk+0x5c>)
 8001cea:	4b15      	ldr	r3, [pc, #84]	@ (8001d40 <_sbrk+0x60>)
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf4:	4b13      	ldr	r3, [pc, #76]	@ (8001d44 <_sbrk+0x64>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d102      	bne.n	8001d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	@ (8001d44 <_sbrk+0x64>)
 8001cfe:	4a12      	ldr	r2, [pc, #72]	@ (8001d48 <_sbrk+0x68>)
 8001d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d02:	4b10      	ldr	r3, [pc, #64]	@ (8001d44 <_sbrk+0x64>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d207      	bcs.n	8001d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d10:	f00a fa4e 	bl	800c1b0 <__errno>
 8001d14:	4603      	mov	r3, r0
 8001d16:	220c      	movs	r2, #12
 8001d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1e:	e009      	b.n	8001d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d20:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <_sbrk+0x64>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d26:	4b07      	ldr	r3, [pc, #28]	@ (8001d44 <_sbrk+0x64>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	4a05      	ldr	r2, [pc, #20]	@ (8001d44 <_sbrk+0x64>)
 8001d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d32:	68fb      	ldr	r3, [r7, #12]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	24100000 	.word	0x24100000
 8001d40:	00000400 	.word	0x00000400
 8001d44:	24000594 	.word	0x24000594
 8001d48:	24000ee8 	.word	0x24000ee8

08001d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d50:	4b3e      	ldr	r3, [pc, #248]	@ (8001e4c <SystemInit+0x100>)
 8001d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d56:	4a3d      	ldr	r2, [pc, #244]	@ (8001e4c <SystemInit+0x100>)
 8001d58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d60:	4b3b      	ldr	r3, [pc, #236]	@ (8001e50 <SystemInit+0x104>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 030f 	and.w	r3, r3, #15
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d807      	bhi.n	8001d7c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d6c:	4b38      	ldr	r3, [pc, #224]	@ (8001e50 <SystemInit+0x104>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f023 030f 	bic.w	r3, r3, #15
 8001d74:	4a36      	ldr	r2, [pc, #216]	@ (8001e50 <SystemInit+0x104>)
 8001d76:	f043 0303 	orr.w	r3, r3, #3
 8001d7a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d7c:	4b35      	ldr	r3, [pc, #212]	@ (8001e54 <SystemInit+0x108>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a34      	ldr	r2, [pc, #208]	@ (8001e54 <SystemInit+0x108>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d88:	4b32      	ldr	r3, [pc, #200]	@ (8001e54 <SystemInit+0x108>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d8e:	4b31      	ldr	r3, [pc, #196]	@ (8001e54 <SystemInit+0x108>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	4930      	ldr	r1, [pc, #192]	@ (8001e54 <SystemInit+0x108>)
 8001d94:	4b30      	ldr	r3, [pc, #192]	@ (8001e58 <SystemInit+0x10c>)
 8001d96:	4013      	ands	r3, r2
 8001d98:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d9a:	4b2d      	ldr	r3, [pc, #180]	@ (8001e50 <SystemInit+0x104>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d007      	beq.n	8001db6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001da6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e50 <SystemInit+0x104>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f023 030f 	bic.w	r3, r3, #15
 8001dae:	4a28      	ldr	r2, [pc, #160]	@ (8001e50 <SystemInit+0x104>)
 8001db0:	f043 0303 	orr.w	r3, r3, #3
 8001db4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001db6:	4b27      	ldr	r3, [pc, #156]	@ (8001e54 <SystemInit+0x108>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001dbc:	4b25      	ldr	r3, [pc, #148]	@ (8001e54 <SystemInit+0x108>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001dc2:	4b24      	ldr	r3, [pc, #144]	@ (8001e54 <SystemInit+0x108>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001dc8:	4b22      	ldr	r3, [pc, #136]	@ (8001e54 <SystemInit+0x108>)
 8001dca:	4a24      	ldr	r2, [pc, #144]	@ (8001e5c <SystemInit+0x110>)
 8001dcc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001dce:	4b21      	ldr	r3, [pc, #132]	@ (8001e54 <SystemInit+0x108>)
 8001dd0:	4a23      	ldr	r2, [pc, #140]	@ (8001e60 <SystemInit+0x114>)
 8001dd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001dd4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e54 <SystemInit+0x108>)
 8001dd6:	4a23      	ldr	r2, [pc, #140]	@ (8001e64 <SystemInit+0x118>)
 8001dd8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001dda:	4b1e      	ldr	r3, [pc, #120]	@ (8001e54 <SystemInit+0x108>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001de0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e54 <SystemInit+0x108>)
 8001de2:	4a20      	ldr	r2, [pc, #128]	@ (8001e64 <SystemInit+0x118>)
 8001de4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001de6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e54 <SystemInit+0x108>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001dec:	4b19      	ldr	r3, [pc, #100]	@ (8001e54 <SystemInit+0x108>)
 8001dee:	4a1d      	ldr	r2, [pc, #116]	@ (8001e64 <SystemInit+0x118>)
 8001df0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001df2:	4b18      	ldr	r3, [pc, #96]	@ (8001e54 <SystemInit+0x108>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001df8:	4b16      	ldr	r3, [pc, #88]	@ (8001e54 <SystemInit+0x108>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a15      	ldr	r2, [pc, #84]	@ (8001e54 <SystemInit+0x108>)
 8001dfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e02:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e04:	4b13      	ldr	r3, [pc, #76]	@ (8001e54 <SystemInit+0x108>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001e0a:	4b12      	ldr	r3, [pc, #72]	@ (8001e54 <SystemInit+0x108>)
 8001e0c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001e10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d113      	bne.n	8001e40 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001e18:	4b0e      	ldr	r3, [pc, #56]	@ (8001e54 <SystemInit+0x108>)
 8001e1a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001e1e:	4a0d      	ldr	r2, [pc, #52]	@ (8001e54 <SystemInit+0x108>)
 8001e20:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e24:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e28:	4b0f      	ldr	r3, [pc, #60]	@ (8001e68 <SystemInit+0x11c>)
 8001e2a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001e2e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001e30:	4b08      	ldr	r3, [pc, #32]	@ (8001e54 <SystemInit+0x108>)
 8001e32:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001e36:	4a07      	ldr	r2, [pc, #28]	@ (8001e54 <SystemInit+0x108>)
 8001e38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001e3c:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000ed00 	.word	0xe000ed00
 8001e50:	52002000 	.word	0x52002000
 8001e54:	58024400 	.word	0x58024400
 8001e58:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e5c:	02020200 	.word	0x02020200
 8001e60:	01ff0000 	.word	0x01ff0000
 8001e64:	01010280 	.word	0x01010280
 8001e68:	52004000 	.word	0x52004000

08001e6c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8001e70:	4b09      	ldr	r3, [pc, #36]	@ (8001e98 <ExitRun0Mode+0x2c>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	4a08      	ldr	r2, [pc, #32]	@ (8001e98 <ExitRun0Mode+0x2c>)
 8001e76:	f023 0302 	bic.w	r3, r3, #2
 8001e7a:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001e7c:	bf00      	nop
 8001e7e:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <ExitRun0Mode+0x2c>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f9      	beq.n	8001e7e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001e8a:	bf00      	nop
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	58024800 	.word	0x58024800

08001e9c <WIFI_SPI_Receive>:
  * @param  buffer: A char buffer, where the received data will be saved in.
  * @param  size: Buffer size
  * @retval WIFI_StatusTypeDef
  */

WIFI_StatusTypeDef WIFI_SPI_Receive(WIFI_HandleTypeDef* hwifi, char* buffer, uint16_t size){
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	80fb      	strh	r3, [r7, #6]

	uint16_t cnt = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	82fb      	strh	r3, [r7, #22]
	memset(buffer, '\0', size); // Erase buffer
 8001eae:	88fb      	ldrh	r3, [r7, #6]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	68b8      	ldr	r0, [r7, #8]
 8001eb6:	f00a f8fa 	bl	800c0ae <memset>

	while (WIFI_IS_CMDDATA_READY())
 8001eba:	e015      	b.n	8001ee8 <WIFI_SPI_Receive+0x4c>
	{
		// Fill buffer as long there is still space
		if ( (cnt > (size - 2)) || (HAL_SPI_Receive(hwifi->handle , (uint8_t*) buffer + cnt, 1, WIFI_TIMEOUT) != HAL_OK) )
 8001ebc:	88fb      	ldrh	r3, [r7, #6]
 8001ebe:	1e5a      	subs	r2, r3, #1
 8001ec0:	8afb      	ldrh	r3, [r7, #22]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	dd0b      	ble.n	8001ede <WIFI_SPI_Receive+0x42>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6818      	ldr	r0, [r3, #0]
 8001eca:	8afb      	ldrh	r3, [r7, #22]
 8001ecc:	68ba      	ldr	r2, [r7, #8]
 8001ece:	18d1      	adds	r1, r2, r3
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f007 fb3a 	bl	800954c <HAL_SPI_Receive>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <WIFI_SPI_Receive+0x46>
		  {
			Error_Handler();
 8001ede:	f7ff f973 	bl	80011c8 <Error_Handler>
		  }
		cnt+=2;
 8001ee2:	8afb      	ldrh	r3, [r7, #22]
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	82fb      	strh	r3, [r7, #22]
	while (WIFI_IS_CMDDATA_READY())
 8001ee8:	2120      	movs	r1, #32
 8001eea:	4808      	ldr	r0, [pc, #32]	@ (8001f0c <WIFI_SPI_Receive+0x70>)
 8001eec:	f000 fe26 	bl	8002b3c <HAL_GPIO_ReadPin>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d0e2      	beq.n	8001ebc <WIFI_SPI_Receive+0x20>
	}

	// Trim padding chars from data
	trimstr(buffer, size, (char) WIFI_RX_PADDING);
 8001ef6:	88fb      	ldrh	r3, [r7, #6]
 8001ef8:	2215      	movs	r2, #21
 8001efa:	4619      	mov	r1, r3
 8001efc:	68b8      	ldr	r0, [r7, #8]
 8001efe:	f000 fa49 	bl	8002394 <trimstr>

	return WIFI_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	58022000 	.word	0x58022000

08001f10 <WIFI_SPI_Transmit>:
  * @param  buffer: A char buffer, where the data to be sent is saved in.
  * @param  size: Buffer size (including \0, so it is compatible with sizeof())
  * @retval WIFI_StatusTypeDef
  */

WIFI_StatusTypeDef WIFI_SPI_Transmit(WIFI_HandleTypeDef* hwifi, char* buffer, uint16_t size){
 8001f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f14:	b087      	sub	sp, #28
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	60f8      	str	r0, [r7, #12]
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	80fb      	strh	r3, [r7, #6]
 8001f20:	466b      	mov	r3, sp
 8001f22:	461e      	mov	r6, r3

	char bTx[(size/2)*2 + 1]; // Make a buffer that has an even amount of bytes (even is meant for the chars excluding \0)
 8001f24:	88fb      	ldrh	r3, [r7, #6]
 8001f26:	085b      	lsrs	r3, r3, #1
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	1c59      	adds	r1, r3, #1
 8001f2e:	1e4b      	subs	r3, r1, #1
 8001f30:	617b      	str	r3, [r7, #20]
 8001f32:	460a      	mov	r2, r1
 8001f34:	2300      	movs	r3, #0
 8001f36:	4690      	mov	r8, r2
 8001f38:	4699      	mov	r9, r3
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	f04f 0300 	mov.w	r3, #0
 8001f42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f4e:	460a      	mov	r2, r1
 8001f50:	2300      	movs	r3, #0
 8001f52:	4614      	mov	r4, r2
 8001f54:	461d      	mov	r5, r3
 8001f56:	f04f 0200 	mov.w	r2, #0
 8001f5a:	f04f 0300 	mov.w	r3, #0
 8001f5e:	00eb      	lsls	r3, r5, #3
 8001f60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f64:	00e2      	lsls	r2, r4, #3
 8001f66:	460b      	mov	r3, r1
 8001f68:	3307      	adds	r3, #7
 8001f6a:	08db      	lsrs	r3, r3, #3
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	ebad 0d03 	sub.w	sp, sp, r3
 8001f72:	466b      	mov	r3, sp
 8001f74:	3300      	adds	r3, #0
 8001f76:	613b      	str	r3, [r7, #16]
	snprintf( bTx, size, buffer ); // Copy buffer in bTx
 8001f78:	88fb      	ldrh	r3, [r7, #6]
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	6938      	ldr	r0, [r7, #16]
 8001f80:	f009 fffe 	bl	800bf80 <sniprintf>

	if ( !(size % 2) ) strcat(bTx, (char) WIFI_TX_PADDING); // If buffer had an odd amount of bytes, append a filler char to bTx
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d103      	bne.n	8001f98 <WIFI_SPI_Transmit+0x88>
 8001f90:	210a      	movs	r1, #10
 8001f92:	6938      	ldr	r0, [r7, #16]
 8001f94:	f00a f893 	bl	800c0be <strcat>

	if (HAL_SPI_Transmit(hwifi->handle, (uint8_t*)bTx, size/2, WIFI_TIMEOUT) != HAL_OK) // size must be halved since 16bits are sent via SPI
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	88fb      	ldrh	r3, [r7, #6]
 8001f9e:	085b      	lsrs	r3, r3, #1
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	6939      	ldr	r1, [r7, #16]
 8001fa6:	f007 f8e3 	bl	8009170 <HAL_SPI_Transmit>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <WIFI_SPI_Transmit+0xa4>
	  {
		Error_Handler();
 8001fb0:	f7ff f90a 	bl	80011c8 <Error_Handler>
	  }

	return WIFI_OK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	46b5      	mov	sp, r6
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	371c      	adds	r7, #28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08001fc4 <WIFI_Init>:
  * @brief  Resets and initialises the Wifi module.
  * @param  hwifi: Wifi handle, which decides which Wifi instance is used.
  * @retval WIFI_StatusTypeDef
  */

WIFI_StatusTypeDef WIFI_Init(WIFI_HandleTypeDef* hwifi){
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af02      	add	r7, sp, #8
 8001fca:	6078      	str	r0, [r7, #4]

	int msgLength = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60fb      	str	r3, [r7, #12]

	WIFI_RESET_MODULE();
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	2102      	movs	r1, #2
 8001fd4:	4831      	ldr	r0, [pc, #196]	@ (800209c <WIFI_Init+0xd8>)
 8001fd6:	f000 fdc9 	bl	8002b6c <HAL_GPIO_WritePin>
 8001fda:	200a      	movs	r0, #10
 8001fdc:	f000 faf6 	bl	80025cc <HAL_Delay>
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	2102      	movs	r1, #2
 8001fe4:	482d      	ldr	r0, [pc, #180]	@ (800209c <WIFI_Init+0xd8>)
 8001fe6:	f000 fdc1 	bl	8002b6c <HAL_GPIO_WritePin>
 8001fea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001fee:	f000 faed 	bl	80025cc <HAL_Delay>
	WIFI_ENABLE_NSS();
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ff8:	4829      	ldr	r0, [pc, #164]	@ (80020a0 <WIFI_Init+0xdc>)
 8001ffa:	f000 fdb7 	bl	8002b6c <HAL_GPIO_WritePin>
 8001ffe:	200a      	movs	r0, #10
 8002000:	f000 fae4 	bl	80025cc <HAL_Delay>

	while(!WIFI_IS_CMDDATA_READY());
 8002004:	bf00      	nop
 8002006:	2120      	movs	r1, #32
 8002008:	4824      	ldr	r0, [pc, #144]	@ (800209c <WIFI_Init+0xd8>)
 800200a:	f000 fd97 	bl	8002b3c <HAL_GPIO_ReadPin>
 800200e:	4603      	mov	r3, r0
 8002010:	2b01      	cmp	r3, #1
 8002012:	d1f8      	bne.n	8002006 <WIFI_Init+0x42>

	if(WIFI_SPI_Receive(hwifi, wifiRxBuffer, WIFI_RX_BUFFER_SIZE) != WIFI_OK) Error_Handler();
 8002014:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002018:	4922      	ldr	r1, [pc, #136]	@ (80020a4 <WIFI_Init+0xe0>)
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff ff3e 	bl	8001e9c <WIFI_SPI_Receive>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <WIFI_Init+0x66>
 8002026:	f7ff f8cf 	bl	80011c8 <Error_Handler>

	if( strcmp(wifiRxBuffer, WIFI_MSG_POWERUP) ) Error_Handler();
 800202a:	491f      	ldr	r1, [pc, #124]	@ (80020a8 <WIFI_Init+0xe4>)
 800202c:	481d      	ldr	r0, [pc, #116]	@ (80020a4 <WIFI_Init+0xe0>)
 800202e:	f7fe f95f 	bl	80002f0 <strcmp>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <WIFI_Init+0x78>
 8002038:	f7ff f8c6 	bl	80011c8 <Error_Handler>

	WIFI_DISABLE_NSS();
 800203c:	2201      	movs	r2, #1
 800203e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002042:	4817      	ldr	r0, [pc, #92]	@ (80020a0 <WIFI_Init+0xdc>)
 8002044:	f000 fd92 	bl	8002b6c <HAL_GPIO_WritePin>
 8002048:	200a      	movs	r0, #10
 800204a:	f000 fabf 	bl	80025cc <HAL_Delay>


	msgLength = sprintf(wifiTxBuffer, "Z3=0\r");
 800204e:	4917      	ldr	r1, [pc, #92]	@ (80020ac <WIFI_Init+0xe8>)
 8002050:	4817      	ldr	r0, [pc, #92]	@ (80020b0 <WIFI_Init+0xec>)
 8002052:	f009 ffc9 	bl	800bfe8 <siprintf>
 8002056:	60f8      	str	r0, [r7, #12]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, WIFI_TX_BUFFER_SIZE, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 8002058:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	4b11      	ldr	r3, [pc, #68]	@ (80020a4 <WIFI_Init+0xe0>)
 8002060:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002064:	4912      	ldr	r1, [pc, #72]	@ (80020b0 <WIFI_Init+0xec>)
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f828 	bl	80020bc <WIFI_SendATCommand>

	msgLength = sprintf(wifiTxBuffer, "Z0\r");
 800206c:	4911      	ldr	r1, [pc, #68]	@ (80020b4 <WIFI_Init+0xf0>)
 800206e:	4810      	ldr	r0, [pc, #64]	@ (80020b0 <WIFI_Init+0xec>)
 8002070:	f009 ffba 	bl	800bfe8 <siprintf>
 8002074:	60f8      	str	r0, [r7, #12]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, WIFI_TX_BUFFER_SIZE, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 8002076:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	4b09      	ldr	r3, [pc, #36]	@ (80020a4 <WIFI_Init+0xe0>)
 800207e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002082:	490b      	ldr	r1, [pc, #44]	@ (80020b0 <WIFI_Init+0xec>)
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f819 	bl	80020bc <WIFI_SendATCommand>
	printf("Answer reset:\n %s", wifiRxBuffer);
 800208a:	4906      	ldr	r1, [pc, #24]	@ (80020a4 <WIFI_Init+0xe0>)
 800208c:	480a      	ldr	r0, [pc, #40]	@ (80020b8 <WIFI_Init+0xf4>)
 800208e:	f009 ff65 	bl	800bf5c <iprintf>


	return WIFI_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	58022000 	.word	0x58022000
 80020a0:	58020000 	.word	0x58020000
 80020a4:	24000998 	.word	0x24000998
 80020a8:	0800d0d0 	.word	0x0800d0d0
 80020ac:	0800d0d8 	.word	0x0800d0d8
 80020b0:	24000598 	.word	0x24000598
 80020b4:	0800d0e0 	.word	0x0800d0e0
 80020b8:	0800d0e4 	.word	0x0800d0e4

080020bc <WIFI_SendATCommand>:
  * @param  bRx: Response buffer
  * @param  sizeCmd: Response buffer size
  * @retval WIFI_StatusTypeDef
  */

WIFI_StatusTypeDef WIFI_SendATCommand(WIFI_HandleTypeDef* hwifi, char* bCmd, uint16_t sizeCmd, char* bRx, uint16_t sizeRx){
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	4613      	mov	r3, r2
 80020ca:	80fb      	strh	r3, [r7, #6]

	while(!WIFI_IS_CMDDATA_READY());
 80020cc:	bf00      	nop
 80020ce:	2120      	movs	r1, #32
 80020d0:	482d      	ldr	r0, [pc, #180]	@ (8002188 <WIFI_SendATCommand+0xcc>)
 80020d2:	f000 fd33 	bl	8002b3c <HAL_GPIO_ReadPin>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d1f8      	bne.n	80020ce <WIFI_SendATCommand+0x12>

	WIFI_ENABLE_NSS();
 80020dc:	2200      	movs	r2, #0
 80020de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80020e2:	482a      	ldr	r0, [pc, #168]	@ (800218c <WIFI_SendATCommand+0xd0>)
 80020e4:	f000 fd42 	bl	8002b6c <HAL_GPIO_WritePin>
 80020e8:	200a      	movs	r0, #10
 80020ea:	f000 fa6f 	bl	80025cc <HAL_Delay>

	UART_DebugPrint(bCmd);
 80020ee:	68b8      	ldr	r0, [r7, #8]
 80020f0:	f7fe fb54 	bl	800079c <UART_DebugPrint>
	if(WIFI_SPI_Transmit(hwifi, bCmd, sizeCmd) != WIFI_OK) Error_Handler();
 80020f4:	88fb      	ldrh	r3, [r7, #6]
 80020f6:	461a      	mov	r2, r3
 80020f8:	68b9      	ldr	r1, [r7, #8]
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f7ff ff08 	bl	8001f10 <WIFI_SPI_Transmit>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <WIFI_SendATCommand+0x4e>
 8002106:	f7ff f85f 	bl	80011c8 <Error_Handler>

	WIFI_DISABLE_NSS();
 800210a:	2201      	movs	r2, #1
 800210c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002110:	481e      	ldr	r0, [pc, #120]	@ (800218c <WIFI_SendATCommand+0xd0>)
 8002112:	f000 fd2b 	bl	8002b6c <HAL_GPIO_WritePin>
 8002116:	200a      	movs	r0, #10
 8002118:	f000 fa58 	bl	80025cc <HAL_Delay>

	while(!WIFI_IS_CMDDATA_READY());
 800211c:	bf00      	nop
 800211e:	2120      	movs	r1, #32
 8002120:	4819      	ldr	r0, [pc, #100]	@ (8002188 <WIFI_SendATCommand+0xcc>)
 8002122:	f000 fd0b 	bl	8002b3c <HAL_GPIO_ReadPin>
 8002126:	4603      	mov	r3, r0
 8002128:	2b01      	cmp	r3, #1
 800212a:	d1f8      	bne.n	800211e <WIFI_SendATCommand+0x62>

	WIFI_ENABLE_NSS();
 800212c:	2200      	movs	r2, #0
 800212e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002132:	4816      	ldr	r0, [pc, #88]	@ (800218c <WIFI_SendATCommand+0xd0>)
 8002134:	f000 fd1a 	bl	8002b6c <HAL_GPIO_WritePin>
 8002138:	200a      	movs	r0, #10
 800213a:	f000 fa47 	bl	80025cc <HAL_Delay>

	if(WIFI_SPI_Receive(hwifi, bRx, sizeRx) != WIFI_OK) Error_Handler();
 800213e:	8b3b      	ldrh	r3, [r7, #24]
 8002140:	461a      	mov	r2, r3
 8002142:	6839      	ldr	r1, [r7, #0]
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f7ff fea9 	bl	8001e9c <WIFI_SPI_Receive>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <WIFI_SendATCommand+0x98>
 8002150:	f7ff f83a 	bl	80011c8 <Error_Handler>

	if(WIFI_IS_CMDDATA_READY()) Error_Handler(); // If CMDDATA_READY is still high, then the buffer is too small for the data
 8002154:	2120      	movs	r1, #32
 8002156:	480c      	ldr	r0, [pc, #48]	@ (8002188 <WIFI_SendATCommand+0xcc>)
 8002158:	f000 fcf0 	bl	8002b3c <HAL_GPIO_ReadPin>
 800215c:	4603      	mov	r3, r0
 800215e:	2b01      	cmp	r3, #1
 8002160:	d101      	bne.n	8002166 <WIFI_SendATCommand+0xaa>
 8002162:	f7ff f831 	bl	80011c8 <Error_Handler>

	WIFI_DISABLE_NSS();
 8002166:	2201      	movs	r2, #1
 8002168:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800216c:	4807      	ldr	r0, [pc, #28]	@ (800218c <WIFI_SendATCommand+0xd0>)
 800216e:	f000 fcfd 	bl	8002b6c <HAL_GPIO_WritePin>
 8002172:	200a      	movs	r0, #10
 8002174:	f000 fa2a 	bl	80025cc <HAL_Delay>
	UART_DebugPrint(bRx);
 8002178:	6838      	ldr	r0, [r7, #0]
 800217a:	f7fe fb0f 	bl	800079c <UART_DebugPrint>
	return WIFI_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	58022000 	.word	0x58022000
 800218c:	58020000 	.word	0x58020000

08002190 <WIFI_JoinNetwork>:
  * 		the Wifi handle.
  * @param  hwifi: Wifi handle, which decides which Wifi instance is used.
  * @retval WIFI_StatusTypeDef
  */

WIFI_StatusTypeDef WIFI_JoinNetwork(WIFI_HandleTypeDef* hwifi){
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af02      	add	r7, sp, #8
 8002196:	6078      	str	r0, [r7, #4]

	int msgLength = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]

	// Set SSID
	msgLength = sprintf(wifiTxBuffer, "C1=%s\r", hwifi->ssid);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	461a      	mov	r2, r3
 80021a2:	4970      	ldr	r1, [pc, #448]	@ (8002364 <WIFI_JoinNetwork+0x1d4>)
 80021a4:	4870      	ldr	r0, [pc, #448]	@ (8002368 <WIFI_JoinNetwork+0x1d8>)
 80021a6:	f009 ff1f 	bl	800bfe8 <siprintf>
 80021aa:	6178      	str	r0, [r7, #20]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	3301      	adds	r3, #1
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	4b6c      	ldr	r3, [pc, #432]	@ (800236c <WIFI_JoinNetwork+0x1dc>)
 80021bc:	496a      	ldr	r1, [pc, #424]	@ (8002368 <WIFI_JoinNetwork+0x1d8>)
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7ff ff7c 	bl	80020bc <WIFI_SendATCommand>

	// Set passphrase
	msgLength = sprintf(wifiTxBuffer, "C2=%s\r", hwifi->passphrase);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	461a      	mov	r2, r3
 80021ca:	4969      	ldr	r1, [pc, #420]	@ (8002370 <WIFI_JoinNetwork+0x1e0>)
 80021cc:	4866      	ldr	r0, [pc, #408]	@ (8002368 <WIFI_JoinNetwork+0x1d8>)
 80021ce:	f009 ff0b 	bl	800bfe8 <siprintf>
 80021d2:	6178      	str	r0, [r7, #20]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	3301      	adds	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	4b62      	ldr	r3, [pc, #392]	@ (800236c <WIFI_JoinNetwork+0x1dc>)
 80021e4:	4960      	ldr	r1, [pc, #384]	@ (8002368 <WIFI_JoinNetwork+0x1d8>)
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff ff68 	bl	80020bc <WIFI_SendATCommand>

	// Set security type
	msgLength = sprintf(wifiTxBuffer, "C3=4\r");//sprintf(wifiTxBuffer, "C3=4\r", hwifi->securityType);
 80021ec:	4961      	ldr	r1, [pc, #388]	@ (8002374 <WIFI_JoinNetwork+0x1e4>)
 80021ee:	485e      	ldr	r0, [pc, #376]	@ (8002368 <WIFI_JoinNetwork+0x1d8>)
 80021f0:	f009 fefa 	bl	800bfe8 <siprintf>
 80021f4:	6178      	str	r0, [r7, #20]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	3301      	adds	r3, #1
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	4b59      	ldr	r3, [pc, #356]	@ (800236c <WIFI_JoinNetwork+0x1dc>)
 8002206:	4958      	ldr	r1, [pc, #352]	@ (8002368 <WIFI_JoinNetwork+0x1d8>)
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7ff ff57 	bl	80020bc <WIFI_SendATCommand>

	// Set if IP is requested via DHCP
	msgLength = sprintf(wifiTxBuffer, "C4=%d\r", hwifi->DHCP);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	7b5b      	ldrb	r3, [r3, #13]
 8002212:	461a      	mov	r2, r3
 8002214:	4958      	ldr	r1, [pc, #352]	@ (8002378 <WIFI_JoinNetwork+0x1e8>)
 8002216:	4854      	ldr	r0, [pc, #336]	@ (8002368 <WIFI_JoinNetwork+0x1d8>)
 8002218:	f009 fee6 	bl	800bfe8 <siprintf>
 800221c:	6178      	str	r0, [r7, #20]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	b29b      	uxth	r3, r3
 8002222:	3301      	adds	r3, #1
 8002224:	b29a      	uxth	r2, r3
 8002226:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	4b4f      	ldr	r3, [pc, #316]	@ (800236c <WIFI_JoinNetwork+0x1dc>)
 800222e:	494e      	ldr	r1, [pc, #312]	@ (8002368 <WIFI_JoinNetwork+0x1d8>)
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff ff43 	bl	80020bc <WIFI_SendATCommand>

	// If DHCP is not used, set the additionally needed configurations
	if(hwifi->DHCP != SET){
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	7b5b      	ldrb	r3, [r3, #13]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d04f      	beq.n	80022de <WIFI_JoinNetwork+0x14e>

		// Set module's IP address
		msgLength = sprintf(wifiTxBuffer, "C6=%s\r", hwifi->ipAddress);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3314      	adds	r3, #20
 8002242:	461a      	mov	r2, r3
 8002244:	494d      	ldr	r1, [pc, #308]	@ (800237c <WIFI_JoinNetwork+0x1ec>)
 8002246:	4848      	ldr	r0, [pc, #288]	@ (8002368 <WIFI_JoinNetwork+0x1d8>)
 8002248:	f009 fece 	bl	800bfe8 <siprintf>
 800224c:	6178      	str	r0, [r7, #20]
		WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	b29b      	uxth	r3, r3
 8002252:	3301      	adds	r3, #1
 8002254:	b29a      	uxth	r2, r3
 8002256:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	4b43      	ldr	r3, [pc, #268]	@ (800236c <WIFI_JoinNetwork+0x1dc>)
 800225e:	4942      	ldr	r1, [pc, #264]	@ (8002368 <WIFI_JoinNetwork+0x1d8>)
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff ff2b 	bl	80020bc <WIFI_SendATCommand>

		// Set module's network mask
		msgLength = sprintf(wifiTxBuffer, "C7=%s\r", hwifi->networkMask);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3345      	adds	r3, #69	@ 0x45
 800226a:	461a      	mov	r2, r3
 800226c:	4944      	ldr	r1, [pc, #272]	@ (8002380 <WIFI_JoinNetwork+0x1f0>)
 800226e:	483e      	ldr	r0, [pc, #248]	@ (8002368 <WIFI_JoinNetwork+0x1d8>)
 8002270:	f009 feba 	bl	800bfe8 <siprintf>
 8002274:	6178      	str	r0, [r7, #20]
		WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	b29b      	uxth	r3, r3
 800227a:	3301      	adds	r3, #1
 800227c:	b29a      	uxth	r2, r3
 800227e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	4b39      	ldr	r3, [pc, #228]	@ (800236c <WIFI_JoinNetwork+0x1dc>)
 8002286:	4938      	ldr	r1, [pc, #224]	@ (8002368 <WIFI_JoinNetwork+0x1d8>)
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff ff17 	bl	80020bc <WIFI_SendATCommand>

		// Set module's default gateway
		msgLength = sprintf(wifiTxBuffer, "C8=%s\r", hwifi->defaultGateway);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	3356      	adds	r3, #86	@ 0x56
 8002292:	461a      	mov	r2, r3
 8002294:	493b      	ldr	r1, [pc, #236]	@ (8002384 <WIFI_JoinNetwork+0x1f4>)
 8002296:	4834      	ldr	r0, [pc, #208]	@ (8002368 <WIFI_JoinNetwork+0x1d8>)
 8002298:	f009 fea6 	bl	800bfe8 <siprintf>
 800229c:	6178      	str	r0, [r7, #20]
		WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	3301      	adds	r3, #1
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	4b2f      	ldr	r3, [pc, #188]	@ (800236c <WIFI_JoinNetwork+0x1dc>)
 80022ae:	492e      	ldr	r1, [pc, #184]	@ (8002368 <WIFI_JoinNetwork+0x1d8>)
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff ff03 	bl	80020bc <WIFI_SendATCommand>

		// Set module's primary DNS server
		msgLength = sprintf(wifiTxBuffer, "C9=%s\r", hwifi->primaryDNSServer);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3367      	adds	r3, #103	@ 0x67
 80022ba:	461a      	mov	r2, r3
 80022bc:	4932      	ldr	r1, [pc, #200]	@ (8002388 <WIFI_JoinNetwork+0x1f8>)
 80022be:	482a      	ldr	r0, [pc, #168]	@ (8002368 <WIFI_JoinNetwork+0x1d8>)
 80022c0:	f009 fe92 	bl	800bfe8 <siprintf>
 80022c4:	6178      	str	r0, [r7, #20]
		WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	3301      	adds	r3, #1
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	4b25      	ldr	r3, [pc, #148]	@ (800236c <WIFI_JoinNetwork+0x1dc>)
 80022d6:	4924      	ldr	r1, [pc, #144]	@ (8002368 <WIFI_JoinNetwork+0x1d8>)
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f7ff feef 	bl	80020bc <WIFI_SendATCommand>

	}

	// Join the network
	msgLength = sprintf(wifiTxBuffer, "C0\r");
 80022de:	492b      	ldr	r1, [pc, #172]	@ (800238c <WIFI_JoinNetwork+0x1fc>)
 80022e0:	4821      	ldr	r0, [pc, #132]	@ (8002368 <WIFI_JoinNetwork+0x1d8>)
 80022e2:	f009 fe81 	bl	800bfe8 <siprintf>
 80022e6:	6178      	str	r0, [r7, #20]
	WIFI_SendATCommand(hwifi, wifiTxBuffer, msgLength+1, wifiRxBuffer, WIFI_RX_BUFFER_SIZE);
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	3301      	adds	r3, #1
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	4b1d      	ldr	r3, [pc, #116]	@ (800236c <WIFI_JoinNetwork+0x1dc>)
 80022f8:	491b      	ldr	r1, [pc, #108]	@ (8002368 <WIFI_JoinNetwork+0x1d8>)
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff fede 	bl	80020bc <WIFI_SendATCommand>

	// If there was an error, call the error handler
	if(strstr(wifiRxBuffer, "ERROR") != NULL) Error_Handler();
 8002300:	4923      	ldr	r1, [pc, #140]	@ (8002390 <WIFI_JoinNetwork+0x200>)
 8002302:	481a      	ldr	r0, [pc, #104]	@ (800236c <WIFI_JoinNetwork+0x1dc>)
 8002304:	f009 fef7 	bl	800c0f6 <strstr>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <WIFI_JoinNetwork+0x182>
 800230e:	f7fe ff5b 	bl	80011c8 <Error_Handler>

	// If the module's IP address was assigned by DHCP, then parse it
	// from the response and save it in the Wifi handle.
	if(hwifi->DHCP == SET){
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	7b5b      	ldrb	r3, [r3, #13]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d11f      	bne.n	800235a <WIFI_JoinNetwork+0x1ca>
		// The IP address is between the first and second comma
		char* startPos = strstr(wifiRxBuffer, ",");
 800231a:	212c      	movs	r1, #44	@ 0x2c
 800231c:	4813      	ldr	r0, [pc, #76]	@ (800236c <WIFI_JoinNetwork+0x1dc>)
 800231e:	f009 fedd 	bl	800c0dc <strchr>
 8002322:	6138      	str	r0, [r7, #16]
		char* endPos = strstr(startPos+1, ",");
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	3301      	adds	r3, #1
 8002328:	212c      	movs	r1, #44	@ 0x2c
 800232a:	4618      	mov	r0, r3
 800232c:	f009 fed6 	bl	800c0dc <strchr>
 8002330:	60f8      	str	r0, [r7, #12]

		// Check whether the commas have been found
		if(startPos == NULL || endPos == NULL) Error_Handler();
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <WIFI_JoinNetwork+0x1ae>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <WIFI_JoinNetwork+0x1b2>
 800233e:	f7fe ff43 	bl	80011c8 <Error_Handler>

		// Copy the IP address from the response buffer into the Wifi handle
		// For n set IP_length+1, because the ending char \0 must be considered
		snprintf(hwifi->ipAddress, endPos - startPos, startPos+1);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f103 0014 	add.w	r0, r3, #20
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	4619      	mov	r1, r3
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	3301      	adds	r3, #1
 8002354:	461a      	mov	r2, r3
 8002356:	f009 fe13 	bl	800bf80 <sniprintf>
	}

	return WIFI_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	0800d1ac 	.word	0x0800d1ac
 8002368:	24000598 	.word	0x24000598
 800236c:	24000998 	.word	0x24000998
 8002370:	0800d1b4 	.word	0x0800d1b4
 8002374:	0800d1bc 	.word	0x0800d1bc
 8002378:	0800d1c4 	.word	0x0800d1c4
 800237c:	0800d1cc 	.word	0x0800d1cc
 8002380:	0800d1d4 	.word	0x0800d1d4
 8002384:	0800d1dc 	.word	0x0800d1dc
 8002388:	0800d1e4 	.word	0x0800d1e4
 800238c:	0800d1ec 	.word	0x0800d1ec
 8002390:	0800d18c 	.word	0x0800d18c

08002394 <trimstr>:
  * @param  strSize: C string size
  * @param  size: Character to trim
  * @retval None
  */

void trimstr(char* str, uint32_t strSize, char c){
 8002394:	b580      	push	{r7, lr}
 8002396:	b08a      	sub	sp, #40	@ 0x28
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	4613      	mov	r3, r2
 80023a0:	71fb      	strb	r3, [r7, #7]

	uint32_t trimPos = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t endPos = 0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	623b      	str	r3, [r7, #32]

	// Find end of string a.k.a. first occurrence of '\0'
	for(uint32_t i = 0; i < strSize; i++){
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
 80023ae:	e00c      	b.n	80023ca <trimstr+0x36>
		if( str[i] != '\0' ) continue;
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	4413      	add	r3, r2
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d102      	bne.n	80023c2 <trimstr+0x2e>
		else{
			endPos = i;
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	623b      	str	r3, [r7, #32]
			break;
 80023c0:	e007      	b.n	80023d2 <trimstr+0x3e>
		if( str[i] != '\0' ) continue;
 80023c2:	bf00      	nop
	for(uint32_t i = 0; i < strSize; i++){
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	3301      	adds	r3, #1
 80023c8:	61fb      	str	r3, [r7, #28]
 80023ca:	69fa      	ldr	r2, [r7, #28]
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d3ee      	bcc.n	80023b0 <trimstr+0x1c>

	/**
	 * If c is at the end of the string, replace it with '\0'.
	 * Repeat until a char emerges that is not c.
	 */
	for(uint32_t i = endPos -1; i > 0; i--){
 80023d2:	6a3b      	ldr	r3, [r7, #32]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	61bb      	str	r3, [r7, #24]
 80023d8:	e010      	b.n	80023fc <trimstr+0x68>
		if( str[i] == c ){
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	4413      	add	r3, r2
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	79fa      	ldrb	r2, [r7, #7]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d10d      	bne.n	8002404 <trimstr+0x70>
			str[i] = '\0';
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	4413      	add	r3, r2
 80023ee:	2200      	movs	r2, #0
 80023f0:	701a      	strb	r2, [r3, #0]
			endPos = i;
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	623b      	str	r3, [r7, #32]
	for(uint32_t i = endPos -1; i > 0; i--){
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	3b01      	subs	r3, #1
 80023fa:	61bb      	str	r3, [r7, #24]
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1eb      	bne.n	80023da <trimstr+0x46>
 8002402:	e000      	b.n	8002406 <trimstr+0x72>
		}
		else break;
 8002404:	bf00      	nop
	}

	// Find the position of the first char in the string that is not c.
	for(uint32_t i = 0; i < strSize; i++){
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	e00c      	b.n	8002426 <trimstr+0x92>
		if(str[i] == c){
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	4413      	add	r3, r2
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	79fa      	ldrb	r2, [r7, #7]
 8002416:	429a      	cmp	r2, r3
 8002418:	d10a      	bne.n	8002430 <trimstr+0x9c>
			trimPos = i + 1;
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	3301      	adds	r3, #1
 800241e:	627b      	str	r3, [r7, #36]	@ 0x24
	for(uint32_t i = 0; i < strSize; i++){
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	3301      	adds	r3, #1
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	429a      	cmp	r2, r3
 800242c:	d3ee      	bcc.n	800240c <trimstr+0x78>
 800242e:	e000      	b.n	8002432 <trimstr+0x9e>
		}else break;
 8002430:	bf00      	nop
	}
	// Trim leading c
	snprintf( str, endPos + 1 - trimPos, &str[trimPos] );
 8002432:	6a3a      	ldr	r2, [r7, #32]
 8002434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	1c59      	adds	r1, r3, #1
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243e:	4413      	add	r3, r2
 8002440:	461a      	mov	r2, r3
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f009 fd9c 	bl	800bf80 <sniprintf>
}
 8002448:	bf00      	nop
 800244a:	3728      	adds	r7, #40	@ 0x28
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002450:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800248c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002454:	f7ff fd0a 	bl	8001e6c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002458:	f7ff fc78 	bl	8001d4c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800245c:	480c      	ldr	r0, [pc, #48]	@ (8002490 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800245e:	490d      	ldr	r1, [pc, #52]	@ (8002494 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002460:	4a0d      	ldr	r2, [pc, #52]	@ (8002498 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002464:	e002      	b.n	800246c <LoopCopyDataInit>

08002466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800246a:	3304      	adds	r3, #4

0800246c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 800246c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800246e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002470:	d3f9      	bcc.n	8002466 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002472:	4a0a      	ldr	r2, [pc, #40]	@ (800249c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002474:	4c0a      	ldr	r4, [pc, #40]	@ (80024a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002478:	e001      	b.n	800247e <LoopFillZerobss>

0800247a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800247a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800247c:	3204      	adds	r2, #4

0800247e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800247e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002480:	d3fb      	bcc.n	800247a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002482:	f009 fe9b 	bl	800c1bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002486:	f7fe f9a5 	bl	80007d4 <main>
  bx  lr
 800248a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800248c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8002490:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002494:	24000080 	.word	0x24000080
  ldr r2, =_sidata
 8002498:	0800d2cc 	.word	0x0800d2cc
  ldr r2, =_sbss
 800249c:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 80024a0:	24000ee8 	.word	0x24000ee8

080024a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024a4:	e7fe      	b.n	80024a4 <ADC_IRQHandler>
	...

080024a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ae:	2003      	movs	r0, #3
 80024b0:	f000 f962 	bl	8002778 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80024b4:	f002 fd90 	bl	8004fd8 <HAL_RCC_GetSysClockFreq>
 80024b8:	4602      	mov	r2, r0
 80024ba:	4b15      	ldr	r3, [pc, #84]	@ (8002510 <HAL_Init+0x68>)
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	0a1b      	lsrs	r3, r3, #8
 80024c0:	f003 030f 	and.w	r3, r3, #15
 80024c4:	4913      	ldr	r1, [pc, #76]	@ (8002514 <HAL_Init+0x6c>)
 80024c6:	5ccb      	ldrb	r3, [r1, r3]
 80024c8:	f003 031f 	and.w	r3, r3, #31
 80024cc:	fa22 f303 	lsr.w	r3, r2, r3
 80024d0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80024d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002510 <HAL_Init+0x68>)
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	4a0e      	ldr	r2, [pc, #56]	@ (8002514 <HAL_Init+0x6c>)
 80024dc:	5cd3      	ldrb	r3, [r2, r3]
 80024de:	f003 031f 	and.w	r3, r3, #31
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	fa22 f303 	lsr.w	r3, r2, r3
 80024e8:	4a0b      	ldr	r2, [pc, #44]	@ (8002518 <HAL_Init+0x70>)
 80024ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024ec:	4a0b      	ldr	r2, [pc, #44]	@ (800251c <HAL_Init+0x74>)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024f2:	2000      	movs	r0, #0
 80024f4:	f000 f814 	bl	8002520 <HAL_InitTick>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e002      	b.n	8002508 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002502:	f7fe fe67 	bl	80011d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	58024400 	.word	0x58024400
 8002514:	0800d250 	.word	0x0800d250
 8002518:	24000018 	.word	0x24000018
 800251c:	24000014 	.word	0x24000014

08002520 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002528:	4b15      	ldr	r3, [pc, #84]	@ (8002580 <HAL_InitTick+0x60>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e021      	b.n	8002578 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002534:	4b13      	ldr	r3, [pc, #76]	@ (8002584 <HAL_InitTick+0x64>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	4b11      	ldr	r3, [pc, #68]	@ (8002580 <HAL_InitTick+0x60>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	4619      	mov	r1, r3
 800253e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002542:	fbb3 f3f1 	udiv	r3, r3, r1
 8002546:	fbb2 f3f3 	udiv	r3, r2, r3
 800254a:	4618      	mov	r0, r3
 800254c:	f000 f939 	bl	80027c2 <HAL_SYSTICK_Config>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e00e      	b.n	8002578 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b0f      	cmp	r3, #15
 800255e:	d80a      	bhi.n	8002576 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002560:	2200      	movs	r2, #0
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	f04f 30ff 	mov.w	r0, #4294967295
 8002568:	f000 f911 	bl	800278e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800256c:	4a06      	ldr	r2, [pc, #24]	@ (8002588 <HAL_InitTick+0x68>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	e000      	b.n	8002578 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
}
 8002578:	4618      	mov	r0, r3
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	24000020 	.word	0x24000020
 8002584:	24000014 	.word	0x24000014
 8002588:	2400001c 	.word	0x2400001c

0800258c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002590:	4b06      	ldr	r3, [pc, #24]	@ (80025ac <HAL_IncTick+0x20>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	461a      	mov	r2, r3
 8002596:	4b06      	ldr	r3, [pc, #24]	@ (80025b0 <HAL_IncTick+0x24>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4413      	add	r3, r2
 800259c:	4a04      	ldr	r2, [pc, #16]	@ (80025b0 <HAL_IncTick+0x24>)
 800259e:	6013      	str	r3, [r2, #0]
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	24000020 	.word	0x24000020
 80025b0:	24000d98 	.word	0x24000d98

080025b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return uwTick;
 80025b8:	4b03      	ldr	r3, [pc, #12]	@ (80025c8 <HAL_GetTick+0x14>)
 80025ba:	681b      	ldr	r3, [r3, #0]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	24000d98 	.word	0x24000d98

080025cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025d4:	f7ff ffee 	bl	80025b4 <HAL_GetTick>
 80025d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e4:	d005      	beq.n	80025f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002610 <HAL_Delay+0x44>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	461a      	mov	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4413      	add	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025f2:	bf00      	nop
 80025f4:	f7ff ffde 	bl	80025b4 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	429a      	cmp	r2, r3
 8002602:	d8f7      	bhi.n	80025f4 <HAL_Delay+0x28>
  {
  }
}
 8002604:	bf00      	nop
 8002606:	bf00      	nop
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	24000020 	.word	0x24000020

08002614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002624:	4b0b      	ldr	r3, [pc, #44]	@ (8002654 <__NVIC_SetPriorityGrouping+0x40>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002630:	4013      	ands	r3, r2
 8002632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800263c:	4b06      	ldr	r3, [pc, #24]	@ (8002658 <__NVIC_SetPriorityGrouping+0x44>)
 800263e:	4313      	orrs	r3, r2
 8002640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002642:	4a04      	ldr	r2, [pc, #16]	@ (8002654 <__NVIC_SetPriorityGrouping+0x40>)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	60d3      	str	r3, [r2, #12]
}
 8002648:	bf00      	nop
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000ed00 	.word	0xe000ed00
 8002658:	05fa0000 	.word	0x05fa0000

0800265c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002660:	4b04      	ldr	r3, [pc, #16]	@ (8002674 <__NVIC_GetPriorityGrouping+0x18>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	0a1b      	lsrs	r3, r3, #8
 8002666:	f003 0307 	and.w	r3, r3, #7
}
 800266a:	4618      	mov	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	6039      	str	r1, [r7, #0]
 8002682:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002684:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002688:	2b00      	cmp	r3, #0
 800268a:	db0a      	blt.n	80026a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	b2da      	uxtb	r2, r3
 8002690:	490c      	ldr	r1, [pc, #48]	@ (80026c4 <__NVIC_SetPriority+0x4c>)
 8002692:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002696:	0112      	lsls	r2, r2, #4
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	440b      	add	r3, r1
 800269c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a0:	e00a      	b.n	80026b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4908      	ldr	r1, [pc, #32]	@ (80026c8 <__NVIC_SetPriority+0x50>)
 80026a8:	88fb      	ldrh	r3, [r7, #6]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	3b04      	subs	r3, #4
 80026b0:	0112      	lsls	r2, r2, #4
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	440b      	add	r3, r1
 80026b6:	761a      	strb	r2, [r3, #24]
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000e100 	.word	0xe000e100
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b089      	sub	sp, #36	@ 0x24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f1c3 0307 	rsb	r3, r3, #7
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	bf28      	it	cs
 80026ea:	2304      	movcs	r3, #4
 80026ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3304      	adds	r3, #4
 80026f2:	2b06      	cmp	r3, #6
 80026f4:	d902      	bls.n	80026fc <NVIC_EncodePriority+0x30>
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3b03      	subs	r3, #3
 80026fa:	e000      	b.n	80026fe <NVIC_EncodePriority+0x32>
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002700:	f04f 32ff 	mov.w	r2, #4294967295
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43da      	mvns	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	401a      	ands	r2, r3
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002714:	f04f 31ff 	mov.w	r1, #4294967295
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	fa01 f303 	lsl.w	r3, r1, r3
 800271e:	43d9      	mvns	r1, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002724:	4313      	orrs	r3, r2
         );
}
 8002726:	4618      	mov	r0, r3
 8002728:	3724      	adds	r7, #36	@ 0x24
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3b01      	subs	r3, #1
 8002740:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002744:	d301      	bcc.n	800274a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002746:	2301      	movs	r3, #1
 8002748:	e00f      	b.n	800276a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800274a:	4a0a      	ldr	r2, [pc, #40]	@ (8002774 <SysTick_Config+0x40>)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3b01      	subs	r3, #1
 8002750:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002752:	210f      	movs	r1, #15
 8002754:	f04f 30ff 	mov.w	r0, #4294967295
 8002758:	f7ff ff8e 	bl	8002678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800275c:	4b05      	ldr	r3, [pc, #20]	@ (8002774 <SysTick_Config+0x40>)
 800275e:	2200      	movs	r2, #0
 8002760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002762:	4b04      	ldr	r3, [pc, #16]	@ (8002774 <SysTick_Config+0x40>)
 8002764:	2207      	movs	r2, #7
 8002766:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	e000e010 	.word	0xe000e010

08002778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7ff ff47 	bl	8002614 <__NVIC_SetPriorityGrouping>
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b086      	sub	sp, #24
 8002792:	af00      	add	r7, sp, #0
 8002794:	4603      	mov	r3, r0
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	607a      	str	r2, [r7, #4]
 800279a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800279c:	f7ff ff5e 	bl	800265c <__NVIC_GetPriorityGrouping>
 80027a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68b9      	ldr	r1, [r7, #8]
 80027a6:	6978      	ldr	r0, [r7, #20]
 80027a8:	f7ff ff90 	bl	80026cc <NVIC_EncodePriority>
 80027ac:	4602      	mov	r2, r0
 80027ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027b2:	4611      	mov	r1, r2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff ff5f 	bl	8002678 <__NVIC_SetPriority>
}
 80027ba:	bf00      	nop
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7ff ffb2 	bl	8002734 <SysTick_Config>
 80027d0:	4603      	mov	r3, r0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80027dc:	b480      	push	{r7}
 80027de:	b089      	sub	sp, #36	@ 0x24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80027ea:	4b89      	ldr	r3, [pc, #548]	@ (8002a10 <HAL_GPIO_Init+0x234>)
 80027ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027ee:	e194      	b.n	8002b1a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	2101      	movs	r1, #1
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	fa01 f303 	lsl.w	r3, r1, r3
 80027fc:	4013      	ands	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 8186 	beq.w	8002b14 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	2b01      	cmp	r3, #1
 8002812:	d005      	beq.n	8002820 <HAL_GPIO_Init+0x44>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d130      	bne.n	8002882 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	2203      	movs	r2, #3
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4313      	orrs	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002856:	2201      	movs	r2, #1
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43db      	mvns	r3, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4013      	ands	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	091b      	lsrs	r3, r3, #4
 800286c:	f003 0201 	and.w	r2, r3, #1
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4313      	orrs	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	2b03      	cmp	r3, #3
 800288c:	d017      	beq.n	80028be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	2203      	movs	r2, #3
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4013      	ands	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d123      	bne.n	8002912 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	08da      	lsrs	r2, r3, #3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3208      	adds	r2, #8
 80028d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	220f      	movs	r2, #15
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	691a      	ldr	r2, [r3, #16]
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4313      	orrs	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	08da      	lsrs	r2, r3, #3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3208      	adds	r2, #8
 800290c:	69b9      	ldr	r1, [r7, #24]
 800290e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	2203      	movs	r2, #3
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43db      	mvns	r3, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4013      	ands	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f003 0203 	and.w	r2, r3, #3
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4313      	orrs	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 80e0 	beq.w	8002b14 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002954:	4b2f      	ldr	r3, [pc, #188]	@ (8002a14 <HAL_GPIO_Init+0x238>)
 8002956:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800295a:	4a2e      	ldr	r2, [pc, #184]	@ (8002a14 <HAL_GPIO_Init+0x238>)
 800295c:	f043 0302 	orr.w	r3, r3, #2
 8002960:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8002964:	4b2b      	ldr	r3, [pc, #172]	@ (8002a14 <HAL_GPIO_Init+0x238>)
 8002966:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002972:	4a29      	ldr	r2, [pc, #164]	@ (8002a18 <HAL_GPIO_Init+0x23c>)
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	089b      	lsrs	r3, r3, #2
 8002978:	3302      	adds	r3, #2
 800297a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	220f      	movs	r2, #15
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43db      	mvns	r3, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4013      	ands	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a20      	ldr	r2, [pc, #128]	@ (8002a1c <HAL_GPIO_Init+0x240>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d052      	beq.n	8002a44 <HAL_GPIO_Init+0x268>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002a20 <HAL_GPIO_Init+0x244>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d031      	beq.n	8002a0a <HAL_GPIO_Init+0x22e>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002a24 <HAL_GPIO_Init+0x248>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d02b      	beq.n	8002a06 <HAL_GPIO_Init+0x22a>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002a28 <HAL_GPIO_Init+0x24c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d025      	beq.n	8002a02 <HAL_GPIO_Init+0x226>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a1c      	ldr	r2, [pc, #112]	@ (8002a2c <HAL_GPIO_Init+0x250>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d01f      	beq.n	80029fe <HAL_GPIO_Init+0x222>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a1b      	ldr	r2, [pc, #108]	@ (8002a30 <HAL_GPIO_Init+0x254>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d019      	beq.n	80029fa <HAL_GPIO_Init+0x21e>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a1a      	ldr	r2, [pc, #104]	@ (8002a34 <HAL_GPIO_Init+0x258>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d013      	beq.n	80029f6 <HAL_GPIO_Init+0x21a>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a19      	ldr	r2, [pc, #100]	@ (8002a38 <HAL_GPIO_Init+0x25c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d00d      	beq.n	80029f2 <HAL_GPIO_Init+0x216>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a18      	ldr	r2, [pc, #96]	@ (8002a3c <HAL_GPIO_Init+0x260>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d007      	beq.n	80029ee <HAL_GPIO_Init+0x212>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a17      	ldr	r2, [pc, #92]	@ (8002a40 <HAL_GPIO_Init+0x264>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d101      	bne.n	80029ea <HAL_GPIO_Init+0x20e>
 80029e6:	2309      	movs	r3, #9
 80029e8:	e02d      	b.n	8002a46 <HAL_GPIO_Init+0x26a>
 80029ea:	230a      	movs	r3, #10
 80029ec:	e02b      	b.n	8002a46 <HAL_GPIO_Init+0x26a>
 80029ee:	2308      	movs	r3, #8
 80029f0:	e029      	b.n	8002a46 <HAL_GPIO_Init+0x26a>
 80029f2:	2307      	movs	r3, #7
 80029f4:	e027      	b.n	8002a46 <HAL_GPIO_Init+0x26a>
 80029f6:	2306      	movs	r3, #6
 80029f8:	e025      	b.n	8002a46 <HAL_GPIO_Init+0x26a>
 80029fa:	2305      	movs	r3, #5
 80029fc:	e023      	b.n	8002a46 <HAL_GPIO_Init+0x26a>
 80029fe:	2304      	movs	r3, #4
 8002a00:	e021      	b.n	8002a46 <HAL_GPIO_Init+0x26a>
 8002a02:	2303      	movs	r3, #3
 8002a04:	e01f      	b.n	8002a46 <HAL_GPIO_Init+0x26a>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e01d      	b.n	8002a46 <HAL_GPIO_Init+0x26a>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e01b      	b.n	8002a46 <HAL_GPIO_Init+0x26a>
 8002a0e:	bf00      	nop
 8002a10:	58000080 	.word	0x58000080
 8002a14:	58024400 	.word	0x58024400
 8002a18:	58000400 	.word	0x58000400
 8002a1c:	58020000 	.word	0x58020000
 8002a20:	58020400 	.word	0x58020400
 8002a24:	58020800 	.word	0x58020800
 8002a28:	58020c00 	.word	0x58020c00
 8002a2c:	58021000 	.word	0x58021000
 8002a30:	58021400 	.word	0x58021400
 8002a34:	58021800 	.word	0x58021800
 8002a38:	58021c00 	.word	0x58021c00
 8002a3c:	58022000 	.word	0x58022000
 8002a40:	58022400 	.word	0x58022400
 8002a44:	2300      	movs	r3, #0
 8002a46:	69fa      	ldr	r2, [r7, #28]
 8002a48:	f002 0203 	and.w	r2, r2, #3
 8002a4c:	0092      	lsls	r2, r2, #2
 8002a4e:	4093      	lsls	r3, r2
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a56:	4938      	ldr	r1, [pc, #224]	@ (8002b38 <HAL_GPIO_Init+0x35c>)
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	089b      	lsrs	r3, r3, #2
 8002a5c:	3302      	adds	r3, #2
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4013      	ands	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002a8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002ab8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	43db      	mvns	r3, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4013      	ands	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	3301      	adds	r3, #1
 8002b18:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	fa22 f303 	lsr.w	r3, r2, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f47f ae63 	bne.w	80027f0 <HAL_GPIO_Init+0x14>
  }
}
 8002b2a:	bf00      	nop
 8002b2c:	bf00      	nop
 8002b2e:	3724      	adds	r7, #36	@ 0x24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	58000400 	.word	0x58000400

08002b3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691a      	ldr	r2, [r3, #16]
 8002b4c:	887b      	ldrh	r3, [r7, #2]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d002      	beq.n	8002b5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b54:	2301      	movs	r3, #1
 8002b56:	73fb      	strb	r3, [r7, #15]
 8002b58:	e001      	b.n	8002b5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	460b      	mov	r3, r1
 8002b76:	807b      	strh	r3, [r7, #2]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b7c:	787b      	ldrb	r3, [r7, #1]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b82:	887a      	ldrh	r2, [r7, #2]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002b88:	e003      	b.n	8002b92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b8a:	887b      	ldrh	r3, [r7, #2]
 8002b8c:	041a      	lsls	r2, r3, #16
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	619a      	str	r2, [r3, #24]
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
	...

08002ba0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e08b      	b.n	8002cca <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7fe fb1e 	bl	8001208 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2224      	movs	r2, #36	@ 0x24
 8002bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0201 	bic.w	r2, r2, #1
 8002be2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002bf0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d107      	bne.n	8002c1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689a      	ldr	r2, [r3, #8]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	e006      	b.n	8002c28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002c26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d108      	bne.n	8002c42 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c3e:	605a      	str	r2, [r3, #4]
 8002c40:	e007      	b.n	8002c52 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6859      	ldr	r1, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002cd4 <HAL_I2C_Init+0x134>)
 8002c5e:	430b      	orrs	r3, r1
 8002c60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68da      	ldr	r2, [r3, #12]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691a      	ldr	r2, [r3, #16]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69d9      	ldr	r1, [r3, #28]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a1a      	ldr	r2, [r3, #32]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0201 	orr.w	r2, r2, #1
 8002caa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	02008000 	.word	0x02008000

08002cd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b20      	cmp	r3, #32
 8002cec:	d138      	bne.n	8002d60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e032      	b.n	8002d62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2224      	movs	r2, #36	@ 0x24
 8002d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0201 	bic.w	r2, r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6819      	ldr	r1, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0201 	orr.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	e000      	b.n	8002d62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d60:	2302      	movs	r3, #2
  }
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b085      	sub	sp, #20
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b20      	cmp	r3, #32
 8002d82:	d139      	bne.n	8002df8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d101      	bne.n	8002d92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d8e:	2302      	movs	r3, #2
 8002d90:	e033      	b.n	8002dfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2224      	movs	r2, #36	@ 0x24
 8002d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 0201 	bic.w	r2, r2, #1
 8002db0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002dc0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	021b      	lsls	r3, r3, #8
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0201 	orr.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002df4:	2300      	movs	r3, #0
 8002df6:	e000      	b.n	8002dfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002df8:	2302      	movs	r3, #2
  }
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
	...

08002e08 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b088      	sub	sp, #32
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e11a      	b.n	8003050 <HAL_I2S_Init+0x248>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d106      	bne.n	8002e34 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7fe fa54 	bl	80012dc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2202      	movs	r2, #2
 8002e38:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d107      	bne.n	8002e5a <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0201 	bic.w	r2, r2, #1
 8002e58:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d008      	beq.n	8002e7c <HAL_I2S_Init+0x74>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b06      	cmp	r3, #6
 8002e70:	d004      	beq.n	8002e7c <HAL_I2S_Init+0x74>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2b0a      	cmp	r3, #10
 8002e78:	f040 8094 	bne.w	8002fa4 <HAL_I2S_Init+0x19c>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d067      	beq.n	8002f54 <HAL_I2S_Init+0x14c>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d002      	beq.n	8002e92 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	e001      	b.n	8002e96 <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8002e92:	2301      	movs	r3, #1
 8002e94:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b30      	cmp	r3, #48	@ 0x30
 8002e9c:	d003      	beq.n	8002ea6 <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8002ea2:	2bb0      	cmp	r3, #176	@ 0xb0
 8002ea4:	d102      	bne.n	8002eac <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	60bb      	str	r3, [r7, #8]
 8002eaa:	e001      	b.n	8002eb0 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	60bb      	str	r3, [r7, #8]
      }

      /* Get the source clock value: based on System Clock value */
#if defined (SPI_SPI6I2S_SUPPORT)
      if (hi2s->Instance == SPI6)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a68      	ldr	r2, [pc, #416]	@ (8003058 <HAL_I2S_Init+0x250>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d107      	bne.n	8002eca <HAL_I2S_Init+0xc2>
      {
        /* SPI6 source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI6);
 8002eba:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002ebe:	f04f 0100 	mov.w	r1, #0
 8002ec2:	f003 fc1d 	bl	8006700 <HAL_RCCEx_GetPeriphCLKFreq>
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	e006      	b.n	8002ed8 <HAL_I2S_Init+0xd0>
      }
      else
      {
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8002eca:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002ece:	f04f 0100 	mov.w	r1, #0
 8002ed2:	f003 fc15 	bl	8006700 <HAL_RCCEx_GetPeriphCLKFreq>
 8002ed6:	60f8      	str	r0, [r7, #12]
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ee0:	d113      	bne.n	8002f0a <HAL_I2S_Init+0x102>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8002ee2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	461a      	mov	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f04:	3305      	adds	r3, #5
 8002f06:	613b      	str	r3, [r7, #16]
 8002f08:	e014      	b.n	8002f34 <HAL_I2S_Init+0x12c>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	fb02 f303 	mul.w	r3, r2, r3
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f1e:	4613      	mov	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	461a      	mov	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f30:	3305      	adds	r3, #5
 8002f32:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	4a49      	ldr	r2, [pc, #292]	@ (800305c <HAL_I2S_Init+0x254>)
 8002f38:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3c:	08db      	lsrs	r3, r3, #3
 8002f3e:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	085b      	lsrs	r3, r3, #1
 8002f50:	61fb      	str	r3, [r7, #28]
 8002f52:	e003      	b.n	8002f5c <HAL_I2S_Init+0x154>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8002f54:	2302      	movs	r3, #2
 8002f56:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d102      	bne.n	8002f68 <HAL_I2S_Init+0x160>
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d002      	beq.n	8002f6e <HAL_I2S_Init+0x166>
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	2bff      	cmp	r3, #255	@ 0xff
 8002f6c:	d907      	bls.n	8002f7e <HAL_I2S_Init+0x176>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f72:	f043 0210 	orr.w	r2, r3, #16
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e068      	b.n	8003050 <HAL_I2S_Init+0x248>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_I2S_Init+0x180>
    {
      i2sodd = 1UL;
 8002f84:	2301      	movs	r3, #1
 8002f86:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f8e:	4b34      	ldr	r3, [pc, #208]	@ (8003060 <HAL_I2S_Init+0x258>)
 8002f90:	4013      	ands	r3, r2
 8002f92:	69fa      	ldr	r2, [r7, #28]
 8002f94:	0411      	lsls	r1, r2, #16
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	0612      	lsls	r2, r2, #24
 8002f9a:	4311      	orrs	r1, r2
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6812      	ldr	r2, [r2, #0]
 8002fa0:	430b      	orrs	r3, r1
 8002fa2:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002faa:	4b2e      	ldr	r3, [pc, #184]	@ (8003064 <HAL_I2S_Init+0x25c>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6851      	ldr	r1, [r2, #4]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6892      	ldr	r2, [r2, #8]
 8002fb6:	4311      	orrs	r1, r2
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	68d2      	ldr	r2, [r2, #12]
 8002fbc:	4311      	orrs	r1, r2
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6992      	ldr	r2, [r2, #24]
 8002fc2:	4311      	orrs	r1, r2
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6a12      	ldr	r2, [r2, #32]
 8002fc8:	4311      	orrs	r1, r2
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002fce:	4311      	orrs	r1, r2
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6912      	ldr	r2, [r2, #16]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 0201 	orr.w	r2, r2, #1
 8002fe0:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f640 72f8 	movw	r2, #4088	@ 0xff8
 8002fea:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002ffa:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69da      	ldr	r2, [r3, #28]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b04      	cmp	r3, #4
 8003018:	d007      	beq.n	800302a <HAL_I2S_Init+0x222>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b06      	cmp	r3, #6
 8003020:	d003      	beq.n	800302a <HAL_I2S_Init+0x222>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b0a      	cmp	r3, #10
 8003028:	d10a      	bne.n	8003040 <HAL_I2S_Init+0x238>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3720      	adds	r7, #32
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	58001400 	.word	0x58001400
 800305c:	cccccccd 	.word	0xcccccccd
 8003060:	fe00ffff 	.word	0xfe00ffff
 8003064:	fdff9040 	.word	0xfdff9040

08003068 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e08f      	b.n	800319a <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d106      	bne.n	8003094 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7fe f9b4 	bl	80013fc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2202      	movs	r2, #2
 8003098:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	699a      	ldr	r2, [r3, #24]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80030aa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6999      	ldr	r1, [r3, #24]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80030c0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	041b      	lsls	r3, r3, #16
 80030d6:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6999      	ldr	r1, [r3, #24]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	041b      	lsls	r3, r3, #16
 80030ec:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a19      	ldr	r1, [r3, #32]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003100:	041b      	lsls	r3, r3, #16
 8003102:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	430a      	orrs	r2, r1
 8003110:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003116:	041b      	lsls	r3, r3, #16
 8003118:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	430a      	orrs	r2, r1
 8003126:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800312e:	021b      	lsls	r3, r3, #8
 8003130:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003138:	041b      	lsls	r3, r3, #16
 800313a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800314a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4313      	orrs	r3, r2
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0206 	orr.w	r2, r2, #6
 8003176:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	699a      	ldr	r2, [r3, #24]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80031a2:	b5b0      	push	{r4, r5, r7, lr}
 80031a4:	b084      	sub	sp, #16
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <HAL_LTDC_ConfigLayer+0x1a>
 80031b8:	2302      	movs	r3, #2
 80031ba:	e02c      	b.n	8003216 <HAL_LTDC_ConfigLayer+0x74>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2134      	movs	r1, #52	@ 0x34
 80031d2:	fb01 f303 	mul.w	r3, r1, r3
 80031d6:	4413      	add	r3, r2
 80031d8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	4614      	mov	r4, r2
 80031e0:	461d      	mov	r5, r3
 80031e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031ee:	682b      	ldr	r3, [r5, #0]
 80031f0:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	68b9      	ldr	r1, [r7, #8]
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f812 	bl	8003220 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2201      	movs	r2, #1
 8003202:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003220 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003220:	b480      	push	{r7}
 8003222:	b089      	sub	sp, #36	@ 0x24
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	0c1b      	lsrs	r3, r3, #16
 8003238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800323c:	4413      	add	r3, r2
 800323e:	041b      	lsls	r3, r3, #16
 8003240:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	461a      	mov	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	01db      	lsls	r3, r3, #7
 800324c:	4413      	add	r3, r2
 800324e:	3384      	adds	r3, #132	@ 0x84
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	6812      	ldr	r2, [r2, #0]
 8003256:	4611      	mov	r1, r2
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	01d2      	lsls	r2, r2, #7
 800325c:	440a      	add	r2, r1
 800325e:	3284      	adds	r2, #132	@ 0x84
 8003260:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003264:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	0c1b      	lsrs	r3, r3, #16
 8003272:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003276:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003278:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4619      	mov	r1, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	01db      	lsls	r3, r3, #7
 8003284:	440b      	add	r3, r1
 8003286:	3384      	adds	r3, #132	@ 0x84
 8003288:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800328e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800329e:	4413      	add	r3, r2
 80032a0:	041b      	lsls	r3, r3, #16
 80032a2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	461a      	mov	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	01db      	lsls	r3, r3, #7
 80032ae:	4413      	add	r3, r2
 80032b0:	3384      	adds	r3, #132	@ 0x84
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	4611      	mov	r1, r2
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	01d2      	lsls	r2, r2, #7
 80032be:	440a      	add	r2, r1
 80032c0:	3284      	adds	r2, #132	@ 0x84
 80032c2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80032c6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032d6:	4413      	add	r3, r2
 80032d8:	1c5a      	adds	r2, r3, #1
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4619      	mov	r1, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	01db      	lsls	r3, r3, #7
 80032e4:	440b      	add	r3, r1
 80032e6:	3384      	adds	r3, #132	@ 0x84
 80032e8:	4619      	mov	r1, r3
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	461a      	mov	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	01db      	lsls	r3, r3, #7
 80032fa:	4413      	add	r3, r2
 80032fc:	3384      	adds	r3, #132	@ 0x84
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	6812      	ldr	r2, [r2, #0]
 8003304:	4611      	mov	r1, r2
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	01d2      	lsls	r2, r2, #7
 800330a:	440a      	add	r2, r1
 800330c:	3284      	adds	r2, #132	@ 0x84
 800330e:	f023 0307 	bic.w	r3, r3, #7
 8003312:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	461a      	mov	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	01db      	lsls	r3, r3, #7
 800331e:	4413      	add	r3, r2
 8003320:	3384      	adds	r3, #132	@ 0x84
 8003322:	461a      	mov	r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003330:	021b      	lsls	r3, r3, #8
 8003332:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800333a:	041b      	lsls	r3, r3, #16
 800333c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	061b      	lsls	r3, r3, #24
 8003344:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800334c:	461a      	mov	r2, r3
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	431a      	orrs	r2, r3
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	431a      	orrs	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4619      	mov	r1, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	01db      	lsls	r3, r3, #7
 8003360:	440b      	add	r3, r1
 8003362:	3384      	adds	r3, #132	@ 0x84
 8003364:	4619      	mov	r1, r3
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	4313      	orrs	r3, r2
 800336a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	461a      	mov	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	01db      	lsls	r3, r3, #7
 8003376:	4413      	add	r3, r2
 8003378:	3384      	adds	r3, #132	@ 0x84
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	6812      	ldr	r2, [r2, #0]
 8003380:	4611      	mov	r1, r2
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	01d2      	lsls	r2, r2, #7
 8003386:	440a      	add	r2, r1
 8003388:	3284      	adds	r2, #132	@ 0x84
 800338a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800338e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	01db      	lsls	r3, r3, #7
 800339a:	4413      	add	r3, r2
 800339c:	3384      	adds	r3, #132	@ 0x84
 800339e:	461a      	mov	r2, r3
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	461a      	mov	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	01db      	lsls	r3, r3, #7
 80033b0:	4413      	add	r3, r2
 80033b2:	3384      	adds	r3, #132	@ 0x84
 80033b4:	69da      	ldr	r2, [r3, #28]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4619      	mov	r1, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	01db      	lsls	r3, r3, #7
 80033c0:	440b      	add	r3, r1
 80033c2:	3384      	adds	r3, #132	@ 0x84
 80033c4:	4619      	mov	r1, r3
 80033c6:	4b4f      	ldr	r3, [pc, #316]	@ (8003504 <LTDC_SetConfig+0x2e4>)
 80033c8:	4013      	ands	r3, r2
 80033ca:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	69da      	ldr	r2, [r3, #28]
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	68f9      	ldr	r1, [r7, #12]
 80033d6:	6809      	ldr	r1, [r1, #0]
 80033d8:	4608      	mov	r0, r1
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	01c9      	lsls	r1, r1, #7
 80033de:	4401      	add	r1, r0
 80033e0:	3184      	adds	r1, #132	@ 0x84
 80033e2:	4313      	orrs	r3, r2
 80033e4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	461a      	mov	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	01db      	lsls	r3, r3, #7
 80033f0:	4413      	add	r3, r2
 80033f2:	3384      	adds	r3, #132	@ 0x84
 80033f4:	461a      	mov	r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fa:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d102      	bne.n	800340a <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 8003404:	2304      	movs	r3, #4
 8003406:	61fb      	str	r3, [r7, #28]
 8003408:	e01b      	b.n	8003442 <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d102      	bne.n	8003418 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 8003412:	2303      	movs	r3, #3
 8003414:	61fb      	str	r3, [r7, #28]
 8003416:	e014      	b.n	8003442 <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	2b04      	cmp	r3, #4
 800341e:	d00b      	beq.n	8003438 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003424:	2b02      	cmp	r3, #2
 8003426:	d007      	beq.n	8003438 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800342c:	2b03      	cmp	r3, #3
 800342e:	d003      	beq.n	8003438 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003434:	2b07      	cmp	r3, #7
 8003436:	d102      	bne.n	800343e <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 8003438:	2302      	movs	r3, #2
 800343a:	61fb      	str	r3, [r7, #28]
 800343c:	e001      	b.n	8003442 <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 800343e:	2301      	movs	r3, #1
 8003440:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	461a      	mov	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	01db      	lsls	r3, r3, #7
 800344c:	4413      	add	r3, r2
 800344e:	3384      	adds	r3, #132	@ 0x84
 8003450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	6812      	ldr	r2, [r2, #0]
 8003456:	4611      	mov	r1, r2
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	01d2      	lsls	r2, r2, #7
 800345c:	440a      	add	r2, r1
 800345e:	3284      	adds	r2, #132	@ 0x84
 8003460:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8003464:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800346a:	69fa      	ldr	r2, [r7, #28]
 800346c:	fb02 f303 	mul.w	r3, r2, r3
 8003470:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	6859      	ldr	r1, [r3, #4]
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	1acb      	subs	r3, r1, r3
 800347c:	69f9      	ldr	r1, [r7, #28]
 800347e:	fb01 f303 	mul.w	r3, r1, r3
 8003482:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8003484:	68f9      	ldr	r1, [r7, #12]
 8003486:	6809      	ldr	r1, [r1, #0]
 8003488:	4608      	mov	r0, r1
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	01c9      	lsls	r1, r1, #7
 800348e:	4401      	add	r1, r0
 8003490:	3184      	adds	r1, #132	@ 0x84
 8003492:	4313      	orrs	r3, r2
 8003494:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	461a      	mov	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	01db      	lsls	r3, r3, #7
 80034a0:	4413      	add	r3, r2
 80034a2:	3384      	adds	r3, #132	@ 0x84
 80034a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4619      	mov	r1, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	01db      	lsls	r3, r3, #7
 80034b0:	440b      	add	r3, r1
 80034b2:	3384      	adds	r3, #132	@ 0x84
 80034b4:	4619      	mov	r1, r3
 80034b6:	4b14      	ldr	r3, [pc, #80]	@ (8003508 <LTDC_SetConfig+0x2e8>)
 80034b8:	4013      	ands	r3, r2
 80034ba:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	461a      	mov	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	01db      	lsls	r3, r3, #7
 80034c6:	4413      	add	r3, r2
 80034c8:	3384      	adds	r3, #132	@ 0x84
 80034ca:	461a      	mov	r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	461a      	mov	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	01db      	lsls	r3, r3, #7
 80034dc:	4413      	add	r3, r2
 80034de:	3384      	adds	r3, #132	@ 0x84
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	6812      	ldr	r2, [r2, #0]
 80034e6:	4611      	mov	r1, r2
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	01d2      	lsls	r2, r2, #7
 80034ec:	440a      	add	r2, r1
 80034ee:	3284      	adds	r2, #132	@ 0x84
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	6013      	str	r3, [r2, #0]
}
 80034f6:	bf00      	nop
 80034f8:	3724      	adds	r7, #36	@ 0x24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	fffff8f8 	.word	0xfffff8f8
 8003508:	fffff800 	.word	0xfffff800

0800350c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af02      	add	r7, sp, #8
 8003512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003514:	2300      	movs	r3, #0
 8003516:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003518:	f7ff f84c 	bl	80025b4 <HAL_GetTick>
 800351c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d102      	bne.n	800352a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	73fb      	strb	r3, [r7, #15]
 8003528:	e0a5      	b.n	8003676 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003534:	2b00      	cmp	r3, #0
 8003536:	f040 809e 	bne.w	8003676 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7fe f822 	bl	8001584 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003540:	f241 3188 	movw	r1, #5000	@ 0x1388
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f89d 	bl	8003684 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	4b4b      	ldr	r3, [pc, #300]	@ (8003680 <HAL_OSPI_Init+0x174>)
 8003552:	4013      	ands	r3, r2
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	68d1      	ldr	r1, [r2, #12]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6912      	ldr	r2, [r2, #16]
 800355c:	3a01      	subs	r2, #1
 800355e:	0412      	lsls	r2, r2, #16
 8003560:	4311      	orrs	r1, r2
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6952      	ldr	r2, [r2, #20]
 8003566:	3a01      	subs	r2, #1
 8003568:	0212      	lsls	r2, r2, #8
 800356a:	4311      	orrs	r1, r2
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003570:	4311      	orrs	r1, r2
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	69d2      	ldr	r2, [r2, #28]
 8003576:	4311      	orrs	r1, r2
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6812      	ldr	r2, [r2, #0]
 800357c:	430b      	orrs	r3, r1
 800357e:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1a      	ldr	r2, [r3, #32]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359a:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80035b0:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	3b01      	subs	r3, #1
 80035c2:	021a      	lsls	r2, r3, #8
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2200      	movs	r2, #0
 80035d6:	2120      	movs	r1, #32
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 fd4f 	bl	800407c <OSPI_WaitFlagStateUntilTimeout>
 80035de:	4603      	mov	r3, r0
 80035e0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d146      	bne.n	8003676 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f6:	1e5a      	subs	r2, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800361e:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f042 0201 	orr.w	r2, r2, #1
 8003644:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	2b02      	cmp	r3, #2
 800364c:	d107      	bne.n	800365e <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 0202 	orr.w	r2, r2, #2
 800365c:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003666:	d103      	bne.n	8003670 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	651a      	str	r2, [r3, #80]	@ 0x50
 800366e:	e002      	b.n	8003676 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2202      	movs	r2, #2
 8003674:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8003676:	7bfb      	ldrb	r3, [r7, #15]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	f8e0f8f4 	.word	0xf8e0f8f4

08003684 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
	...

080036a4 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b094      	sub	sp, #80	@ 0x50
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80036b6:	2300      	movs	r3, #0
 80036b8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a9d      	ldr	r2, [pc, #628]	@ (8003938 <HAL_OSPIM_Config+0x294>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d105      	bne.n	80036d2 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 80036ca:	2301      	movs	r3, #1
 80036cc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80036d0:	e004      	b.n	80036dc <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80036d2:	2301      	movs	r3, #1
 80036d4:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80036dc:	2300      	movs	r3, #0
 80036de:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80036e2:	e01d      	b.n	8003720 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 80036e4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80036e8:	3301      	adds	r3, #1
 80036ea:	b2d8      	uxtb	r0, r3
 80036ec:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80036f0:	f107 0114 	add.w	r1, r7, #20
 80036f4:	4613      	mov	r3, r2
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	4413      	add	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	440b      	add	r3, r1
 80036fe:	4619      	mov	r1, r3
 8003700:	f000 fcf4 	bl	80040ec <OSPIM_GetConfig>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d005      	beq.n	8003716 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2208      	movs	r2, #8
 8003714:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003716:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800371a:	3301      	adds	r3, #1
 800371c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8003720:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003724:	2b01      	cmp	r3, #1
 8003726:	d9dd      	bls.n	80036e4 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8003728:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800372c:	2b00      	cmp	r3, #0
 800372e:	f040 8499 	bne.w	8004064 <HAL_OSPIM_Config+0x9c0>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003732:	4b81      	ldr	r3, [pc, #516]	@ (8003938 <HAL_OSPIM_Config+0x294>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00b      	beq.n	8003756 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800373e:	4b7e      	ldr	r3, [pc, #504]	@ (8003938 <HAL_OSPIM_Config+0x294>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a7d      	ldr	r2, [pc, #500]	@ (8003938 <HAL_OSPIM_Config+0x294>)
 8003744:	f023 0301 	bic.w	r3, r3, #1
 8003748:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800374a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800374e:	f043 0301 	orr.w	r3, r3, #1
 8003752:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8003756:	4b79      	ldr	r3, [pc, #484]	@ (800393c <HAL_OSPIM_Config+0x298>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00b      	beq.n	800377a <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003762:	4b76      	ldr	r3, [pc, #472]	@ (800393c <HAL_OSPIM_Config+0x298>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a75      	ldr	r2, [pc, #468]	@ (800393c <HAL_OSPIM_Config+0x298>)
 8003768:	f023 0301 	bic.w	r3, r3, #1
 800376c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800376e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003772:	f043 0302 	orr.w	r3, r3, #2
 8003776:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800377a:	4971      	ldr	r1, [pc, #452]	@ (8003940 <HAL_OSPIM_Config+0x29c>)
 800377c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800377e:	4613      	mov	r3, r2
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	4413      	add	r3, r2
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	3350      	adds	r3, #80	@ 0x50
 8003788:	443b      	add	r3, r7
 800378a:	3b34      	subs	r3, #52	@ 0x34
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	3b01      	subs	r3, #1
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	440b      	add	r3, r1
 8003794:	6859      	ldr	r1, [r3, #4]
 8003796:	486a      	ldr	r0, [pc, #424]	@ (8003940 <HAL_OSPIM_Config+0x29c>)
 8003798:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800379a:	4613      	mov	r3, r2
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	4413      	add	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	3350      	adds	r3, #80	@ 0x50
 80037a4:	443b      	add	r3, r7
 80037a6:	3b34      	subs	r3, #52	@ 0x34
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4403      	add	r3, r0
 80037b4:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80037b6:	4b62      	ldr	r3, [pc, #392]	@ (8003940 <HAL_OSPIM_Config+0x29c>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 80c0 	beq.w	8003944 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80037c4:	4b5e      	ldr	r3, [pc, #376]	@ (8003940 <HAL_OSPIM_Config+0x29c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a5d      	ldr	r2, [pc, #372]	@ (8003940 <HAL_OSPIM_Config+0x29c>)
 80037ca:	f023 0301 	bic.w	r3, r3, #1
 80037ce:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 80037d0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	f040 8162 	bne.w	8003a9e <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 80037da:	4959      	ldr	r1, [pc, #356]	@ (8003940 <HAL_OSPIM_Config+0x29c>)
 80037dc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80037e0:	4613      	mov	r3, r2
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	4413      	add	r3, r2
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	3350      	adds	r3, #80	@ 0x50
 80037ea:	443b      	add	r3, r7
 80037ec:	3b3c      	subs	r3, #60	@ 0x3c
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	3b01      	subs	r3, #1
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	6859      	ldr	r1, [r3, #4]
 80037f8:	4851      	ldr	r0, [pc, #324]	@ (8003940 <HAL_OSPIM_Config+0x29c>)
 80037fa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80037fe:	4613      	mov	r3, r2
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	4413      	add	r3, r2
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	3350      	adds	r3, #80	@ 0x50
 8003808:	443b      	add	r3, r7
 800380a:	3b3c      	subs	r3, #60	@ 0x3c
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	3b01      	subs	r3, #1
 8003810:	f041 0202 	orr.w	r2, r1, #2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4403      	add	r3, r0
 8003818:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800381a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800381e:	4613      	mov	r3, r2
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	4413      	add	r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	3350      	adds	r3, #80	@ 0x50
 8003828:	443b      	add	r3, r7
 800382a:	3b38      	subs	r3, #56	@ 0x38
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d01f      	beq.n	8003872 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8003832:	4943      	ldr	r1, [pc, #268]	@ (8003940 <HAL_OSPIM_Config+0x29c>)
 8003834:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003838:	4613      	mov	r3, r2
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	4413      	add	r3, r2
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	3350      	adds	r3, #80	@ 0x50
 8003842:	443b      	add	r3, r7
 8003844:	3b38      	subs	r3, #56	@ 0x38
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	3b01      	subs	r3, #1
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	6859      	ldr	r1, [r3, #4]
 8003850:	483b      	ldr	r0, [pc, #236]	@ (8003940 <HAL_OSPIM_Config+0x29c>)
 8003852:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003856:	4613      	mov	r3, r2
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	4413      	add	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	3350      	adds	r3, #80	@ 0x50
 8003860:	443b      	add	r3, r7
 8003862:	3b38      	subs	r3, #56	@ 0x38
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	3b01      	subs	r3, #1
 8003868:	f041 0220 	orr.w	r2, r1, #32
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4403      	add	r3, r0
 8003870:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003872:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003876:	4613      	mov	r3, r2
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	4413      	add	r3, r2
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	3350      	adds	r3, #80	@ 0x50
 8003880:	443b      	add	r3, r7
 8003882:	3b30      	subs	r3, #48	@ 0x30
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d023      	beq.n	80038d2 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800388a:	492d      	ldr	r1, [pc, #180]	@ (8003940 <HAL_OSPIM_Config+0x29c>)
 800388c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003890:	4613      	mov	r3, r2
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	4413      	add	r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	3350      	adds	r3, #80	@ 0x50
 800389a:	443b      	add	r3, r7
 800389c:	3b30      	subs	r3, #48	@ 0x30
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3b01      	subs	r3, #1
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	6859      	ldr	r1, [r3, #4]
 80038ac:	4824      	ldr	r0, [pc, #144]	@ (8003940 <HAL_OSPIM_Config+0x29c>)
 80038ae:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80038b2:	4613      	mov	r3, r2
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	4413      	add	r3, r2
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	3350      	adds	r3, #80	@ 0x50
 80038bc:	443b      	add	r3, r7
 80038be:	3b30      	subs	r3, #48	@ 0x30
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4403      	add	r3, r0
 80038d0:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80038d2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80038d6:	4613      	mov	r3, r2
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	4413      	add	r3, r2
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	3350      	adds	r3, #80	@ 0x50
 80038e0:	443b      	add	r3, r7
 80038e2:	3b2c      	subs	r3, #44	@ 0x2c
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 80d9 	beq.w	8003a9e <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 80038ec:	4914      	ldr	r1, [pc, #80]	@ (8003940 <HAL_OSPIM_Config+0x29c>)
 80038ee:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80038f2:	4613      	mov	r3, r2
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	4413      	add	r3, r2
 80038f8:	00db      	lsls	r3, r3, #3
 80038fa:	3350      	adds	r3, #80	@ 0x50
 80038fc:	443b      	add	r3, r7
 80038fe:	3b2c      	subs	r3, #44	@ 0x2c
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3b01      	subs	r3, #1
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	440b      	add	r3, r1
 800390c:	6859      	ldr	r1, [r3, #4]
 800390e:	480c      	ldr	r0, [pc, #48]	@ (8003940 <HAL_OSPIM_Config+0x29c>)
 8003910:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003914:	4613      	mov	r3, r2
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	4413      	add	r3, r2
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	3350      	adds	r3, #80	@ 0x50
 800391e:	443b      	add	r3, r7
 8003920:	3b2c      	subs	r3, #44	@ 0x2c
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	3b01      	subs	r3, #1
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4403      	add	r3, r0
 8003932:	605a      	str	r2, [r3, #4]
 8003934:	e0b3      	b.n	8003a9e <HAL_OSPIM_Config+0x3fa>
 8003936:	bf00      	nop
 8003938:	52005000 	.word	0x52005000
 800393c:	5200a000 	.word	0x5200a000
 8003940:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8003944:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003946:	4613      	mov	r3, r2
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	4413      	add	r3, r2
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	3350      	adds	r3, #80	@ 0x50
 8003950:	443b      	add	r3, r7
 8003952:	3b3c      	subs	r3, #60	@ 0x3c
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 80a1 	beq.w	8003a9e <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800395c:	4995      	ldr	r1, [pc, #596]	@ (8003bb4 <HAL_OSPIM_Config+0x510>)
 800395e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003960:	4613      	mov	r3, r2
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	4413      	add	r3, r2
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	3350      	adds	r3, #80	@ 0x50
 800396a:	443b      	add	r3, r7
 800396c:	3b3c      	subs	r3, #60	@ 0x3c
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3b01      	subs	r3, #1
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	6859      	ldr	r1, [r3, #4]
 8003978:	488e      	ldr	r0, [pc, #568]	@ (8003bb4 <HAL_OSPIM_Config+0x510>)
 800397a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800397c:	4613      	mov	r3, r2
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	4413      	add	r3, r2
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	3350      	adds	r3, #80	@ 0x50
 8003986:	443b      	add	r3, r7
 8003988:	3b3c      	subs	r3, #60	@ 0x3c
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	3b01      	subs	r3, #1
 800398e:	f021 0201 	bic.w	r2, r1, #1
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4403      	add	r3, r0
 8003996:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8003998:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800399a:	4613      	mov	r3, r2
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	4413      	add	r3, r2
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	3350      	adds	r3, #80	@ 0x50
 80039a4:	443b      	add	r3, r7
 80039a6:	3b38      	subs	r3, #56	@ 0x38
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d01d      	beq.n	80039ea <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80039ae:	4981      	ldr	r1, [pc, #516]	@ (8003bb4 <HAL_OSPIM_Config+0x510>)
 80039b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039b2:	4613      	mov	r3, r2
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	4413      	add	r3, r2
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	3350      	adds	r3, #80	@ 0x50
 80039bc:	443b      	add	r3, r7
 80039be:	3b38      	subs	r3, #56	@ 0x38
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	440b      	add	r3, r1
 80039c8:	6859      	ldr	r1, [r3, #4]
 80039ca:	487a      	ldr	r0, [pc, #488]	@ (8003bb4 <HAL_OSPIM_Config+0x510>)
 80039cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039ce:	4613      	mov	r3, r2
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	4413      	add	r3, r2
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	3350      	adds	r3, #80	@ 0x50
 80039d8:	443b      	add	r3, r7
 80039da:	3b38      	subs	r3, #56	@ 0x38
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	3b01      	subs	r3, #1
 80039e0:	f021 0210 	bic.w	r2, r1, #16
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4403      	add	r3, r0
 80039e8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80039ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039ec:	4613      	mov	r3, r2
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	4413      	add	r3, r2
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	3350      	adds	r3, #80	@ 0x50
 80039f6:	443b      	add	r3, r7
 80039f8:	3b30      	subs	r3, #48	@ 0x30
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d021      	beq.n	8003a44 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003a00:	496c      	ldr	r1, [pc, #432]	@ (8003bb4 <HAL_OSPIM_Config+0x510>)
 8003a02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a04:	4613      	mov	r3, r2
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	4413      	add	r3, r2
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	3350      	adds	r3, #80	@ 0x50
 8003a0e:	443b      	add	r3, r7
 8003a10:	3b30      	subs	r3, #48	@ 0x30
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3b01      	subs	r3, #1
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	6859      	ldr	r1, [r3, #4]
 8003a20:	4864      	ldr	r0, [pc, #400]	@ (8003bb4 <HAL_OSPIM_Config+0x510>)
 8003a22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a24:	4613      	mov	r3, r2
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	4413      	add	r3, r2
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	3350      	adds	r3, #80	@ 0x50
 8003a2e:	443b      	add	r3, r7
 8003a30:	3b30      	subs	r3, #48	@ 0x30
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	3b01      	subs	r3, #1
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4403      	add	r3, r0
 8003a42:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003a44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a46:	4613      	mov	r3, r2
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	4413      	add	r3, r2
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	3350      	adds	r3, #80	@ 0x50
 8003a50:	443b      	add	r3, r7
 8003a52:	3b2c      	subs	r3, #44	@ 0x2c
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d021      	beq.n	8003a9e <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003a5a:	4956      	ldr	r1, [pc, #344]	@ (8003bb4 <HAL_OSPIM_Config+0x510>)
 8003a5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a5e:	4613      	mov	r3, r2
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	4413      	add	r3, r2
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	3350      	adds	r3, #80	@ 0x50
 8003a68:	443b      	add	r3, r7
 8003a6a:	3b2c      	subs	r3, #44	@ 0x2c
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	440b      	add	r3, r1
 8003a78:	6859      	ldr	r1, [r3, #4]
 8003a7a:	484e      	ldr	r0, [pc, #312]	@ (8003bb4 <HAL_OSPIM_Config+0x510>)
 8003a7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a7e:	4613      	mov	r3, r2
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	4413      	add	r3, r2
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	3350      	adds	r3, #80	@ 0x50
 8003a88:	443b      	add	r3, r7
 8003a8a:	3b2c      	subs	r3, #44	@ 0x2c
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4403      	add	r3, r0
 8003a9c:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	6819      	ldr	r1, [r3, #0]
 8003aa2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	4413      	add	r3, r2
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	3350      	adds	r3, #80	@ 0x50
 8003ab0:	443b      	add	r3, r7
 8003ab2:	3b3c      	subs	r3, #60	@ 0x3c
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4299      	cmp	r1, r3
 8003ab8:	d03c      	beq.n	8003b34 <HAL_OSPIM_Config+0x490>
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	6899      	ldr	r1, [r3, #8]
 8003abe:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	4413      	add	r3, r2
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	3350      	adds	r3, #80	@ 0x50
 8003acc:	443b      	add	r3, r7
 8003ace:	3b34      	subs	r3, #52	@ 0x34
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4299      	cmp	r1, r3
 8003ad4:	d02e      	beq.n	8003b34 <HAL_OSPIM_Config+0x490>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	6859      	ldr	r1, [r3, #4]
 8003ada:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003ade:	4613      	mov	r3, r2
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	4413      	add	r3, r2
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	3350      	adds	r3, #80	@ 0x50
 8003ae8:	443b      	add	r3, r7
 8003aea:	3b38      	subs	r3, #56	@ 0x38
 8003aec:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 8003aee:	4299      	cmp	r1, r3
 8003af0:	d103      	bne.n	8003afa <HAL_OSPIM_Config+0x456>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d11c      	bne.n	8003b34 <HAL_OSPIM_Config+0x490>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	68d9      	ldr	r1, [r3, #12]
 8003afe:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003b02:	4613      	mov	r3, r2
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	4413      	add	r3, r2
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	3350      	adds	r3, #80	@ 0x50
 8003b0c:	443b      	add	r3, r7
 8003b0e:	3b30      	subs	r3, #48	@ 0x30
 8003b10:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8003b12:	4299      	cmp	r1, r3
 8003b14:	d00e      	beq.n	8003b34 <HAL_OSPIM_Config+0x490>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	6919      	ldr	r1, [r3, #16]
 8003b1a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003b1e:	4613      	mov	r3, r2
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	4413      	add	r3, r2
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	3350      	adds	r3, #80	@ 0x50
 8003b28:	443b      	add	r3, r7
 8003b2a:	3b2c      	subs	r3, #44	@ 0x2c
 8003b2c:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003b2e:	4299      	cmp	r1, r3
 8003b30:	f040 810e 	bne.w	8003d50 <HAL_OSPIM_Config+0x6ac>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	6819      	ldr	r1, [r3, #0]
 8003b38:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	4413      	add	r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	3350      	adds	r3, #80	@ 0x50
 8003b46:	443b      	add	r3, r7
 8003b48:	3b3c      	subs	r3, #60	@ 0x3c
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4299      	cmp	r1, r3
 8003b4e:	d133      	bne.n	8003bb8 <HAL_OSPIM_Config+0x514>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	6859      	ldr	r1, [r3, #4]
 8003b54:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003b58:	4613      	mov	r3, r2
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	4413      	add	r3, r2
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	3350      	adds	r3, #80	@ 0x50
 8003b62:	443b      	add	r3, r7
 8003b64:	3b38      	subs	r3, #56	@ 0x38
 8003b66:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8003b68:	4299      	cmp	r1, r3
 8003b6a:	d125      	bne.n	8003bb8 <HAL_OSPIM_Config+0x514>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	68d9      	ldr	r1, [r3, #12]
 8003b70:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003b74:	4613      	mov	r3, r2
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	4413      	add	r3, r2
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	3350      	adds	r3, #80	@ 0x50
 8003b7e:	443b      	add	r3, r7
 8003b80:	3b30      	subs	r3, #48	@ 0x30
 8003b82:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8003b84:	4299      	cmp	r1, r3
 8003b86:	d117      	bne.n	8003bb8 <HAL_OSPIM_Config+0x514>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	6919      	ldr	r1, [r3, #16]
 8003b8c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003b90:	4613      	mov	r3, r2
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	4413      	add	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	3350      	adds	r3, #80	@ 0x50
 8003b9a:	443b      	add	r3, r7
 8003b9c:	3b2c      	subs	r3, #44	@ 0x2c
 8003b9e:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8003ba0:	4299      	cmp	r1, r3
 8003ba2:	d109      	bne.n	8003bb8 <HAL_OSPIM_Config+0x514>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8003ba4:	4b03      	ldr	r3, [pc, #12]	@ (8003bb4 <HAL_OSPIM_Config+0x510>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a02      	ldr	r2, [pc, #8]	@ (8003bb4 <HAL_OSPIM_Config+0x510>)
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	6013      	str	r3, [r2, #0]
 8003bb0:	e0ce      	b.n	8003d50 <HAL_OSPIM_Config+0x6ac>
 8003bb2:	bf00      	nop
 8003bb4:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8003bb8:	49bb      	ldr	r1, [pc, #748]	@ (8003ea8 <HAL_OSPIM_Config+0x804>)
 8003bba:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	4413      	add	r3, r2
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	3350      	adds	r3, #80	@ 0x50
 8003bc8:	443b      	add	r3, r7
 8003bca:	3b3c      	subs	r3, #60	@ 0x3c
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	440b      	add	r3, r1
 8003bd4:	6859      	ldr	r1, [r3, #4]
 8003bd6:	48b4      	ldr	r0, [pc, #720]	@ (8003ea8 <HAL_OSPIM_Config+0x804>)
 8003bd8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003bdc:	4613      	mov	r3, r2
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	4413      	add	r3, r2
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	3350      	adds	r3, #80	@ 0x50
 8003be6:	443b      	add	r3, r7
 8003be8:	3b3c      	subs	r3, #60	@ 0x3c
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3b01      	subs	r3, #1
 8003bee:	f021 0201 	bic.w	r2, r1, #1
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4403      	add	r3, r0
 8003bf6:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8003bf8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	4413      	add	r3, r2
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	3350      	adds	r3, #80	@ 0x50
 8003c06:	443b      	add	r3, r7
 8003c08:	3b38      	subs	r3, #56	@ 0x38
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d01f      	beq.n	8003c50 <HAL_OSPIM_Config+0x5ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8003c10:	49a5      	ldr	r1, [pc, #660]	@ (8003ea8 <HAL_OSPIM_Config+0x804>)
 8003c12:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003c16:	4613      	mov	r3, r2
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	4413      	add	r3, r2
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	3350      	adds	r3, #80	@ 0x50
 8003c20:	443b      	add	r3, r7
 8003c22:	3b38      	subs	r3, #56	@ 0x38
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	440b      	add	r3, r1
 8003c2c:	6859      	ldr	r1, [r3, #4]
 8003c2e:	489e      	ldr	r0, [pc, #632]	@ (8003ea8 <HAL_OSPIM_Config+0x804>)
 8003c30:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003c34:	4613      	mov	r3, r2
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	4413      	add	r3, r2
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	3350      	adds	r3, #80	@ 0x50
 8003c3e:	443b      	add	r3, r7
 8003c40:	3b38      	subs	r3, #56	@ 0x38
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3b01      	subs	r3, #1
 8003c46:	f021 0210 	bic.w	r2, r1, #16
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4403      	add	r3, r0
 8003c4e:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8003c50:	4995      	ldr	r1, [pc, #596]	@ (8003ea8 <HAL_OSPIM_Config+0x804>)
 8003c52:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003c56:	4613      	mov	r3, r2
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	4413      	add	r3, r2
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	3350      	adds	r3, #80	@ 0x50
 8003c60:	443b      	add	r3, r7
 8003c62:	3b34      	subs	r3, #52	@ 0x34
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	440b      	add	r3, r1
 8003c6c:	6859      	ldr	r1, [r3, #4]
 8003c6e:	488e      	ldr	r0, [pc, #568]	@ (8003ea8 <HAL_OSPIM_Config+0x804>)
 8003c70:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003c74:	4613      	mov	r3, r2
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	4413      	add	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	3350      	adds	r3, #80	@ 0x50
 8003c7e:	443b      	add	r3, r7
 8003c80:	3b34      	subs	r3, #52	@ 0x34
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	3b01      	subs	r3, #1
 8003c86:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4403      	add	r3, r0
 8003c8e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003c90:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003c94:	4613      	mov	r3, r2
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	4413      	add	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	3350      	adds	r3, #80	@ 0x50
 8003c9e:	443b      	add	r3, r7
 8003ca0:	3b30      	subs	r3, #48	@ 0x30
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d023      	beq.n	8003cf0 <HAL_OSPIM_Config+0x64c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003ca8:	497f      	ldr	r1, [pc, #508]	@ (8003ea8 <HAL_OSPIM_Config+0x804>)
 8003caa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003cae:	4613      	mov	r3, r2
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	4413      	add	r3, r2
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	3350      	adds	r3, #80	@ 0x50
 8003cb8:	443b      	add	r3, r7
 8003cba:	3b30      	subs	r3, #48	@ 0x30
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	6859      	ldr	r1, [r3, #4]
 8003cca:	4877      	ldr	r0, [pc, #476]	@ (8003ea8 <HAL_OSPIM_Config+0x804>)
 8003ccc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	4413      	add	r3, r2
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	3350      	adds	r3, #80	@ 0x50
 8003cda:	443b      	add	r3, r7
 8003cdc:	3b30      	subs	r3, #48	@ 0x30
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4403      	add	r3, r0
 8003cee:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003cf0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	4413      	add	r3, r2
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	3350      	adds	r3, #80	@ 0x50
 8003cfe:	443b      	add	r3, r7
 8003d00:	3b2c      	subs	r3, #44	@ 0x2c
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d023      	beq.n	8003d50 <HAL_OSPIM_Config+0x6ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003d08:	4967      	ldr	r1, [pc, #412]	@ (8003ea8 <HAL_OSPIM_Config+0x804>)
 8003d0a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003d0e:	4613      	mov	r3, r2
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	4413      	add	r3, r2
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	3350      	adds	r3, #80	@ 0x50
 8003d18:	443b      	add	r3, r7
 8003d1a:	3b2c      	subs	r3, #44	@ 0x2c
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	440b      	add	r3, r1
 8003d28:	6859      	ldr	r1, [r3, #4]
 8003d2a:	485f      	ldr	r0, [pc, #380]	@ (8003ea8 <HAL_OSPIM_Config+0x804>)
 8003d2c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003d30:	4613      	mov	r3, r2
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	4413      	add	r3, r2
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	3350      	adds	r3, #80	@ 0x50
 8003d3a:	443b      	add	r3, r7
 8003d3c:	3b2c      	subs	r3, #44	@ 0x2c
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	3b01      	subs	r3, #1
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4403      	add	r3, r0
 8003d4e:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8003d50:	4a55      	ldr	r2, [pc, #340]	@ (8003ea8 <HAL_OSPIM_Config+0x804>)
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4413      	add	r3, r2
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d64:	025b      	lsls	r3, r3, #9
 8003d66:	431a      	orrs	r2, r3
 8003d68:	494f      	ldr	r1, [pc, #316]	@ (8003ea8 <HAL_OSPIM_Config+0x804>)
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	440b      	add	r3, r1
 8003d78:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	1e5a      	subs	r2, r3, #1
 8003d80:	4b49      	ldr	r3, [pc, #292]	@ (8003ea8 <HAL_OSPIM_Config+0x804>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	0c1b      	lsrs	r3, r3, #16
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d90a      	bls.n	8003da2 <HAL_OSPIM_Config+0x6fe>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8003d8c:	4b46      	ldr	r3, [pc, #280]	@ (8003ea8 <HAL_OSPIM_Config+0x804>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	041b      	lsls	r3, r3, #16
 8003d9c:	4942      	ldr	r1, [pc, #264]	@ (8003ea8 <HAL_OSPIM_Config+0x804>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8003da2:	4b41      	ldr	r3, [pc, #260]	@ (8003ea8 <HAL_OSPIM_Config+0x804>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 809a 	beq.w	8003ee4 <HAL_OSPIM_Config+0x840>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8003db0:	4a3d      	ldr	r2, [pc, #244]	@ (8003ea8 <HAL_OSPIM_Config+0x804>)
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4413      	add	r3, r2
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f023 0203 	bic.w	r2, r3, #3
 8003dc2:	4939      	ldr	r1, [pc, #228]	@ (8003ea8 <HAL_OSPIM_Config+0x804>)
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	f042 0201 	orr.w	r2, r2, #1
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d011      	beq.n	8003e00 <HAL_OSPIM_Config+0x75c>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8003ddc:	4a32      	ldr	r2, [pc, #200]	@ (8003ea8 <HAL_OSPIM_Config+0x804>)
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4413      	add	r3, r2
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003dee:	492e      	ldr	r1, [pc, #184]	@ (8003ea8 <HAL_OSPIM_Config+0x804>)
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	3b01      	subs	r3, #1
 8003df6:	f042 0210 	orr.w	r2, r2, #16
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d016      	beq.n	8003e3a <HAL_OSPIM_Config+0x796>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003e0c:	4a26      	ldr	r2, [pc, #152]	@ (8003ea8 <HAL_OSPIM_Config+0x804>)
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003e22:	4921      	ldr	r1, [pc, #132]	@ (8003ea8 <HAL_OSPIM_Config+0x804>)
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	605a      	str	r2, [r3, #4]
 8003e38:	e019      	b.n	8003e6e <HAL_OSPIM_Config+0x7ca>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d015      	beq.n	8003e6e <HAL_OSPIM_Config+0x7ca>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003e42:	4a19      	ldr	r2, [pc, #100]	@ (8003ea8 <HAL_OSPIM_Config+0x804>)
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8003e58:	4913      	ldr	r1, [pc, #76]	@ (8003ea8 <HAL_OSPIM_Config+0x804>)
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d018      	beq.n	8003eac <HAL_OSPIM_Config+0x808>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003e7a:	4a0b      	ldr	r2, [pc, #44]	@ (8003ea8 <HAL_OSPIM_Config+0x804>)
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	3b01      	subs	r3, #1
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003e90:	4905      	ldr	r1, [pc, #20]	@ (8003ea8 <HAL_OSPIM_Config+0x804>)
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	440b      	add	r3, r1
 8003ea4:	605a      	str	r2, [r3, #4]
 8003ea6:	e0c5      	b.n	8004034 <HAL_OSPIM_Config+0x990>
 8003ea8:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 80bf 	beq.w	8004034 <HAL_OSPIM_Config+0x990>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003eb6:	4a6e      	ldr	r2, [pc, #440]	@ (8004070 <HAL_OSPIM_Config+0x9cc>)
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8003ecc:	4968      	ldr	r1, [pc, #416]	@ (8004070 <HAL_OSPIM_Config+0x9cc>)
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	440b      	add	r3, r1
 8003ee0:	605a      	str	r2, [r3, #4]
 8003ee2:	e0a7      	b.n	8004034 <HAL_OSPIM_Config+0x990>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8003ee4:	4a62      	ldr	r2, [pc, #392]	@ (8004070 <HAL_OSPIM_Config+0x9cc>)
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4413      	add	r3, r2
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f023 0203 	bic.w	r2, r3, #3
 8003ef6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	431a      	orrs	r2, r3
 8003efc:	495c      	ldr	r1, [pc, #368]	@ (8004070 <HAL_OSPIM_Config+0x9cc>)
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	3b01      	subs	r3, #1
 8003f04:	f042 0201 	orr.w	r2, r2, #1
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	440b      	add	r3, r1
 8003f0c:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d014      	beq.n	8003f40 <HAL_OSPIM_Config+0x89c>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8003f16:	4a56      	ldr	r2, [pc, #344]	@ (8004070 <HAL_OSPIM_Config+0x9cc>)
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4413      	add	r3, r2
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f2a:	015b      	lsls	r3, r3, #5
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	4950      	ldr	r1, [pc, #320]	@ (8004070 <HAL_OSPIM_Config+0x9cc>)
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	3b01      	subs	r3, #1
 8003f36:	f042 0210 	orr.w	r2, r2, #16
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	440b      	add	r3, r1
 8003f3e:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d019      	beq.n	8003f80 <HAL_OSPIM_Config+0x8dc>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003f4c:	4a48      	ldr	r2, [pc, #288]	@ (8004070 <HAL_OSPIM_Config+0x9cc>)
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003f62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f64:	049b      	lsls	r3, r3, #18
 8003f66:	431a      	orrs	r2, r3
 8003f68:	4941      	ldr	r1, [pc, #260]	@ (8004070 <HAL_OSPIM_Config+0x9cc>)
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	605a      	str	r2, [r3, #4]
 8003f7e:	e01c      	b.n	8003fba <HAL_OSPIM_Config+0x916>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d018      	beq.n	8003fba <HAL_OSPIM_Config+0x916>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003f88:	4a39      	ldr	r2, [pc, #228]	@ (8004070 <HAL_OSPIM_Config+0x9cc>)
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8003f9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fa0:	069b      	lsls	r3, r3, #26
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	4932      	ldr	r1, [pc, #200]	@ (8004070 <HAL_OSPIM_Config+0x9cc>)
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	3b01      	subs	r3, #1
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	440b      	add	r3, r1
 8003fb8:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d019      	beq.n	8003ffa <HAL_OSPIM_Config+0x956>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003fc6:	4a2a      	ldr	r2, [pc, #168]	@ (8004070 <HAL_OSPIM_Config+0x9cc>)
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003fdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fde:	049b      	lsls	r3, r3, #18
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	4923      	ldr	r1, [pc, #140]	@ (8004070 <HAL_OSPIM_Config+0x9cc>)
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	605a      	str	r2, [r3, #4]
 8003ff8:	e01c      	b.n	8004034 <HAL_OSPIM_Config+0x990>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d018      	beq.n	8004034 <HAL_OSPIM_Config+0x990>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004002:	4a1b      	ldr	r2, [pc, #108]	@ (8004070 <HAL_OSPIM_Config+0x9cc>)
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	3b01      	subs	r3, #1
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8004018:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800401a:	069b      	lsls	r3, r3, #26
 800401c:	431a      	orrs	r2, r3
 800401e:	4914      	ldr	r1, [pc, #80]	@ (8004070 <HAL_OSPIM_Config+0x9cc>)
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	3b01      	subs	r3, #1
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	440b      	add	r3, r1
 8004032:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8004034:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	d005      	beq.n	800404c <HAL_OSPIM_Config+0x9a8>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004040:	4b0c      	ldr	r3, [pc, #48]	@ (8004074 <HAL_OSPIM_Config+0x9d0>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a0b      	ldr	r2, [pc, #44]	@ (8004074 <HAL_OSPIM_Config+0x9d0>)
 8004046:	f043 0301 	orr.w	r3, r3, #1
 800404a:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800404c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d005      	beq.n	8004064 <HAL_OSPIM_Config+0x9c0>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004058:	4b07      	ldr	r3, [pc, #28]	@ (8004078 <HAL_OSPIM_Config+0x9d4>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a06      	ldr	r2, [pc, #24]	@ (8004078 <HAL_OSPIM_Config+0x9d4>)
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8004064:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8004068:	4618      	mov	r0, r3
 800406a:	3750      	adds	r7, #80	@ 0x50
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	5200b400 	.word	0x5200b400
 8004074:	52005000 	.word	0x52005000
 8004078:	5200a000 	.word	0x5200a000

0800407c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	603b      	str	r3, [r7, #0]
 8004088:	4613      	mov	r3, r2
 800408a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800408c:	e01a      	b.n	80040c4 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004094:	d016      	beq.n	80040c4 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004096:	f7fe fa8d 	bl	80025b4 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d302      	bcc.n	80040ac <OSPI_WaitFlagStateUntilTimeout+0x30>
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10b      	bne.n	80040c4 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040b2:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b8:	f043 0201 	orr.w	r2, r3, #1
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e00e      	b.n	80040e2 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6a1a      	ldr	r2, [r3, #32]
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	4013      	ands	r3, r2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	bf14      	ite	ne
 80040d2:	2301      	movne	r3, #1
 80040d4:	2300      	moveq	r3, #0
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	461a      	mov	r2, r3
 80040da:	79fb      	ldrb	r3, [r7, #7]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d1d6      	bne.n	800408e <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
	...

080040ec <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	4603      	mov	r3, r0
 80040f4:	6039      	str	r1, [r7, #0]
 80040f6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004100:	79fb      	ldrb	r3, [r7, #7]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d005      	beq.n	8004112 <OSPIM_GetConfig+0x26>
 8004106:	79fb      	ldrb	r3, [r7, #7]
 8004108:	2b02      	cmp	r3, #2
 800410a:	d802      	bhi.n	8004112 <OSPIM_GetConfig+0x26>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d102      	bne.n	8004118 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	75fb      	strb	r3, [r7, #23]
 8004116:	e098      	b.n	800424a <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	2200      	movs	r2, #0
 800411c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2200      	movs	r2, #0
 8004122:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2200      	movs	r2, #0
 8004128:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2200      	movs	r2, #0
 800412e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	2200      	movs	r2, #0
 8004134:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8004136:	79fb      	ldrb	r3, [r7, #7]
 8004138:	2b02      	cmp	r3, #2
 800413a:	d10b      	bne.n	8004154 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 800413c:	4b46      	ldr	r3, [pc, #280]	@ (8004258 <OSPIM_GetConfig+0x16c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d102      	bne.n	800414e <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8004148:	4b44      	ldr	r3, [pc, #272]	@ (800425c <OSPIM_GetConfig+0x170>)
 800414a:	613b      	str	r3, [r7, #16]
 800414c:	e002      	b.n	8004154 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800414e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004152:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004154:	2300      	movs	r3, #0
 8004156:	60fb      	str	r3, [r7, #12]
 8004158:	e074      	b.n	8004244 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800415a:	4a3f      	ldr	r2, [pc, #252]	@ (8004258 <OSPIM_GetConfig+0x16c>)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	4053      	eors	r3, r2
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d103      	bne.n	8004186 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	1c5a      	adds	r2, r3, #1
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f003 0310 	and.w	r3, r3, #16
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00a      	beq.n	80041a6 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	4053      	eors	r3, r2
 8004196:	f003 0320 	and.w	r3, r3, #32
 800419a:	2b00      	cmp	r3, #0
 800419c:	d103      	bne.n	80041a6 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	4053      	eors	r3, r2
 80041b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d103      	bne.n	80041c6 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	1c5a      	adds	r2, r3, #1
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d018      	beq.n	8004202 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	4053      	eors	r3, r2
 80041d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d111      	bne.n	8004202 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d106      	bne.n	80041f6 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	3301      	adds	r3, #1
 80041ec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	60da      	str	r2, [r3, #12]
 80041f4:	e005      	b.n	8004202 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	3301      	adds	r3, #1
 80041fa:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d018      	beq.n	800423e <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	4053      	eors	r3, r2
 8004212:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d111      	bne.n	800423e <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d106      	bne.n	8004232 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	3301      	adds	r3, #1
 8004228:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	611a      	str	r2, [r3, #16]
 8004230:	e005      	b.n	800423e <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	3301      	adds	r3, #1
 8004236:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	3301      	adds	r3, #1
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d987      	bls.n	800415a <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800424a:	7dfb      	ldrb	r3, [r7, #23]
}
 800424c:	4618      	mov	r0, r3
 800424e:	371c      	adds	r7, #28
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	5200b400 	.word	0x5200b400
 800425c:	04040222 	.word	0x04040222

08004260 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8004264:	4b05      	ldr	r3, [pc, #20]	@ (800427c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a04      	ldr	r2, [pc, #16]	@ (800427c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800426a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800426e:	6013      	str	r3, [r2, #0]
}
 8004270:	bf00      	nop
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	58024800 	.word	0x58024800

08004280 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004288:	4b29      	ldr	r3, [pc, #164]	@ (8004330 <HAL_PWREx_ConfigSupply+0xb0>)
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	2b06      	cmp	r3, #6
 8004292:	d00a      	beq.n	80042aa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004294:	4b26      	ldr	r3, [pc, #152]	@ (8004330 <HAL_PWREx_ConfigSupply+0xb0>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d001      	beq.n	80042a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e040      	b.n	8004328 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80042a6:	2300      	movs	r3, #0
 80042a8:	e03e      	b.n	8004328 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80042aa:	4b21      	ldr	r3, [pc, #132]	@ (8004330 <HAL_PWREx_ConfigSupply+0xb0>)
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80042b2:	491f      	ldr	r1, [pc, #124]	@ (8004330 <HAL_PWREx_ConfigSupply+0xb0>)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80042ba:	f7fe f97b 	bl	80025b4 <HAL_GetTick>
 80042be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80042c0:	e009      	b.n	80042d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80042c2:	f7fe f977 	bl	80025b4 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042d0:	d901      	bls.n	80042d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e028      	b.n	8004328 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80042d6:	4b16      	ldr	r3, [pc, #88]	@ (8004330 <HAL_PWREx_ConfigSupply+0xb0>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042e2:	d1ee      	bne.n	80042c2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b1e      	cmp	r3, #30
 80042e8:	d008      	beq.n	80042fc <HAL_PWREx_ConfigSupply+0x7c>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80042ee:	d005      	beq.n	80042fc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b1d      	cmp	r3, #29
 80042f4:	d002      	beq.n	80042fc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b2d      	cmp	r3, #45	@ 0x2d
 80042fa:	d114      	bne.n	8004326 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80042fc:	f7fe f95a 	bl	80025b4 <HAL_GetTick>
 8004300:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004302:	e009      	b.n	8004318 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004304:	f7fe f956 	bl	80025b4 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004312:	d901      	bls.n	8004318 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e007      	b.n	8004328 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004318:	4b05      	ldr	r3, [pc, #20]	@ (8004330 <HAL_PWREx_ConfigSupply+0xb0>)
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004324:	d1ee      	bne.n	8004304 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	58024800 	.word	0x58024800

08004334 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08c      	sub	sp, #48	@ 0x30
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d102      	bne.n	8004348 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	f000 bc1f 	b.w	8004b86 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 80b3 	beq.w	80044bc <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004356:	4b95      	ldr	r3, [pc, #596]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800435e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004360:	4b92      	ldr	r3, [pc, #584]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 8004362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004364:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004368:	2b10      	cmp	r3, #16
 800436a:	d007      	beq.n	800437c <HAL_RCC_OscConfig+0x48>
 800436c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800436e:	2b18      	cmp	r3, #24
 8004370:	d112      	bne.n	8004398 <HAL_RCC_OscConfig+0x64>
 8004372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004374:	f003 0303 	and.w	r3, r3, #3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d10d      	bne.n	8004398 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800437c:	4b8b      	ldr	r3, [pc, #556]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 8098 	beq.w	80044ba <HAL_RCC_OscConfig+0x186>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	f040 8093 	bne.w	80044ba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e3f6      	b.n	8004b86 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043a0:	d106      	bne.n	80043b0 <HAL_RCC_OscConfig+0x7c>
 80043a2:	4b82      	ldr	r3, [pc, #520]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a81      	ldr	r2, [pc, #516]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 80043a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	e058      	b.n	8004462 <HAL_RCC_OscConfig+0x12e>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d112      	bne.n	80043de <HAL_RCC_OscConfig+0xaa>
 80043b8:	4b7c      	ldr	r3, [pc, #496]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a7b      	ldr	r2, [pc, #492]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 80043be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043c2:	6013      	str	r3, [r2, #0]
 80043c4:	4b79      	ldr	r3, [pc, #484]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a78      	ldr	r2, [pc, #480]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 80043ca:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80043ce:	6013      	str	r3, [r2, #0]
 80043d0:	4b76      	ldr	r3, [pc, #472]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a75      	ldr	r2, [pc, #468]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 80043d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	e041      	b.n	8004462 <HAL_RCC_OscConfig+0x12e>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043e6:	d112      	bne.n	800440e <HAL_RCC_OscConfig+0xda>
 80043e8:	4b70      	ldr	r3, [pc, #448]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a6f      	ldr	r2, [pc, #444]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 80043ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043f2:	6013      	str	r3, [r2, #0]
 80043f4:	4b6d      	ldr	r3, [pc, #436]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a6c      	ldr	r2, [pc, #432]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 80043fa:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	4b6a      	ldr	r3, [pc, #424]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a69      	ldr	r2, [pc, #420]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 8004406:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800440a:	6013      	str	r3, [r2, #0]
 800440c:	e029      	b.n	8004462 <HAL_RCC_OscConfig+0x12e>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004416:	d112      	bne.n	800443e <HAL_RCC_OscConfig+0x10a>
 8004418:	4b64      	ldr	r3, [pc, #400]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a63      	ldr	r2, [pc, #396]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 800441e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004422:	6013      	str	r3, [r2, #0]
 8004424:	4b61      	ldr	r3, [pc, #388]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a60      	ldr	r2, [pc, #384]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 800442a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800442e:	6013      	str	r3, [r2, #0]
 8004430:	4b5e      	ldr	r3, [pc, #376]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a5d      	ldr	r2, [pc, #372]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 8004436:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	e011      	b.n	8004462 <HAL_RCC_OscConfig+0x12e>
 800443e:	4b5b      	ldr	r3, [pc, #364]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a5a      	ldr	r2, [pc, #360]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 8004444:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004448:	6013      	str	r3, [r2, #0]
 800444a:	4b58      	ldr	r3, [pc, #352]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a57      	ldr	r2, [pc, #348]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 8004450:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004454:	6013      	str	r3, [r2, #0]
 8004456:	4b55      	ldr	r3, [pc, #340]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a54      	ldr	r2, [pc, #336]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 800445c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004460:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d013      	beq.n	8004492 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446a:	f7fe f8a3 	bl	80025b4 <HAL_GetTick>
 800446e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004470:	e008      	b.n	8004484 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004472:	f7fe f89f 	bl	80025b4 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b64      	cmp	r3, #100	@ 0x64
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e380      	b.n	8004b86 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004484:	4b49      	ldr	r3, [pc, #292]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0f0      	beq.n	8004472 <HAL_RCC_OscConfig+0x13e>
 8004490:	e014      	b.n	80044bc <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004492:	f7fe f88f 	bl	80025b4 <HAL_GetTick>
 8004496:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004498:	e008      	b.n	80044ac <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800449a:	f7fe f88b 	bl	80025b4 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b64      	cmp	r3, #100	@ 0x64
 80044a6:	d901      	bls.n	80044ac <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e36c      	b.n	8004b86 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044ac:	4b3f      	ldr	r3, [pc, #252]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1f0      	bne.n	800449a <HAL_RCC_OscConfig+0x166>
 80044b8:	e000      	b.n	80044bc <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 808c 	beq.w	80045e2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044ca:	4b38      	ldr	r3, [pc, #224]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044d2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80044d4:	4b35      	ldr	r3, [pc, #212]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 80044d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d007      	beq.n	80044f0 <HAL_RCC_OscConfig+0x1bc>
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	2b18      	cmp	r3, #24
 80044e4:	d137      	bne.n	8004556 <HAL_RCC_OscConfig+0x222>
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	f003 0303 	and.w	r3, r3, #3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d132      	bne.n	8004556 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044f0:	4b2e      	ldr	r3, [pc, #184]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d005      	beq.n	8004508 <HAL_RCC_OscConfig+0x1d4>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e33e      	b.n	8004b86 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004508:	4b28      	ldr	r3, [pc, #160]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f023 0219 	bic.w	r2, r3, #25
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	4925      	ldr	r1, [pc, #148]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 8004516:	4313      	orrs	r3, r2
 8004518:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451a:	f7fe f84b 	bl	80025b4 <HAL_GetTick>
 800451e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004520:	e008      	b.n	8004534 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004522:	f7fe f847 	bl	80025b4 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d901      	bls.n	8004534 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e328      	b.n	8004b86 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004534:	4b1d      	ldr	r3, [pc, #116]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0f0      	beq.n	8004522 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004540:	4b1a      	ldr	r3, [pc, #104]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	061b      	lsls	r3, r3, #24
 800454e:	4917      	ldr	r1, [pc, #92]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 8004550:	4313      	orrs	r3, r2
 8004552:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004554:	e045      	b.n	80045e2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d028      	beq.n	80045b0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800455e:	4b13      	ldr	r3, [pc, #76]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f023 0219 	bic.w	r2, r3, #25
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	4910      	ldr	r1, [pc, #64]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 800456c:	4313      	orrs	r3, r2
 800456e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004570:	f7fe f820 	bl	80025b4 <HAL_GetTick>
 8004574:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004578:	f7fe f81c 	bl	80025b4 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e2fd      	b.n	8004b86 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800458a:	4b08      	ldr	r3, [pc, #32]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0304 	and.w	r3, r3, #4
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0f0      	beq.n	8004578 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004596:	4b05      	ldr	r3, [pc, #20]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	061b      	lsls	r3, r3, #24
 80045a4:	4901      	ldr	r1, [pc, #4]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	604b      	str	r3, [r1, #4]
 80045aa:	e01a      	b.n	80045e2 <HAL_RCC_OscConfig+0x2ae>
 80045ac:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045b0:	4b97      	ldr	r3, [pc, #604]	@ (8004810 <HAL_RCC_OscConfig+0x4dc>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a96      	ldr	r2, [pc, #600]	@ (8004810 <HAL_RCC_OscConfig+0x4dc>)
 80045b6:	f023 0301 	bic.w	r3, r3, #1
 80045ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045bc:	f7fd fffa 	bl	80025b4 <HAL_GetTick>
 80045c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045c4:	f7fd fff6 	bl	80025b4 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e2d7      	b.n	8004b86 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045d6:	4b8e      	ldr	r3, [pc, #568]	@ (8004810 <HAL_RCC_OscConfig+0x4dc>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0304 	and.w	r3, r3, #4
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1f0      	bne.n	80045c4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0310 	and.w	r3, r3, #16
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d06a      	beq.n	80046c4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045ee:	4b88      	ldr	r3, [pc, #544]	@ (8004810 <HAL_RCC_OscConfig+0x4dc>)
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045f6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80045f8:	4b85      	ldr	r3, [pc, #532]	@ (8004810 <HAL_RCC_OscConfig+0x4dc>)
 80045fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045fc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	2b08      	cmp	r3, #8
 8004602:	d007      	beq.n	8004614 <HAL_RCC_OscConfig+0x2e0>
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	2b18      	cmp	r3, #24
 8004608:	d11b      	bne.n	8004642 <HAL_RCC_OscConfig+0x30e>
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f003 0303 	and.w	r3, r3, #3
 8004610:	2b01      	cmp	r3, #1
 8004612:	d116      	bne.n	8004642 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004614:	4b7e      	ldr	r3, [pc, #504]	@ (8004810 <HAL_RCC_OscConfig+0x4dc>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800461c:	2b00      	cmp	r3, #0
 800461e:	d005      	beq.n	800462c <HAL_RCC_OscConfig+0x2f8>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	2b80      	cmp	r3, #128	@ 0x80
 8004626:	d001      	beq.n	800462c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e2ac      	b.n	8004b86 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800462c:	4b78      	ldr	r3, [pc, #480]	@ (8004810 <HAL_RCC_OscConfig+0x4dc>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	061b      	lsls	r3, r3, #24
 800463a:	4975      	ldr	r1, [pc, #468]	@ (8004810 <HAL_RCC_OscConfig+0x4dc>)
 800463c:	4313      	orrs	r3, r2
 800463e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004640:	e040      	b.n	80046c4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d023      	beq.n	8004692 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800464a:	4b71      	ldr	r3, [pc, #452]	@ (8004810 <HAL_RCC_OscConfig+0x4dc>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a70      	ldr	r2, [pc, #448]	@ (8004810 <HAL_RCC_OscConfig+0x4dc>)
 8004650:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004654:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004656:	f7fd ffad 	bl	80025b4 <HAL_GetTick>
 800465a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800465e:	f7fd ffa9 	bl	80025b4 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e28a      	b.n	8004b86 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004670:	4b67      	ldr	r3, [pc, #412]	@ (8004810 <HAL_RCC_OscConfig+0x4dc>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0f0      	beq.n	800465e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800467c:	4b64      	ldr	r3, [pc, #400]	@ (8004810 <HAL_RCC_OscConfig+0x4dc>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	061b      	lsls	r3, r3, #24
 800468a:	4961      	ldr	r1, [pc, #388]	@ (8004810 <HAL_RCC_OscConfig+0x4dc>)
 800468c:	4313      	orrs	r3, r2
 800468e:	60cb      	str	r3, [r1, #12]
 8004690:	e018      	b.n	80046c4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004692:	4b5f      	ldr	r3, [pc, #380]	@ (8004810 <HAL_RCC_OscConfig+0x4dc>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a5e      	ldr	r2, [pc, #376]	@ (8004810 <HAL_RCC_OscConfig+0x4dc>)
 8004698:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800469c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469e:	f7fd ff89 	bl	80025b4 <HAL_GetTick>
 80046a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80046a6:	f7fd ff85 	bl	80025b4 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e266      	b.n	8004b86 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80046b8:	4b55      	ldr	r3, [pc, #340]	@ (8004810 <HAL_RCC_OscConfig+0x4dc>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1f0      	bne.n	80046a6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0308 	and.w	r3, r3, #8
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d036      	beq.n	800473e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d019      	beq.n	800470c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046d8:	4b4d      	ldr	r3, [pc, #308]	@ (8004810 <HAL_RCC_OscConfig+0x4dc>)
 80046da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046dc:	4a4c      	ldr	r2, [pc, #304]	@ (8004810 <HAL_RCC_OscConfig+0x4dc>)
 80046de:	f043 0301 	orr.w	r3, r3, #1
 80046e2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e4:	f7fd ff66 	bl	80025b4 <HAL_GetTick>
 80046e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ec:	f7fd ff62 	bl	80025b4 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e243      	b.n	8004b86 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046fe:	4b44      	ldr	r3, [pc, #272]	@ (8004810 <HAL_RCC_OscConfig+0x4dc>)
 8004700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0f0      	beq.n	80046ec <HAL_RCC_OscConfig+0x3b8>
 800470a:	e018      	b.n	800473e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800470c:	4b40      	ldr	r3, [pc, #256]	@ (8004810 <HAL_RCC_OscConfig+0x4dc>)
 800470e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004710:	4a3f      	ldr	r2, [pc, #252]	@ (8004810 <HAL_RCC_OscConfig+0x4dc>)
 8004712:	f023 0301 	bic.w	r3, r3, #1
 8004716:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004718:	f7fd ff4c 	bl	80025b4 <HAL_GetTick>
 800471c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004720:	f7fd ff48 	bl	80025b4 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e229      	b.n	8004b86 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004732:	4b37      	ldr	r3, [pc, #220]	@ (8004810 <HAL_RCC_OscConfig+0x4dc>)
 8004734:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1f0      	bne.n	8004720 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0320 	and.w	r3, r3, #32
 8004746:	2b00      	cmp	r3, #0
 8004748:	d036      	beq.n	80047b8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d019      	beq.n	8004786 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004752:	4b2f      	ldr	r3, [pc, #188]	@ (8004810 <HAL_RCC_OscConfig+0x4dc>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a2e      	ldr	r2, [pc, #184]	@ (8004810 <HAL_RCC_OscConfig+0x4dc>)
 8004758:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800475c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800475e:	f7fd ff29 	bl	80025b4 <HAL_GetTick>
 8004762:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004764:	e008      	b.n	8004778 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004766:	f7fd ff25 	bl	80025b4 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e206      	b.n	8004b86 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004778:	4b25      	ldr	r3, [pc, #148]	@ (8004810 <HAL_RCC_OscConfig+0x4dc>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0f0      	beq.n	8004766 <HAL_RCC_OscConfig+0x432>
 8004784:	e018      	b.n	80047b8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004786:	4b22      	ldr	r3, [pc, #136]	@ (8004810 <HAL_RCC_OscConfig+0x4dc>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a21      	ldr	r2, [pc, #132]	@ (8004810 <HAL_RCC_OscConfig+0x4dc>)
 800478c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004790:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004792:	f7fd ff0f 	bl	80025b4 <HAL_GetTick>
 8004796:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800479a:	f7fd ff0b 	bl	80025b4 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e1ec      	b.n	8004b86 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80047ac:	4b18      	ldr	r3, [pc, #96]	@ (8004810 <HAL_RCC_OscConfig+0x4dc>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1f0      	bne.n	800479a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 80af 	beq.w	8004924 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80047c6:	4b13      	ldr	r3, [pc, #76]	@ (8004814 <HAL_RCC_OscConfig+0x4e0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a12      	ldr	r2, [pc, #72]	@ (8004814 <HAL_RCC_OscConfig+0x4e0>)
 80047cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047d2:	f7fd feef 	bl	80025b4 <HAL_GetTick>
 80047d6:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047d8:	e008      	b.n	80047ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047da:	f7fd feeb 	bl	80025b4 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b64      	cmp	r3, #100	@ 0x64
 80047e6:	d901      	bls.n	80047ec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e1cc      	b.n	8004b86 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047ec:	4b09      	ldr	r3, [pc, #36]	@ (8004814 <HAL_RCC_OscConfig+0x4e0>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0f0      	beq.n	80047da <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d10b      	bne.n	8004818 <HAL_RCC_OscConfig+0x4e4>
 8004800:	4b03      	ldr	r3, [pc, #12]	@ (8004810 <HAL_RCC_OscConfig+0x4dc>)
 8004802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004804:	4a02      	ldr	r2, [pc, #8]	@ (8004810 <HAL_RCC_OscConfig+0x4dc>)
 8004806:	f043 0301 	orr.w	r3, r3, #1
 800480a:	6713      	str	r3, [r2, #112]	@ 0x70
 800480c:	e05b      	b.n	80048c6 <HAL_RCC_OscConfig+0x592>
 800480e:	bf00      	nop
 8004810:	58024400 	.word	0x58024400
 8004814:	58024800 	.word	0x58024800
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d112      	bne.n	8004846 <HAL_RCC_OscConfig+0x512>
 8004820:	4b9d      	ldr	r3, [pc, #628]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 8004822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004824:	4a9c      	ldr	r2, [pc, #624]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 8004826:	f023 0301 	bic.w	r3, r3, #1
 800482a:	6713      	str	r3, [r2, #112]	@ 0x70
 800482c:	4b9a      	ldr	r3, [pc, #616]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 800482e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004830:	4a99      	ldr	r2, [pc, #612]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 8004832:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004836:	6713      	str	r3, [r2, #112]	@ 0x70
 8004838:	4b97      	ldr	r3, [pc, #604]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 800483a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800483c:	4a96      	ldr	r2, [pc, #600]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 800483e:	f023 0304 	bic.w	r3, r3, #4
 8004842:	6713      	str	r3, [r2, #112]	@ 0x70
 8004844:	e03f      	b.n	80048c6 <HAL_RCC_OscConfig+0x592>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	2b05      	cmp	r3, #5
 800484c:	d112      	bne.n	8004874 <HAL_RCC_OscConfig+0x540>
 800484e:	4b92      	ldr	r3, [pc, #584]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 8004850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004852:	4a91      	ldr	r2, [pc, #580]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 8004854:	f043 0304 	orr.w	r3, r3, #4
 8004858:	6713      	str	r3, [r2, #112]	@ 0x70
 800485a:	4b8f      	ldr	r3, [pc, #572]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 800485c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800485e:	4a8e      	ldr	r2, [pc, #568]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 8004860:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004864:	6713      	str	r3, [r2, #112]	@ 0x70
 8004866:	4b8c      	ldr	r3, [pc, #560]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 8004868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800486a:	4a8b      	ldr	r2, [pc, #556]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 800486c:	f043 0301 	orr.w	r3, r3, #1
 8004870:	6713      	str	r3, [r2, #112]	@ 0x70
 8004872:	e028      	b.n	80048c6 <HAL_RCC_OscConfig+0x592>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	2b85      	cmp	r3, #133	@ 0x85
 800487a:	d112      	bne.n	80048a2 <HAL_RCC_OscConfig+0x56e>
 800487c:	4b86      	ldr	r3, [pc, #536]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 800487e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004880:	4a85      	ldr	r2, [pc, #532]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 8004882:	f043 0304 	orr.w	r3, r3, #4
 8004886:	6713      	str	r3, [r2, #112]	@ 0x70
 8004888:	4b83      	ldr	r3, [pc, #524]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 800488a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800488c:	4a82      	ldr	r2, [pc, #520]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 800488e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004892:	6713      	str	r3, [r2, #112]	@ 0x70
 8004894:	4b80      	ldr	r3, [pc, #512]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 8004896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004898:	4a7f      	ldr	r2, [pc, #508]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 800489a:	f043 0301 	orr.w	r3, r3, #1
 800489e:	6713      	str	r3, [r2, #112]	@ 0x70
 80048a0:	e011      	b.n	80048c6 <HAL_RCC_OscConfig+0x592>
 80048a2:	4b7d      	ldr	r3, [pc, #500]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 80048a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a6:	4a7c      	ldr	r2, [pc, #496]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 80048a8:	f023 0301 	bic.w	r3, r3, #1
 80048ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80048ae:	4b7a      	ldr	r3, [pc, #488]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 80048b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b2:	4a79      	ldr	r2, [pc, #484]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 80048b4:	f023 0304 	bic.w	r3, r3, #4
 80048b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80048ba:	4b77      	ldr	r3, [pc, #476]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 80048bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048be:	4a76      	ldr	r2, [pc, #472]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 80048c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048c4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d015      	beq.n	80048fa <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ce:	f7fd fe71 	bl	80025b4 <HAL_GetTick>
 80048d2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048d4:	e00a      	b.n	80048ec <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048d6:	f7fd fe6d 	bl	80025b4 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d901      	bls.n	80048ec <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e14c      	b.n	8004b86 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048ec:	4b6a      	ldr	r3, [pc, #424]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 80048ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d0ee      	beq.n	80048d6 <HAL_RCC_OscConfig+0x5a2>
 80048f8:	e014      	b.n	8004924 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048fa:	f7fd fe5b 	bl	80025b4 <HAL_GetTick>
 80048fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004900:	e00a      	b.n	8004918 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004902:	f7fd fe57 	bl	80025b4 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004910:	4293      	cmp	r3, r2
 8004912:	d901      	bls.n	8004918 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e136      	b.n	8004b86 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004918:	4b5f      	ldr	r3, [pc, #380]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 800491a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1ee      	bne.n	8004902 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 812b 	beq.w	8004b84 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800492e:	4b5a      	ldr	r3, [pc, #360]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004936:	2b18      	cmp	r3, #24
 8004938:	f000 80bb 	beq.w	8004ab2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004940:	2b02      	cmp	r3, #2
 8004942:	f040 8095 	bne.w	8004a70 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004946:	4b54      	ldr	r3, [pc, #336]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a53      	ldr	r2, [pc, #332]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 800494c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004950:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004952:	f7fd fe2f 	bl	80025b4 <HAL_GetTick>
 8004956:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004958:	e008      	b.n	800496c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800495a:	f7fd fe2b 	bl	80025b4 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e10c      	b.n	8004b86 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800496c:	4b4a      	ldr	r3, [pc, #296]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1f0      	bne.n	800495a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004978:	4b47      	ldr	r3, [pc, #284]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 800497a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800497c:	4b47      	ldr	r3, [pc, #284]	@ (8004a9c <HAL_RCC_OscConfig+0x768>)
 800497e:	4013      	ands	r3, r2
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004988:	0112      	lsls	r2, r2, #4
 800498a:	430a      	orrs	r2, r1
 800498c:	4942      	ldr	r1, [pc, #264]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 800498e:	4313      	orrs	r3, r2
 8004990:	628b      	str	r3, [r1, #40]	@ 0x28
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004996:	3b01      	subs	r3, #1
 8004998:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049a0:	3b01      	subs	r3, #1
 80049a2:	025b      	lsls	r3, r3, #9
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	431a      	orrs	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ac:	3b01      	subs	r3, #1
 80049ae:	041b      	lsls	r3, r3, #16
 80049b0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80049b4:	431a      	orrs	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ba:	3b01      	subs	r3, #1
 80049bc:	061b      	lsls	r3, r3, #24
 80049be:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80049c2:	4935      	ldr	r1, [pc, #212]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80049c8:	4b33      	ldr	r3, [pc, #204]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 80049ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049cc:	4a32      	ldr	r2, [pc, #200]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 80049ce:	f023 0301 	bic.w	r3, r3, #1
 80049d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80049d4:	4b30      	ldr	r3, [pc, #192]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 80049d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049d8:	4b31      	ldr	r3, [pc, #196]	@ (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 80049da:	4013      	ands	r3, r2
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80049e0:	00d2      	lsls	r2, r2, #3
 80049e2:	492d      	ldr	r1, [pc, #180]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80049e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 80049ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ec:	f023 020c 	bic.w	r2, r3, #12
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f4:	4928      	ldr	r1, [pc, #160]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80049fa:	4b27      	ldr	r3, [pc, #156]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 80049fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049fe:	f023 0202 	bic.w	r2, r3, #2
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a06:	4924      	ldr	r1, [pc, #144]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a0c:	4b22      	ldr	r3, [pc, #136]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 8004a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a10:	4a21      	ldr	r2, [pc, #132]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 8004a12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a18:	4b1f      	ldr	r3, [pc, #124]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 8004a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a1c:	4a1e      	ldr	r2, [pc, #120]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 8004a1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004a24:	4b1c      	ldr	r3, [pc, #112]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 8004a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a28:	4a1b      	ldr	r2, [pc, #108]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 8004a2a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004a30:	4b19      	ldr	r3, [pc, #100]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 8004a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a34:	4a18      	ldr	r2, [pc, #96]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 8004a36:	f043 0301 	orr.w	r3, r3, #1
 8004a3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a3c:	4b16      	ldr	r3, [pc, #88]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a15      	ldr	r2, [pc, #84]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 8004a42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a48:	f7fd fdb4 	bl	80025b4 <HAL_GetTick>
 8004a4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a50:	f7fd fdb0 	bl	80025b4 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e091      	b.n	8004b86 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a62:	4b0d      	ldr	r3, [pc, #52]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0f0      	beq.n	8004a50 <HAL_RCC_OscConfig+0x71c>
 8004a6e:	e089      	b.n	8004b84 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a70:	4b09      	ldr	r3, [pc, #36]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a08      	ldr	r2, [pc, #32]	@ (8004a98 <HAL_RCC_OscConfig+0x764>)
 8004a76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a7c:	f7fd fd9a 	bl	80025b4 <HAL_GetTick>
 8004a80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a82:	e00f      	b.n	8004aa4 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a84:	f7fd fd96 	bl	80025b4 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d908      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e077      	b.n	8004b86 <HAL_RCC_OscConfig+0x852>
 8004a96:	bf00      	nop
 8004a98:	58024400 	.word	0x58024400
 8004a9c:	fffffc0c 	.word	0xfffffc0c
 8004aa0:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004aa4:	4b3a      	ldr	r3, [pc, #232]	@ (8004b90 <HAL_RCC_OscConfig+0x85c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1e9      	bne.n	8004a84 <HAL_RCC_OscConfig+0x750>
 8004ab0:	e068      	b.n	8004b84 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004ab2:	4b37      	ldr	r3, [pc, #220]	@ (8004b90 <HAL_RCC_OscConfig+0x85c>)
 8004ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004ab8:	4b35      	ldr	r3, [pc, #212]	@ (8004b90 <HAL_RCC_OscConfig+0x85c>)
 8004aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004abc:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d031      	beq.n	8004b2a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	f003 0203 	and.w	r2, r3, #3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d12a      	bne.n	8004b2a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	091b      	lsrs	r3, r3, #4
 8004ad8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d122      	bne.n	8004b2a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aee:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d11a      	bne.n	8004b2a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	0a5b      	lsrs	r3, r3, #9
 8004af8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b00:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d111      	bne.n	8004b2a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	0c1b      	lsrs	r3, r3, #16
 8004b0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b12:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d108      	bne.n	8004b2a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	0e1b      	lsrs	r3, r3, #24
 8004b1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b24:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d001      	beq.n	8004b2e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e02b      	b.n	8004b86 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004b2e:	4b18      	ldr	r3, [pc, #96]	@ (8004b90 <HAL_RCC_OscConfig+0x85c>)
 8004b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b32:	08db      	lsrs	r3, r3, #3
 8004b34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b38:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d01f      	beq.n	8004b84 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004b44:	4b12      	ldr	r3, [pc, #72]	@ (8004b90 <HAL_RCC_OscConfig+0x85c>)
 8004b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b48:	4a11      	ldr	r2, [pc, #68]	@ (8004b90 <HAL_RCC_OscConfig+0x85c>)
 8004b4a:	f023 0301 	bic.w	r3, r3, #1
 8004b4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b50:	f7fd fd30 	bl	80025b4 <HAL_GetTick>
 8004b54:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004b56:	bf00      	nop
 8004b58:	f7fd fd2c 	bl	80025b4 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d0f9      	beq.n	8004b58 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b64:	4b0a      	ldr	r3, [pc, #40]	@ (8004b90 <HAL_RCC_OscConfig+0x85c>)
 8004b66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b68:	4b0a      	ldr	r3, [pc, #40]	@ (8004b94 <HAL_RCC_OscConfig+0x860>)
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004b70:	00d2      	lsls	r2, r2, #3
 8004b72:	4907      	ldr	r1, [pc, #28]	@ (8004b90 <HAL_RCC_OscConfig+0x85c>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004b78:	4b05      	ldr	r3, [pc, #20]	@ (8004b90 <HAL_RCC_OscConfig+0x85c>)
 8004b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b7c:	4a04      	ldr	r2, [pc, #16]	@ (8004b90 <HAL_RCC_OscConfig+0x85c>)
 8004b7e:	f043 0301 	orr.w	r3, r3, #1
 8004b82:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3730      	adds	r7, #48	@ 0x30
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	58024400 	.word	0x58024400
 8004b94:	ffff0007 	.word	0xffff0007

08004b98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d101      	bne.n	8004bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e19c      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bac:	4b8a      	ldr	r3, [pc, #552]	@ (8004dd8 <HAL_RCC_ClockConfig+0x240>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 030f 	and.w	r3, r3, #15
 8004bb4:	683a      	ldr	r2, [r7, #0]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d910      	bls.n	8004bdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bba:	4b87      	ldr	r3, [pc, #540]	@ (8004dd8 <HAL_RCC_ClockConfig+0x240>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f023 020f 	bic.w	r2, r3, #15
 8004bc2:	4985      	ldr	r1, [pc, #532]	@ (8004dd8 <HAL_RCC_ClockConfig+0x240>)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bca:	4b83      	ldr	r3, [pc, #524]	@ (8004dd8 <HAL_RCC_ClockConfig+0x240>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	683a      	ldr	r2, [r7, #0]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d001      	beq.n	8004bdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e184      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d010      	beq.n	8004c0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691a      	ldr	r2, [r3, #16]
 8004bec:	4b7b      	ldr	r3, [pc, #492]	@ (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d908      	bls.n	8004c0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004bf8:	4b78      	ldr	r3, [pc, #480]	@ (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	4975      	ldr	r1, [pc, #468]	@ (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0308 	and.w	r3, r3, #8
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d010      	beq.n	8004c38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	695a      	ldr	r2, [r3, #20]
 8004c1a:	4b70      	ldr	r3, [pc, #448]	@ (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d908      	bls.n	8004c38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c26:	4b6d      	ldr	r3, [pc, #436]	@ (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	496a      	ldr	r1, [pc, #424]	@ (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0310 	and.w	r3, r3, #16
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d010      	beq.n	8004c66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	699a      	ldr	r2, [r3, #24]
 8004c48:	4b64      	ldr	r3, [pc, #400]	@ (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d908      	bls.n	8004c66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c54:	4b61      	ldr	r3, [pc, #388]	@ (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004c56:	69db      	ldr	r3, [r3, #28]
 8004c58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	495e      	ldr	r1, [pc, #376]	@ (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0320 	and.w	r3, r3, #32
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d010      	beq.n	8004c94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	69da      	ldr	r2, [r3, #28]
 8004c76:	4b59      	ldr	r3, [pc, #356]	@ (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d908      	bls.n	8004c94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004c82:	4b56      	ldr	r3, [pc, #344]	@ (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	4953      	ldr	r1, [pc, #332]	@ (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d010      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	4b4d      	ldr	r3, [pc, #308]	@ (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	f003 030f 	and.w	r3, r3, #15
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d908      	bls.n	8004cc2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cb0:	4b4a      	ldr	r3, [pc, #296]	@ (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	f023 020f 	bic.w	r2, r3, #15
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	4947      	ldr	r1, [pc, #284]	@ (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d055      	beq.n	8004d7a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004cce:	4b43      	ldr	r3, [pc, #268]	@ (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	4940      	ldr	r1, [pc, #256]	@ (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d107      	bne.n	8004cf8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ce8:	4b3c      	ldr	r3, [pc, #240]	@ (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d121      	bne.n	8004d38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e0f6      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	2b03      	cmp	r3, #3
 8004cfe:	d107      	bne.n	8004d10 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d00:	4b36      	ldr	r3, [pc, #216]	@ (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d115      	bne.n	8004d38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e0ea      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d107      	bne.n	8004d28 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d18:	4b30      	ldr	r3, [pc, #192]	@ (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d109      	bne.n	8004d38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e0de      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d28:	4b2c      	ldr	r3, [pc, #176]	@ (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e0d6      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d38:	4b28      	ldr	r3, [pc, #160]	@ (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	f023 0207 	bic.w	r2, r3, #7
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	4925      	ldr	r1, [pc, #148]	@ (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d4a:	f7fd fc33 	bl	80025b4 <HAL_GetTick>
 8004d4e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d50:	e00a      	b.n	8004d68 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d52:	f7fd fc2f 	bl	80025b4 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d901      	bls.n	8004d68 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e0be      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d68:	4b1c      	ldr	r3, [pc, #112]	@ (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d1eb      	bne.n	8004d52 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d010      	beq.n	8004da8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	4b14      	ldr	r3, [pc, #80]	@ (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d208      	bcs.n	8004da8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d96:	4b11      	ldr	r3, [pc, #68]	@ (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	f023 020f 	bic.w	r2, r3, #15
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	490e      	ldr	r1, [pc, #56]	@ (8004ddc <HAL_RCC_ClockConfig+0x244>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004da8:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd8 <HAL_RCC_ClockConfig+0x240>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 030f 	and.w	r3, r3, #15
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d214      	bcs.n	8004de0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004db6:	4b08      	ldr	r3, [pc, #32]	@ (8004dd8 <HAL_RCC_ClockConfig+0x240>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f023 020f 	bic.w	r2, r3, #15
 8004dbe:	4906      	ldr	r1, [pc, #24]	@ (8004dd8 <HAL_RCC_ClockConfig+0x240>)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dc6:	4b04      	ldr	r3, [pc, #16]	@ (8004dd8 <HAL_RCC_ClockConfig+0x240>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d005      	beq.n	8004de0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e086      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x34e>
 8004dd8:	52002000 	.word	0x52002000
 8004ddc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d010      	beq.n	8004e0e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	691a      	ldr	r2, [r3, #16]
 8004df0:	4b3f      	ldr	r3, [pc, #252]	@ (8004ef0 <HAL_RCC_ClockConfig+0x358>)
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d208      	bcs.n	8004e0e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004dfc:	4b3c      	ldr	r3, [pc, #240]	@ (8004ef0 <HAL_RCC_ClockConfig+0x358>)
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	4939      	ldr	r1, [pc, #228]	@ (8004ef0 <HAL_RCC_ClockConfig+0x358>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0308 	and.w	r3, r3, #8
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d010      	beq.n	8004e3c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	695a      	ldr	r2, [r3, #20]
 8004e1e:	4b34      	ldr	r3, [pc, #208]	@ (8004ef0 <HAL_RCC_ClockConfig+0x358>)
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d208      	bcs.n	8004e3c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e2a:	4b31      	ldr	r3, [pc, #196]	@ (8004ef0 <HAL_RCC_ClockConfig+0x358>)
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	492e      	ldr	r1, [pc, #184]	@ (8004ef0 <HAL_RCC_ClockConfig+0x358>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0310 	and.w	r3, r3, #16
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d010      	beq.n	8004e6a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	699a      	ldr	r2, [r3, #24]
 8004e4c:	4b28      	ldr	r3, [pc, #160]	@ (8004ef0 <HAL_RCC_ClockConfig+0x358>)
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d208      	bcs.n	8004e6a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e58:	4b25      	ldr	r3, [pc, #148]	@ (8004ef0 <HAL_RCC_ClockConfig+0x358>)
 8004e5a:	69db      	ldr	r3, [r3, #28]
 8004e5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	4922      	ldr	r1, [pc, #136]	@ (8004ef0 <HAL_RCC_ClockConfig+0x358>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0320 	and.w	r3, r3, #32
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d010      	beq.n	8004e98 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	69da      	ldr	r2, [r3, #28]
 8004e7a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ef0 <HAL_RCC_ClockConfig+0x358>)
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d208      	bcs.n	8004e98 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004e86:	4b1a      	ldr	r3, [pc, #104]	@ (8004ef0 <HAL_RCC_ClockConfig+0x358>)
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	4917      	ldr	r1, [pc, #92]	@ (8004ef0 <HAL_RCC_ClockConfig+0x358>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004e98:	f000 f89e 	bl	8004fd8 <HAL_RCC_GetSysClockFreq>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	4b14      	ldr	r3, [pc, #80]	@ (8004ef0 <HAL_RCC_ClockConfig+0x358>)
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	0a1b      	lsrs	r3, r3, #8
 8004ea4:	f003 030f 	and.w	r3, r3, #15
 8004ea8:	4912      	ldr	r1, [pc, #72]	@ (8004ef4 <HAL_RCC_ClockConfig+0x35c>)
 8004eaa:	5ccb      	ldrb	r3, [r1, r3]
 8004eac:	f003 031f 	and.w	r3, r3, #31
 8004eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8004eb4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8004ef0 <HAL_RCC_ClockConfig+0x358>)
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	f003 030f 	and.w	r3, r3, #15
 8004ebe:	4a0d      	ldr	r2, [pc, #52]	@ (8004ef4 <HAL_RCC_ClockConfig+0x35c>)
 8004ec0:	5cd3      	ldrb	r3, [r2, r3]
 8004ec2:	f003 031f 	and.w	r3, r3, #31
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8004ef8 <HAL_RCC_ClockConfig+0x360>)
 8004ece:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8004efc <HAL_RCC_ClockConfig+0x364>)
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8004f00 <HAL_RCC_ClockConfig+0x368>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fd fb20 	bl	8002520 <HAL_InitTick>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	58024400 	.word	0x58024400
 8004ef4:	0800d250 	.word	0x0800d250
 8004ef8:	24000018 	.word	0x24000018
 8004efc:	24000014 	.word	0x24000014
 8004f00:	2400001c 	.word	0x2400001c

08004f04 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b08c      	sub	sp, #48	@ 0x30
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d12a      	bne.n	8004f6c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8004f16:	4b2d      	ldr	r3, [pc, #180]	@ (8004fcc <HAL_RCC_MCOConfig+0xc8>)
 8004f18:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004f1c:	4a2b      	ldr	r2, [pc, #172]	@ (8004fcc <HAL_RCC_MCOConfig+0xc8>)
 8004f1e:	f043 0301 	orr.w	r3, r3, #1
 8004f22:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004f26:	4b29      	ldr	r3, [pc, #164]	@ (8004fcc <HAL_RCC_MCOConfig+0xc8>)
 8004f28:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	61bb      	str	r3, [r7, #24]
 8004f32:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8004f34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f42:	2300      	movs	r3, #0
 8004f44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004f46:	2300      	movs	r3, #0
 8004f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004f4a:	f107 031c 	add.w	r3, r7, #28
 8004f4e:	4619      	mov	r1, r3
 8004f50:	481f      	ldr	r0, [pc, #124]	@ (8004fd0 <HAL_RCC_MCOConfig+0xcc>)
 8004f52:	f7fd fc43 	bl	80027dc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8004f56:	4b1d      	ldr	r3, [pc, #116]	@ (8004fcc <HAL_RCC_MCOConfig+0xc8>)
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8004f5e:	68b9      	ldr	r1, [r7, #8]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	430b      	orrs	r3, r1
 8004f64:	4919      	ldr	r1, [pc, #100]	@ (8004fcc <HAL_RCC_MCOConfig+0xc8>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8004f6a:	e02a      	b.n	8004fc2 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8004f6c:	4b17      	ldr	r3, [pc, #92]	@ (8004fcc <HAL_RCC_MCOConfig+0xc8>)
 8004f6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004f72:	4a16      	ldr	r2, [pc, #88]	@ (8004fcc <HAL_RCC_MCOConfig+0xc8>)
 8004f74:	f043 0304 	orr.w	r3, r3, #4
 8004f78:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004f7c:	4b13      	ldr	r3, [pc, #76]	@ (8004fcc <HAL_RCC_MCOConfig+0xc8>)
 8004f7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004f82:	f003 0304 	and.w	r3, r3, #4
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004f8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f90:	2302      	movs	r3, #2
 8004f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f94:	2303      	movs	r3, #3
 8004f96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004fa0:	f107 031c 	add.w	r3, r7, #28
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	480b      	ldr	r0, [pc, #44]	@ (8004fd4 <HAL_RCC_MCOConfig+0xd0>)
 8004fa8:	f7fd fc18 	bl	80027dc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8004fac:	4b07      	ldr	r3, [pc, #28]	@ (8004fcc <HAL_RCC_MCOConfig+0xc8>)
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	01d9      	lsls	r1, r3, #7
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	430b      	orrs	r3, r1
 8004fbc:	4903      	ldr	r1, [pc, #12]	@ (8004fcc <HAL_RCC_MCOConfig+0xc8>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	610b      	str	r3, [r1, #16]
}
 8004fc2:	bf00      	nop
 8004fc4:	3730      	adds	r7, #48	@ 0x30
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	58024400 	.word	0x58024400
 8004fd0:	58020000 	.word	0x58020000
 8004fd4:	58020800 	.word	0x58020800

08004fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b089      	sub	sp, #36	@ 0x24
 8004fdc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fde:	4bb3      	ldr	r3, [pc, #716]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fe6:	2b18      	cmp	r3, #24
 8004fe8:	f200 8155 	bhi.w	8005296 <HAL_RCC_GetSysClockFreq+0x2be>
 8004fec:	a201      	add	r2, pc, #4	@ (adr r2, 8004ff4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff2:	bf00      	nop
 8004ff4:	08005059 	.word	0x08005059
 8004ff8:	08005297 	.word	0x08005297
 8004ffc:	08005297 	.word	0x08005297
 8005000:	08005297 	.word	0x08005297
 8005004:	08005297 	.word	0x08005297
 8005008:	08005297 	.word	0x08005297
 800500c:	08005297 	.word	0x08005297
 8005010:	08005297 	.word	0x08005297
 8005014:	0800507f 	.word	0x0800507f
 8005018:	08005297 	.word	0x08005297
 800501c:	08005297 	.word	0x08005297
 8005020:	08005297 	.word	0x08005297
 8005024:	08005297 	.word	0x08005297
 8005028:	08005297 	.word	0x08005297
 800502c:	08005297 	.word	0x08005297
 8005030:	08005297 	.word	0x08005297
 8005034:	08005085 	.word	0x08005085
 8005038:	08005297 	.word	0x08005297
 800503c:	08005297 	.word	0x08005297
 8005040:	08005297 	.word	0x08005297
 8005044:	08005297 	.word	0x08005297
 8005048:	08005297 	.word	0x08005297
 800504c:	08005297 	.word	0x08005297
 8005050:	08005297 	.word	0x08005297
 8005054:	0800508b 	.word	0x0800508b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005058:	4b94      	ldr	r3, [pc, #592]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0320 	and.w	r3, r3, #32
 8005060:	2b00      	cmp	r3, #0
 8005062:	d009      	beq.n	8005078 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005064:	4b91      	ldr	r3, [pc, #580]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	08db      	lsrs	r3, r3, #3
 800506a:	f003 0303 	and.w	r3, r3, #3
 800506e:	4a90      	ldr	r2, [pc, #576]	@ (80052b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005070:	fa22 f303 	lsr.w	r3, r2, r3
 8005074:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005076:	e111      	b.n	800529c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005078:	4b8d      	ldr	r3, [pc, #564]	@ (80052b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800507a:	61bb      	str	r3, [r7, #24]
      break;
 800507c:	e10e      	b.n	800529c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800507e:	4b8d      	ldr	r3, [pc, #564]	@ (80052b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005080:	61bb      	str	r3, [r7, #24]
      break;
 8005082:	e10b      	b.n	800529c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005084:	4b8c      	ldr	r3, [pc, #560]	@ (80052b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005086:	61bb      	str	r3, [r7, #24]
      break;
 8005088:	e108      	b.n	800529c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800508a:	4b88      	ldr	r3, [pc, #544]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800508c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508e:	f003 0303 	and.w	r3, r3, #3
 8005092:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005094:	4b85      	ldr	r3, [pc, #532]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005098:	091b      	lsrs	r3, r3, #4
 800509a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800509e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80050a0:	4b82      	ldr	r3, [pc, #520]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80050aa:	4b80      	ldr	r3, [pc, #512]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050ae:	08db      	lsrs	r3, r3, #3
 80050b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	fb02 f303 	mul.w	r3, r2, r3
 80050ba:	ee07 3a90 	vmov	s15, r3
 80050be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050c2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 80e1 	beq.w	8005290 <HAL_RCC_GetSysClockFreq+0x2b8>
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	f000 8083 	beq.w	80051dc <HAL_RCC_GetSysClockFreq+0x204>
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	2b02      	cmp	r3, #2
 80050da:	f200 80a1 	bhi.w	8005220 <HAL_RCC_GetSysClockFreq+0x248>
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d003      	beq.n	80050ec <HAL_RCC_GetSysClockFreq+0x114>
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d056      	beq.n	8005198 <HAL_RCC_GetSysClockFreq+0x1c0>
 80050ea:	e099      	b.n	8005220 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050ec:	4b6f      	ldr	r3, [pc, #444]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0320 	and.w	r3, r3, #32
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d02d      	beq.n	8005154 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050f8:	4b6c      	ldr	r3, [pc, #432]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	08db      	lsrs	r3, r3, #3
 80050fe:	f003 0303 	and.w	r3, r3, #3
 8005102:	4a6b      	ldr	r2, [pc, #428]	@ (80052b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005104:	fa22 f303 	lsr.w	r3, r2, r3
 8005108:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	ee07 3a90 	vmov	s15, r3
 8005110:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	ee07 3a90 	vmov	s15, r3
 800511a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800511e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005122:	4b62      	ldr	r3, [pc, #392]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800512a:	ee07 3a90 	vmov	s15, r3
 800512e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005132:	ed97 6a02 	vldr	s12, [r7, #8]
 8005136:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80052bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800513a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800513e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005142:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800514a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800514e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005152:	e087      	b.n	8005264 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	ee07 3a90 	vmov	s15, r3
 800515a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800515e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80052c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005166:	4b51      	ldr	r3, [pc, #324]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800516a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800516e:	ee07 3a90 	vmov	s15, r3
 8005172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005176:	ed97 6a02 	vldr	s12, [r7, #8]
 800517a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80052bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800517e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005186:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800518a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800518e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005192:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005196:	e065      	b.n	8005264 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	ee07 3a90 	vmov	s15, r3
 800519e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051a2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80052c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80051a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051aa:	4b40      	ldr	r3, [pc, #256]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051b2:	ee07 3a90 	vmov	s15, r3
 80051b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80051be:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80052bc <HAL_RCC_GetSysClockFreq+0x2e4>
 80051c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80051da:	e043      	b.n	8005264 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	ee07 3a90 	vmov	s15, r3
 80051e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80052c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80051ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ee:	4b2f      	ldr	r3, [pc, #188]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f6:	ee07 3a90 	vmov	s15, r3
 80051fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005202:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80052bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800520a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800520e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800521a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800521e:	e021      	b.n	8005264 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	ee07 3a90 	vmov	s15, r3
 8005226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800522a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80052c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800522e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005232:	4b1e      	ldr	r3, [pc, #120]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800523a:	ee07 3a90 	vmov	s15, r3
 800523e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005242:	ed97 6a02 	vldr	s12, [r7, #8]
 8005246:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80052bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800524a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800524e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005252:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800525a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800525e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005262:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005264:	4b11      	ldr	r3, [pc, #68]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005268:	0a5b      	lsrs	r3, r3, #9
 800526a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800526e:	3301      	adds	r3, #1
 8005270:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	ee07 3a90 	vmov	s15, r3
 8005278:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800527c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005280:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005284:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005288:	ee17 3a90 	vmov	r3, s15
 800528c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800528e:	e005      	b.n	800529c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	61bb      	str	r3, [r7, #24]
      break;
 8005294:	e002      	b.n	800529c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005296:	4b07      	ldr	r3, [pc, #28]	@ (80052b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005298:	61bb      	str	r3, [r7, #24]
      break;
 800529a:	bf00      	nop
  }

  return sysclockfreq;
 800529c:	69bb      	ldr	r3, [r7, #24]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3724      	adds	r7, #36	@ 0x24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	58024400 	.word	0x58024400
 80052b0:	03d09000 	.word	0x03d09000
 80052b4:	003d0900 	.word	0x003d0900
 80052b8:	016e3600 	.word	0x016e3600
 80052bc:	46000000 	.word	0x46000000
 80052c0:	4c742400 	.word	0x4c742400
 80052c4:	4a742400 	.word	0x4a742400
 80052c8:	4bb71b00 	.word	0x4bb71b00

080052cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80052d2:	f7ff fe81 	bl	8004fd8 <HAL_RCC_GetSysClockFreq>
 80052d6:	4602      	mov	r2, r0
 80052d8:	4b10      	ldr	r3, [pc, #64]	@ (800531c <HAL_RCC_GetHCLKFreq+0x50>)
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	0a1b      	lsrs	r3, r3, #8
 80052de:	f003 030f 	and.w	r3, r3, #15
 80052e2:	490f      	ldr	r1, [pc, #60]	@ (8005320 <HAL_RCC_GetHCLKFreq+0x54>)
 80052e4:	5ccb      	ldrb	r3, [r1, r3]
 80052e6:	f003 031f 	and.w	r3, r3, #31
 80052ea:	fa22 f303 	lsr.w	r3, r2, r3
 80052ee:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80052f0:	4b0a      	ldr	r3, [pc, #40]	@ (800531c <HAL_RCC_GetHCLKFreq+0x50>)
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	f003 030f 	and.w	r3, r3, #15
 80052f8:	4a09      	ldr	r2, [pc, #36]	@ (8005320 <HAL_RCC_GetHCLKFreq+0x54>)
 80052fa:	5cd3      	ldrb	r3, [r2, r3]
 80052fc:	f003 031f 	and.w	r3, r3, #31
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	fa22 f303 	lsr.w	r3, r2, r3
 8005306:	4a07      	ldr	r2, [pc, #28]	@ (8005324 <HAL_RCC_GetHCLKFreq+0x58>)
 8005308:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800530a:	4a07      	ldr	r2, [pc, #28]	@ (8005328 <HAL_RCC_GetHCLKFreq+0x5c>)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005310:	4b04      	ldr	r3, [pc, #16]	@ (8005324 <HAL_RCC_GetHCLKFreq+0x58>)
 8005312:	681b      	ldr	r3, [r3, #0]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3708      	adds	r7, #8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	58024400 	.word	0x58024400
 8005320:	0800d250 	.word	0x0800d250
 8005324:	24000018 	.word	0x24000018
 8005328:	24000014 	.word	0x24000014

0800532c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005330:	f7ff ffcc 	bl	80052cc <HAL_RCC_GetHCLKFreq>
 8005334:	4602      	mov	r2, r0
 8005336:	4b06      	ldr	r3, [pc, #24]	@ (8005350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	091b      	lsrs	r3, r3, #4
 800533c:	f003 0307 	and.w	r3, r3, #7
 8005340:	4904      	ldr	r1, [pc, #16]	@ (8005354 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005342:	5ccb      	ldrb	r3, [r1, r3]
 8005344:	f003 031f 	and.w	r3, r3, #31
 8005348:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800534c:	4618      	mov	r0, r3
 800534e:	bd80      	pop	{r7, pc}
 8005350:	58024400 	.word	0x58024400
 8005354:	0800d250 	.word	0x0800d250

08005358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800535c:	f7ff ffb6 	bl	80052cc <HAL_RCC_GetHCLKFreq>
 8005360:	4602      	mov	r2, r0
 8005362:	4b06      	ldr	r3, [pc, #24]	@ (800537c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	0a1b      	lsrs	r3, r3, #8
 8005368:	f003 0307 	and.w	r3, r3, #7
 800536c:	4904      	ldr	r1, [pc, #16]	@ (8005380 <HAL_RCC_GetPCLK2Freq+0x28>)
 800536e:	5ccb      	ldrb	r3, [r1, r3]
 8005370:	f003 031f 	and.w	r3, r3, #31
 8005374:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005378:	4618      	mov	r0, r3
 800537a:	bd80      	pop	{r7, pc}
 800537c:	58024400 	.word	0x58024400
 8005380:	0800d250 	.word	0x0800d250

08005384 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005388:	b0c8      	sub	sp, #288	@ 0x120
 800538a:	af00      	add	r7, sp, #0
 800538c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005390:	2300      	movs	r3, #0
 8005392:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005396:	2300      	movs	r3, #0
 8005398:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800539c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80053a8:	2500      	movs	r5, #0
 80053aa:	ea54 0305 	orrs.w	r3, r4, r5
 80053ae:	d049      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80053b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80053ba:	d02f      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80053bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80053c0:	d828      	bhi.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80053c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053c6:	d01a      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80053c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053cc:	d822      	bhi.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80053d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053d6:	d007      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80053d8:	e01c      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053da:	4ba7      	ldr	r3, [pc, #668]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053de:	4aa6      	ldr	r2, [pc, #664]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80053e6:	e01a      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80053e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053ec:	3308      	adds	r3, #8
 80053ee:	2102      	movs	r1, #2
 80053f0:	4618      	mov	r0, r3
 80053f2:	f002 fa6d 	bl	80078d0 <RCCEx_PLL2_Config>
 80053f6:	4603      	mov	r3, r0
 80053f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80053fc:	e00f      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005402:	3328      	adds	r3, #40	@ 0x28
 8005404:	2102      	movs	r1, #2
 8005406:	4618      	mov	r0, r3
 8005408:	f002 fb14 	bl	8007a34 <RCCEx_PLL3_Config>
 800540c:	4603      	mov	r3, r0
 800540e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005412:	e004      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800541a:	e000      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800541c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800541e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10a      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005426:	4b94      	ldr	r3, [pc, #592]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005428:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800542a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800542e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005432:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005434:	4a90      	ldr	r2, [pc, #576]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005436:	430b      	orrs	r3, r1
 8005438:	6513      	str	r3, [r2, #80]	@ 0x50
 800543a:	e003      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800543c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005440:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005444:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005450:	f04f 0900 	mov.w	r9, #0
 8005454:	ea58 0309 	orrs.w	r3, r8, r9
 8005458:	d047      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800545a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800545e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005460:	2b04      	cmp	r3, #4
 8005462:	d82a      	bhi.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005464:	a201      	add	r2, pc, #4	@ (adr r2, 800546c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546a:	bf00      	nop
 800546c:	08005481 	.word	0x08005481
 8005470:	0800548f 	.word	0x0800548f
 8005474:	080054a5 	.word	0x080054a5
 8005478:	080054c3 	.word	0x080054c3
 800547c:	080054c3 	.word	0x080054c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005480:	4b7d      	ldr	r3, [pc, #500]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005484:	4a7c      	ldr	r2, [pc, #496]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005486:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800548a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800548c:	e01a      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800548e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005492:	3308      	adds	r3, #8
 8005494:	2100      	movs	r1, #0
 8005496:	4618      	mov	r0, r3
 8005498:	f002 fa1a 	bl	80078d0 <RCCEx_PLL2_Config>
 800549c:	4603      	mov	r3, r0
 800549e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054a2:	e00f      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054a8:	3328      	adds	r3, #40	@ 0x28
 80054aa:	2100      	movs	r1, #0
 80054ac:	4618      	mov	r0, r3
 80054ae:	f002 fac1 	bl	8007a34 <RCCEx_PLL3_Config>
 80054b2:	4603      	mov	r3, r0
 80054b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054b8:	e004      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80054c0:	e000      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80054c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10a      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054cc:	4b6a      	ldr	r3, [pc, #424]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054d0:	f023 0107 	bic.w	r1, r3, #7
 80054d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054da:	4a67      	ldr	r2, [pc, #412]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054dc:	430b      	orrs	r3, r1
 80054de:	6513      	str	r3, [r2, #80]	@ 0x50
 80054e0:	e003      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80054e6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80054ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80054f6:	f04f 0b00 	mov.w	fp, #0
 80054fa:	ea5a 030b 	orrs.w	r3, sl, fp
 80054fe:	d054      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8005500:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005504:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005506:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800550a:	d036      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800550c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005510:	d82f      	bhi.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005512:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005516:	d032      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005518:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800551c:	d829      	bhi.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800551e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005520:	d02f      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8005522:	2bc0      	cmp	r3, #192	@ 0xc0
 8005524:	d825      	bhi.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005526:	2b80      	cmp	r3, #128	@ 0x80
 8005528:	d018      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800552a:	2b80      	cmp	r3, #128	@ 0x80
 800552c:	d821      	bhi.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800552e:	2b00      	cmp	r3, #0
 8005530:	d002      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8005532:	2b40      	cmp	r3, #64	@ 0x40
 8005534:	d007      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8005536:	e01c      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005538:	4b4f      	ldr	r3, [pc, #316]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800553a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553c:	4a4e      	ldr	r2, [pc, #312]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800553e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005542:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005544:	e01e      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005546:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800554a:	3308      	adds	r3, #8
 800554c:	2100      	movs	r1, #0
 800554e:	4618      	mov	r0, r3
 8005550:	f002 f9be 	bl	80078d0 <RCCEx_PLL2_Config>
 8005554:	4603      	mov	r3, r0
 8005556:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800555a:	e013      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800555c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005560:	3328      	adds	r3, #40	@ 0x28
 8005562:	2100      	movs	r1, #0
 8005564:	4618      	mov	r0, r3
 8005566:	f002 fa65 	bl	8007a34 <RCCEx_PLL3_Config>
 800556a:	4603      	mov	r3, r0
 800556c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005570:	e008      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005578:	e004      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800557a:	bf00      	nop
 800557c:	e002      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800557e:	bf00      	nop
 8005580:	e000      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005582:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005584:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10a      	bne.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800558c:	4b3a      	ldr	r3, [pc, #232]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800558e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005590:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005594:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800559a:	4a37      	ldr	r2, [pc, #220]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800559c:	430b      	orrs	r3, r1
 800559e:	6513      	str	r3, [r2, #80]	@ 0x50
 80055a0:	e003      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80055a6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80055aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80055b6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80055ba:	2300      	movs	r3, #0
 80055bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80055c0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80055c4:	460b      	mov	r3, r1
 80055c6:	4313      	orrs	r3, r2
 80055c8:	d05c      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80055ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055d0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80055d4:	d03b      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80055d6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80055da:	d834      	bhi.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80055dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055e0:	d037      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80055e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055e6:	d82e      	bhi.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80055e8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80055ec:	d033      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80055ee:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80055f2:	d828      	bhi.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80055f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055f8:	d01a      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80055fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055fe:	d822      	bhi.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005600:	2b00      	cmp	r3, #0
 8005602:	d003      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8005604:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005608:	d007      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800560a:	e01c      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800560c:	4b1a      	ldr	r3, [pc, #104]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800560e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005610:	4a19      	ldr	r2, [pc, #100]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005612:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005616:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005618:	e01e      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800561a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800561e:	3308      	adds	r3, #8
 8005620:	2100      	movs	r1, #0
 8005622:	4618      	mov	r0, r3
 8005624:	f002 f954 	bl	80078d0 <RCCEx_PLL2_Config>
 8005628:	4603      	mov	r3, r0
 800562a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800562e:	e013      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005630:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005634:	3328      	adds	r3, #40	@ 0x28
 8005636:	2100      	movs	r1, #0
 8005638:	4618      	mov	r0, r3
 800563a:	f002 f9fb 	bl	8007a34 <RCCEx_PLL3_Config>
 800563e:	4603      	mov	r3, r0
 8005640:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005644:	e008      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800564c:	e004      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800564e:	bf00      	nop
 8005650:	e002      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005652:	bf00      	nop
 8005654:	e000      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005656:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005658:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10d      	bne.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8005660:	4b05      	ldr	r3, [pc, #20]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005664:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8005668:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800566c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800566e:	4a02      	ldr	r2, [pc, #8]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005670:	430b      	orrs	r3, r1
 8005672:	6513      	str	r3, [r2, #80]	@ 0x50
 8005674:	e006      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8005676:	bf00      	nop
 8005678:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800567c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005680:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005684:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005690:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005694:	2300      	movs	r3, #0
 8005696:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800569a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800569e:	460b      	mov	r3, r1
 80056a0:	4313      	orrs	r3, r2
 80056a2:	d03a      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80056a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056aa:	2b30      	cmp	r3, #48	@ 0x30
 80056ac:	d01f      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80056ae:	2b30      	cmp	r3, #48	@ 0x30
 80056b0:	d819      	bhi.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80056b2:	2b20      	cmp	r3, #32
 80056b4:	d00c      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80056b6:	2b20      	cmp	r3, #32
 80056b8:	d815      	bhi.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d019      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80056be:	2b10      	cmp	r3, #16
 80056c0:	d111      	bne.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056c2:	4bae      	ldr	r3, [pc, #696]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80056c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c6:	4aad      	ldr	r2, [pc, #692]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80056c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80056ce:	e011      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80056d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056d4:	3308      	adds	r3, #8
 80056d6:	2102      	movs	r1, #2
 80056d8:	4618      	mov	r0, r3
 80056da:	f002 f8f9 	bl	80078d0 <RCCEx_PLL2_Config>
 80056de:	4603      	mov	r3, r0
 80056e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80056e4:	e006      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80056ec:	e002      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80056ee:	bf00      	nop
 80056f0:	e000      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80056f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10a      	bne.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80056fc:	4b9f      	ldr	r3, [pc, #636]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80056fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005700:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005704:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800570a:	4a9c      	ldr	r2, [pc, #624]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800570c:	430b      	orrs	r3, r1
 800570e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005710:	e003      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005712:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005716:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800571a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800571e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005722:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005726:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800572a:	2300      	movs	r3, #0
 800572c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005730:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005734:	460b      	mov	r3, r1
 8005736:	4313      	orrs	r3, r2
 8005738:	d051      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800573a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800573e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005740:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005744:	d035      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005746:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800574a:	d82e      	bhi.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x426>
 800574c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005750:	d031      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8005752:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005756:	d828      	bhi.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005758:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800575c:	d01a      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800575e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005762:	d822      	bhi.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005764:	2b00      	cmp	r3, #0
 8005766:	d003      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005768:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800576c:	d007      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800576e:	e01c      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005770:	4b82      	ldr	r3, [pc, #520]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005774:	4a81      	ldr	r2, [pc, #516]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005776:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800577a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800577c:	e01c      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800577e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005782:	3308      	adds	r3, #8
 8005784:	2100      	movs	r1, #0
 8005786:	4618      	mov	r0, r3
 8005788:	f002 f8a2 	bl	80078d0 <RCCEx_PLL2_Config>
 800578c:	4603      	mov	r3, r0
 800578e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005792:	e011      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005794:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005798:	3328      	adds	r3, #40	@ 0x28
 800579a:	2100      	movs	r1, #0
 800579c:	4618      	mov	r0, r3
 800579e:	f002 f949 	bl	8007a34 <RCCEx_PLL3_Config>
 80057a2:	4603      	mov	r3, r0
 80057a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057a8:	e006      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80057b0:	e002      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80057b2:	bf00      	nop
 80057b4:	e000      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80057b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10a      	bne.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80057c0:	4b6e      	ldr	r3, [pc, #440]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80057c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057c4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80057c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057ce:	4a6b      	ldr	r2, [pc, #428]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80057d0:	430b      	orrs	r3, r1
 80057d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80057d4:	e003      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80057da:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80057de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80057ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80057ee:	2300      	movs	r3, #0
 80057f0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80057f4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80057f8:	460b      	mov	r3, r1
 80057fa:	4313      	orrs	r3, r2
 80057fc:	d053      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80057fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005802:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005804:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005808:	d033      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800580a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800580e:	d82c      	bhi.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005810:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005814:	d02f      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8005816:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800581a:	d826      	bhi.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800581c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005820:	d02b      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005822:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005826:	d820      	bhi.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005828:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800582c:	d012      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800582e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005832:	d81a      	bhi.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005834:	2b00      	cmp	r3, #0
 8005836:	d022      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8005838:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800583c:	d115      	bne.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800583e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005842:	3308      	adds	r3, #8
 8005844:	2101      	movs	r1, #1
 8005846:	4618      	mov	r0, r3
 8005848:	f002 f842 	bl	80078d0 <RCCEx_PLL2_Config>
 800584c:	4603      	mov	r3, r0
 800584e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005852:	e015      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005854:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005858:	3328      	adds	r3, #40	@ 0x28
 800585a:	2101      	movs	r1, #1
 800585c:	4618      	mov	r0, r3
 800585e:	f002 f8e9 	bl	8007a34 <RCCEx_PLL3_Config>
 8005862:	4603      	mov	r3, r0
 8005864:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005868:	e00a      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005870:	e006      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005872:	bf00      	nop
 8005874:	e004      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005876:	bf00      	nop
 8005878:	e002      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800587a:	bf00      	nop
 800587c:	e000      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800587e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005880:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10a      	bne.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005888:	4b3c      	ldr	r3, [pc, #240]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800588a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800588c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005890:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005894:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005896:	4a39      	ldr	r2, [pc, #228]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005898:	430b      	orrs	r3, r1
 800589a:	6513      	str	r3, [r2, #80]	@ 0x50
 800589c:	e003      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800589e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80058a2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80058a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ae:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80058b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80058b6:	2300      	movs	r3, #0
 80058b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80058bc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80058c0:	460b      	mov	r3, r1
 80058c2:	4313      	orrs	r3, r2
 80058c4:	d060      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80058c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80058ce:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80058d2:	d039      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80058d4:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80058d8:	d832      	bhi.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80058da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058de:	d035      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80058e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058e4:	d82c      	bhi.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80058e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ea:	d031      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80058ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058f0:	d826      	bhi.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80058f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80058f6:	d02d      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80058f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80058fc:	d820      	bhi.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80058fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005902:	d012      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005904:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005908:	d81a      	bhi.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800590a:	2b00      	cmp	r3, #0
 800590c:	d024      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800590e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005912:	d115      	bne.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005914:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005918:	3308      	adds	r3, #8
 800591a:	2101      	movs	r1, #1
 800591c:	4618      	mov	r0, r3
 800591e:	f001 ffd7 	bl	80078d0 <RCCEx_PLL2_Config>
 8005922:	4603      	mov	r3, r0
 8005924:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005928:	e017      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800592a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800592e:	3328      	adds	r3, #40	@ 0x28
 8005930:	2101      	movs	r1, #1
 8005932:	4618      	mov	r0, r3
 8005934:	f002 f87e 	bl	8007a34 <RCCEx_PLL3_Config>
 8005938:	4603      	mov	r3, r0
 800593a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800593e:	e00c      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005946:	e008      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005948:	bf00      	nop
 800594a:	e006      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800594c:	bf00      	nop
 800594e:	e004      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005950:	bf00      	nop
 8005952:	e002      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005954:	bf00      	nop
 8005956:	e000      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005958:	bf00      	nop
    }

    if (ret == HAL_OK)
 800595a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10e      	bne.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005962:	4b06      	ldr	r3, [pc, #24]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005966:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800596a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800596e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005972:	4a02      	ldr	r2, [pc, #8]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005974:	430b      	orrs	r3, r1
 8005976:	6593      	str	r3, [r2, #88]	@ 0x58
 8005978:	e006      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800597a:	bf00      	nop
 800597c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005980:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005984:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005988:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800598c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005990:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005994:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005998:	2300      	movs	r3, #0
 800599a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800599e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80059a2:	460b      	mov	r3, r1
 80059a4:	4313      	orrs	r3, r2
 80059a6:	d037      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80059a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80059ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059b2:	d00e      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80059b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059b8:	d816      	bhi.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d018      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80059be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059c2:	d111      	bne.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059c4:	4bc4      	ldr	r3, [pc, #784]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c8:	4ac3      	ldr	r2, [pc, #780]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80059d0:	e00f      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059d6:	3308      	adds	r3, #8
 80059d8:	2101      	movs	r1, #1
 80059da:	4618      	mov	r0, r3
 80059dc:	f001 ff78 	bl	80078d0 <RCCEx_PLL2_Config>
 80059e0:	4603      	mov	r3, r0
 80059e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80059e6:	e004      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80059ee:	e000      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80059f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10a      	bne.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80059fa:	4bb7      	ldr	r3, [pc, #732]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059fe:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005a02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a08:	4ab3      	ldr	r2, [pc, #716]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a0a:	430b      	orrs	r3, r1
 8005a0c:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a0e:	e003      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a14:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005a18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a20:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005a24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a28:	2300      	movs	r3, #0
 8005a2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005a2e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005a32:	460b      	mov	r3, r1
 8005a34:	4313      	orrs	r3, r2
 8005a36:	d039      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005a38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a3e:	2b03      	cmp	r3, #3
 8005a40:	d81c      	bhi.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005a42:	a201      	add	r2, pc, #4	@ (adr r2, 8005a48 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a48:	08005a85 	.word	0x08005a85
 8005a4c:	08005a59 	.word	0x08005a59
 8005a50:	08005a67 	.word	0x08005a67
 8005a54:	08005a85 	.word	0x08005a85
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a58:	4b9f      	ldr	r3, [pc, #636]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5c:	4a9e      	ldr	r2, [pc, #632]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005a64:	e00f      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a6a:	3308      	adds	r3, #8
 8005a6c:	2102      	movs	r1, #2
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f001 ff2e 	bl	80078d0 <RCCEx_PLL2_Config>
 8005a74:	4603      	mov	r3, r0
 8005a76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005a7a:	e004      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005a82:	e000      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005a84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a86:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10a      	bne.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005a8e:	4b92      	ldr	r3, [pc, #584]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a92:	f023 0103 	bic.w	r1, r3, #3
 8005a96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a9c:	4a8e      	ldr	r2, [pc, #568]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a9e:	430b      	orrs	r3, r1
 8005aa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005aa2:	e003      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005aa8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005aac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005ab8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005abc:	2300      	movs	r3, #0
 8005abe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ac2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	f000 8099 	beq.w	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ace:	4b83      	ldr	r3, [pc, #524]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a82      	ldr	r2, [pc, #520]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ad8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ada:	f7fc fd6b 	bl	80025b4 <HAL_GetTick>
 8005ade:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ae2:	e00b      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ae4:	f7fc fd66 	bl	80025b4 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	2b64      	cmp	r3, #100	@ 0x64
 8005af2:	d903      	bls.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005afa:	e005      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005afc:	4b77      	ldr	r3, [pc, #476]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d0ed      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005b08:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d173      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005b10:	4b71      	ldr	r3, [pc, #452]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b12:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005b14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b1c:	4053      	eors	r3, r2
 8005b1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d015      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b26:	4b6c      	ldr	r3, [pc, #432]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b2e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b32:	4b69      	ldr	r3, [pc, #420]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b36:	4a68      	ldr	r2, [pc, #416]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b3c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b3e:	4b66      	ldr	r3, [pc, #408]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b42:	4a65      	ldr	r2, [pc, #404]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b48:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005b4a:	4a63      	ldr	r2, [pc, #396]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b50:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005b52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b5e:	d118      	bne.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b60:	f7fc fd28 	bl	80025b4 <HAL_GetTick>
 8005b64:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b68:	e00d      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b6a:	f7fc fd23 	bl	80025b4 <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005b74:	1ad2      	subs	r2, r2, r3
 8005b76:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d903      	bls.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8005b84:	e005      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b86:	4b54      	ldr	r3, [pc, #336]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d0eb      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005b92:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d129      	bne.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ba2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ba6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005baa:	d10e      	bne.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005bac:	4b4a      	ldr	r3, [pc, #296]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bb8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005bbc:	091a      	lsrs	r2, r3, #4
 8005bbe:	4b48      	ldr	r3, [pc, #288]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	4a45      	ldr	r2, [pc, #276]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bc4:	430b      	orrs	r3, r1
 8005bc6:	6113      	str	r3, [r2, #16]
 8005bc8:	e005      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005bca:	4b43      	ldr	r3, [pc, #268]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	4a42      	ldr	r2, [pc, #264]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bd0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005bd4:	6113      	str	r3, [r2, #16]
 8005bd6:	4b40      	ldr	r3, [pc, #256]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bd8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005bda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005be2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005be6:	4a3c      	ldr	r2, [pc, #240]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005be8:	430b      	orrs	r3, r1
 8005bea:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bec:	e008      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005bee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005bf2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8005bf6:	e003      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005bfc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005c00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c08:	f002 0301 	and.w	r3, r2, #1
 8005c0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c10:	2300      	movs	r3, #0
 8005c12:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c16:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	f000 8090 	beq.w	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005c22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c2a:	2b28      	cmp	r3, #40	@ 0x28
 8005c2c:	d870      	bhi.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c34 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c34:	08005d19 	.word	0x08005d19
 8005c38:	08005d11 	.word	0x08005d11
 8005c3c:	08005d11 	.word	0x08005d11
 8005c40:	08005d11 	.word	0x08005d11
 8005c44:	08005d11 	.word	0x08005d11
 8005c48:	08005d11 	.word	0x08005d11
 8005c4c:	08005d11 	.word	0x08005d11
 8005c50:	08005d11 	.word	0x08005d11
 8005c54:	08005ce5 	.word	0x08005ce5
 8005c58:	08005d11 	.word	0x08005d11
 8005c5c:	08005d11 	.word	0x08005d11
 8005c60:	08005d11 	.word	0x08005d11
 8005c64:	08005d11 	.word	0x08005d11
 8005c68:	08005d11 	.word	0x08005d11
 8005c6c:	08005d11 	.word	0x08005d11
 8005c70:	08005d11 	.word	0x08005d11
 8005c74:	08005cfb 	.word	0x08005cfb
 8005c78:	08005d11 	.word	0x08005d11
 8005c7c:	08005d11 	.word	0x08005d11
 8005c80:	08005d11 	.word	0x08005d11
 8005c84:	08005d11 	.word	0x08005d11
 8005c88:	08005d11 	.word	0x08005d11
 8005c8c:	08005d11 	.word	0x08005d11
 8005c90:	08005d11 	.word	0x08005d11
 8005c94:	08005d19 	.word	0x08005d19
 8005c98:	08005d11 	.word	0x08005d11
 8005c9c:	08005d11 	.word	0x08005d11
 8005ca0:	08005d11 	.word	0x08005d11
 8005ca4:	08005d11 	.word	0x08005d11
 8005ca8:	08005d11 	.word	0x08005d11
 8005cac:	08005d11 	.word	0x08005d11
 8005cb0:	08005d11 	.word	0x08005d11
 8005cb4:	08005d19 	.word	0x08005d19
 8005cb8:	08005d11 	.word	0x08005d11
 8005cbc:	08005d11 	.word	0x08005d11
 8005cc0:	08005d11 	.word	0x08005d11
 8005cc4:	08005d11 	.word	0x08005d11
 8005cc8:	08005d11 	.word	0x08005d11
 8005ccc:	08005d11 	.word	0x08005d11
 8005cd0:	08005d11 	.word	0x08005d11
 8005cd4:	08005d19 	.word	0x08005d19
 8005cd8:	58024400 	.word	0x58024400
 8005cdc:	58024800 	.word	0x58024800
 8005ce0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ce8:	3308      	adds	r3, #8
 8005cea:	2101      	movs	r1, #1
 8005cec:	4618      	mov	r0, r3
 8005cee:	f001 fdef 	bl	80078d0 <RCCEx_PLL2_Config>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005cf8:	e00f      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cfe:	3328      	adds	r3, #40	@ 0x28
 8005d00:	2101      	movs	r1, #1
 8005d02:	4618      	mov	r0, r3
 8005d04:	f001 fe96 	bl	8007a34 <RCCEx_PLL3_Config>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d0e:	e004      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005d16:	e000      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d1a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10b      	bne.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005d22:	4bc0      	ldr	r3, [pc, #768]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d26:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d32:	4abc      	ldr	r2, [pc, #752]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005d34:	430b      	orrs	r3, r1
 8005d36:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d38:	e003      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d3e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4a:	f002 0302 	and.w	r3, r2, #2
 8005d4e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d52:	2300      	movs	r3, #0
 8005d54:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005d58:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	d043      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005d62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d6a:	2b05      	cmp	r3, #5
 8005d6c:	d824      	bhi.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8005d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d74 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8005d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d74:	08005dc1 	.word	0x08005dc1
 8005d78:	08005d8d 	.word	0x08005d8d
 8005d7c:	08005da3 	.word	0x08005da3
 8005d80:	08005dc1 	.word	0x08005dc1
 8005d84:	08005dc1 	.word	0x08005dc1
 8005d88:	08005dc1 	.word	0x08005dc1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d90:	3308      	adds	r3, #8
 8005d92:	2101      	movs	r1, #1
 8005d94:	4618      	mov	r0, r3
 8005d96:	f001 fd9b 	bl	80078d0 <RCCEx_PLL2_Config>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005da0:	e00f      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005da6:	3328      	adds	r3, #40	@ 0x28
 8005da8:	2101      	movs	r1, #1
 8005daa:	4618      	mov	r0, r3
 8005dac:	f001 fe42 	bl	8007a34 <RCCEx_PLL3_Config>
 8005db0:	4603      	mov	r3, r0
 8005db2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005db6:	e004      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005dbe:	e000      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8005dc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dc2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10b      	bne.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005dca:	4b96      	ldr	r3, [pc, #600]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dce:	f023 0107 	bic.w	r1, r3, #7
 8005dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dda:	4a92      	ldr	r2, [pc, #584]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005ddc:	430b      	orrs	r3, r1
 8005dde:	6553      	str	r3, [r2, #84]	@ 0x54
 8005de0:	e003      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005de6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df2:	f002 0304 	and.w	r3, r2, #4
 8005df6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e00:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005e04:	460b      	mov	r3, r1
 8005e06:	4313      	orrs	r3, r2
 8005e08:	d043      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005e0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e12:	2b05      	cmp	r3, #5
 8005e14:	d824      	bhi.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005e16:	a201      	add	r2, pc, #4	@ (adr r2, 8005e1c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8005e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1c:	08005e69 	.word	0x08005e69
 8005e20:	08005e35 	.word	0x08005e35
 8005e24:	08005e4b 	.word	0x08005e4b
 8005e28:	08005e69 	.word	0x08005e69
 8005e2c:	08005e69 	.word	0x08005e69
 8005e30:	08005e69 	.word	0x08005e69
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e38:	3308      	adds	r3, #8
 8005e3a:	2101      	movs	r1, #1
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f001 fd47 	bl	80078d0 <RCCEx_PLL2_Config>
 8005e42:	4603      	mov	r3, r0
 8005e44:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005e48:	e00f      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e4e:	3328      	adds	r3, #40	@ 0x28
 8005e50:	2101      	movs	r1, #1
 8005e52:	4618      	mov	r0, r3
 8005e54:	f001 fdee 	bl	8007a34 <RCCEx_PLL3_Config>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005e5e:	e004      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005e66:	e000      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8005e68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e6a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10b      	bne.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e72:	4b6c      	ldr	r3, [pc, #432]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e76:	f023 0107 	bic.w	r1, r3, #7
 8005e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e82:	4a68      	ldr	r2, [pc, #416]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005e84:	430b      	orrs	r3, r1
 8005e86:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e88:	e003      	b.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e8a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005e8e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9a:	f002 0320 	and.w	r3, r2, #32
 8005e9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ea8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005eac:	460b      	mov	r3, r1
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	d055      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005eb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005eb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005eba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ebe:	d033      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005ec0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ec4:	d82c      	bhi.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eca:	d02f      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ed0:	d826      	bhi.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005ed2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ed6:	d02b      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005ed8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005edc:	d820      	bhi.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005ede:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ee2:	d012      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005ee4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ee8:	d81a      	bhi.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d022      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8005eee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ef2:	d115      	bne.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ef8:	3308      	adds	r3, #8
 8005efa:	2100      	movs	r1, #0
 8005efc:	4618      	mov	r0, r3
 8005efe:	f001 fce7 	bl	80078d0 <RCCEx_PLL2_Config>
 8005f02:	4603      	mov	r3, r0
 8005f04:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f08:	e015      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f0e:	3328      	adds	r3, #40	@ 0x28
 8005f10:	2102      	movs	r1, #2
 8005f12:	4618      	mov	r0, r3
 8005f14:	f001 fd8e 	bl	8007a34 <RCCEx_PLL3_Config>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f1e:	e00a      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005f26:	e006      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005f28:	bf00      	nop
 8005f2a:	e004      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005f2c:	bf00      	nop
 8005f2e:	e002      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005f30:	bf00      	nop
 8005f32:	e000      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f36:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10b      	bne.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f3e:	4b39      	ldr	r3, [pc, #228]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f42:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005f46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f4e:	4a35      	ldr	r2, [pc, #212]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005f50:	430b      	orrs	r3, r1
 8005f52:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f54:	e003      	b.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f56:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f5a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005f5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f66:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005f6e:	2300      	movs	r3, #0
 8005f70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005f74:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005f78:	460b      	mov	r3, r1
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	d058      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005f86:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005f8a:	d033      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005f8c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005f90:	d82c      	bhi.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005f92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f96:	d02f      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005f98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f9c:	d826      	bhi.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005f9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005fa2:	d02b      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005fa4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005fa8:	d820      	bhi.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005faa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fae:	d012      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8005fb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fb4:	d81a      	bhi.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d022      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8005fba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fbe:	d115      	bne.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fc4:	3308      	adds	r3, #8
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f001 fc81 	bl	80078d0 <RCCEx_PLL2_Config>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005fd4:	e015      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fda:	3328      	adds	r3, #40	@ 0x28
 8005fdc:	2102      	movs	r1, #2
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f001 fd28 	bl	8007a34 <RCCEx_PLL3_Config>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005fea:	e00a      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005ff2:	e006      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005ff4:	bf00      	nop
 8005ff6:	e004      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005ff8:	bf00      	nop
 8005ffa:	e002      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005ffc:	bf00      	nop
 8005ffe:	e000      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006002:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10e      	bne.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800600a:	4b06      	ldr	r3, [pc, #24]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800600c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800600e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006012:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006016:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800601a:	4a02      	ldr	r2, [pc, #8]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800601c:	430b      	orrs	r3, r1
 800601e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006020:	e006      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8006022:	bf00      	nop
 8006024:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006028:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800602c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006030:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006038:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800603c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006040:	2300      	movs	r3, #0
 8006042:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006046:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800604a:	460b      	mov	r3, r1
 800604c:	4313      	orrs	r3, r2
 800604e:	d055      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006050:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006054:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006058:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800605c:	d033      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800605e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006062:	d82c      	bhi.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006064:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006068:	d02f      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800606a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800606e:	d826      	bhi.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006070:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006074:	d02b      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006076:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800607a:	d820      	bhi.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800607c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006080:	d012      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8006082:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006086:	d81a      	bhi.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006088:	2b00      	cmp	r3, #0
 800608a:	d022      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800608c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006090:	d115      	bne.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006092:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006096:	3308      	adds	r3, #8
 8006098:	2100      	movs	r1, #0
 800609a:	4618      	mov	r0, r3
 800609c:	f001 fc18 	bl	80078d0 <RCCEx_PLL2_Config>
 80060a0:	4603      	mov	r3, r0
 80060a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80060a6:	e015      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060ac:	3328      	adds	r3, #40	@ 0x28
 80060ae:	2102      	movs	r1, #2
 80060b0:	4618      	mov	r0, r3
 80060b2:	f001 fcbf 	bl	8007a34 <RCCEx_PLL3_Config>
 80060b6:	4603      	mov	r3, r0
 80060b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80060bc:	e00a      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80060c4:	e006      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80060c6:	bf00      	nop
 80060c8:	e004      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80060ca:	bf00      	nop
 80060cc:	e002      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80060ce:	bf00      	nop
 80060d0:	e000      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80060d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d10b      	bne.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80060dc:	4ba1      	ldr	r3, [pc, #644]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80060de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060e0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80060e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80060ec:	4a9d      	ldr	r2, [pc, #628]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80060ee:	430b      	orrs	r3, r1
 80060f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80060f2:	e003      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80060f8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80060fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006104:	f002 0308 	and.w	r3, r2, #8
 8006108:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800610c:	2300      	movs	r3, #0
 800610e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006112:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006116:	460b      	mov	r3, r1
 8006118:	4313      	orrs	r3, r2
 800611a:	d01e      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800611c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006120:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006124:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006128:	d10c      	bne.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800612a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800612e:	3328      	adds	r3, #40	@ 0x28
 8006130:	2102      	movs	r1, #2
 8006132:	4618      	mov	r0, r3
 8006134:	f001 fc7e 	bl	8007a34 <RCCEx_PLL3_Config>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d002      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006144:	4b87      	ldr	r3, [pc, #540]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006148:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800614c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006150:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006154:	4a83      	ldr	r2, [pc, #524]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006156:	430b      	orrs	r3, r1
 8006158:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800615a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800615e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006162:	f002 0310 	and.w	r3, r2, #16
 8006166:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800616a:	2300      	movs	r3, #0
 800616c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006170:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006174:	460b      	mov	r3, r1
 8006176:	4313      	orrs	r3, r2
 8006178:	d01e      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800617a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800617e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006182:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006186:	d10c      	bne.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006188:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800618c:	3328      	adds	r3, #40	@ 0x28
 800618e:	2102      	movs	r1, #2
 8006190:	4618      	mov	r0, r3
 8006192:	f001 fc4f 	bl	8007a34 <RCCEx_PLL3_Config>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d002      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80061a2:	4b70      	ldr	r3, [pc, #448]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80061a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80061aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80061b2:	4a6c      	ldr	r2, [pc, #432]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80061b4:	430b      	orrs	r3, r1
 80061b6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80061c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80061c8:	2300      	movs	r3, #0
 80061ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80061ce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80061d2:	460b      	mov	r3, r1
 80061d4:	4313      	orrs	r3, r2
 80061d6:	d03e      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80061d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80061e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061e4:	d022      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80061e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061ea:	d81b      	bhi.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d003      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80061f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061f4:	d00b      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80061f6:	e015      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061fc:	3308      	adds	r3, #8
 80061fe:	2100      	movs	r1, #0
 8006200:	4618      	mov	r0, r3
 8006202:	f001 fb65 	bl	80078d0 <RCCEx_PLL2_Config>
 8006206:	4603      	mov	r3, r0
 8006208:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800620c:	e00f      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800620e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006212:	3328      	adds	r3, #40	@ 0x28
 8006214:	2102      	movs	r1, #2
 8006216:	4618      	mov	r0, r3
 8006218:	f001 fc0c 	bl	8007a34 <RCCEx_PLL3_Config>
 800621c:	4603      	mov	r3, r0
 800621e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006222:	e004      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800622a:	e000      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800622c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800622e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10b      	bne.n	800624e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006236:	4b4b      	ldr	r3, [pc, #300]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800623a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800623e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006242:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006246:	4a47      	ldr	r2, [pc, #284]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006248:	430b      	orrs	r3, r1
 800624a:	6593      	str	r3, [r2, #88]	@ 0x58
 800624c:	e003      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800624e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006252:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006256:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800625a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006262:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006264:	2300      	movs	r3, #0
 8006266:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006268:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800626c:	460b      	mov	r3, r1
 800626e:	4313      	orrs	r3, r2
 8006270:	d03b      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006272:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800627a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800627e:	d01f      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8006280:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006284:	d818      	bhi.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006286:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800628a:	d003      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800628c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006290:	d007      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8006292:	e011      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006294:	4b33      	ldr	r3, [pc, #204]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006298:	4a32      	ldr	r2, [pc, #200]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800629a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800629e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80062a0:	e00f      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062a6:	3328      	adds	r3, #40	@ 0x28
 80062a8:	2101      	movs	r1, #1
 80062aa:	4618      	mov	r0, r3
 80062ac:	f001 fbc2 	bl	8007a34 <RCCEx_PLL3_Config>
 80062b0:	4603      	mov	r3, r0
 80062b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80062b6:	e004      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80062be:	e000      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80062c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10b      	bne.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062ca:	4b26      	ldr	r3, [pc, #152]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80062cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062ce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80062d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062da:	4a22      	ldr	r2, [pc, #136]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80062dc:	430b      	orrs	r3, r1
 80062de:	6553      	str	r3, [r2, #84]	@ 0x54
 80062e0:	e003      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80062e6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80062ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80062f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80062f8:	2300      	movs	r3, #0
 80062fa:	677b      	str	r3, [r7, #116]	@ 0x74
 80062fc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006300:	460b      	mov	r3, r1
 8006302:	4313      	orrs	r3, r2
 8006304:	d034      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006306:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800630a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800630c:	2b00      	cmp	r3, #0
 800630e:	d003      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8006310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006314:	d007      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8006316:	e011      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006318:	4b12      	ldr	r3, [pc, #72]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800631a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800631c:	4a11      	ldr	r2, [pc, #68]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800631e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006322:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006324:	e00e      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006326:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800632a:	3308      	adds	r3, #8
 800632c:	2102      	movs	r1, #2
 800632e:	4618      	mov	r0, r3
 8006330:	f001 face 	bl	80078d0 <RCCEx_PLL2_Config>
 8006334:	4603      	mov	r3, r0
 8006336:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800633a:	e003      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006342:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006344:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10d      	bne.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800634c:	4b05      	ldr	r3, [pc, #20]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800634e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006350:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006354:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800635a:	4a02      	ldr	r2, [pc, #8]	@ (8006364 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800635c:	430b      	orrs	r3, r1
 800635e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006360:	e006      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006362:	bf00      	nop
 8006364:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006368:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800636c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006370:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006378:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800637c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800637e:	2300      	movs	r3, #0
 8006380:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006382:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006386:	460b      	mov	r3, r1
 8006388:	4313      	orrs	r3, r2
 800638a:	d00c      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800638c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006390:	3328      	adds	r3, #40	@ 0x28
 8006392:	2102      	movs	r1, #2
 8006394:	4618      	mov	r0, r3
 8006396:	f001 fb4d 	bl	8007a34 <RCCEx_PLL3_Config>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d002      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80063a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ae:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80063b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80063b4:	2300      	movs	r3, #0
 80063b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80063b8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80063bc:	460b      	mov	r3, r1
 80063be:	4313      	orrs	r3, r2
 80063c0:	d038      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80063c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063ce:	d018      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80063d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063d4:	d811      	bhi.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80063d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063da:	d014      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80063dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063e0:	d80b      	bhi.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d011      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80063e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063ea:	d106      	bne.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063ec:	4bc3      	ldr	r3, [pc, #780]	@ (80066fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80063ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f0:	4ac2      	ldr	r2, [pc, #776]	@ (80066fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80063f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80063f8:	e008      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006400:	e004      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006402:	bf00      	nop
 8006404:	e002      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006406:	bf00      	nop
 8006408:	e000      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800640a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800640c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10b      	bne.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006414:	4bb9      	ldr	r3, [pc, #740]	@ (80066fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006418:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800641c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006424:	4ab5      	ldr	r2, [pc, #724]	@ (80066fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006426:	430b      	orrs	r3, r1
 8006428:	6553      	str	r3, [r2, #84]	@ 0x54
 800642a:	e003      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800642c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006430:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006434:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006440:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006442:	2300      	movs	r3, #0
 8006444:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006446:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800644a:	460b      	mov	r3, r1
 800644c:	4313      	orrs	r3, r2
 800644e:	d009      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006450:	4baa      	ldr	r3, [pc, #680]	@ (80066fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006454:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006458:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800645c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800645e:	4aa7      	ldr	r2, [pc, #668]	@ (80066fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006460:	430b      	orrs	r3, r1
 8006462:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006464:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006470:	653b      	str	r3, [r7, #80]	@ 0x50
 8006472:	2300      	movs	r3, #0
 8006474:	657b      	str	r3, [r7, #84]	@ 0x54
 8006476:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800647a:	460b      	mov	r3, r1
 800647c:	4313      	orrs	r3, r2
 800647e:	d009      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006480:	4b9e      	ldr	r3, [pc, #632]	@ (80066fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006484:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006488:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800648c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800648e:	4a9b      	ldr	r2, [pc, #620]	@ (80066fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006490:	430b      	orrs	r3, r1
 8006492:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006494:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80064a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064a2:	2300      	movs	r3, #0
 80064a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064a6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80064aa:	460b      	mov	r3, r1
 80064ac:	4313      	orrs	r3, r2
 80064ae:	d009      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80064b0:	4b92      	ldr	r3, [pc, #584]	@ (80066fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80064b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064b4:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 80064b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064be:	4a8f      	ldr	r2, [pc, #572]	@ (80066fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80064c0:	430b      	orrs	r3, r1
 80064c2:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80064c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064cc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80064d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80064d2:	2300      	movs	r3, #0
 80064d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80064d6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80064da:	460b      	mov	r3, r1
 80064dc:	4313      	orrs	r3, r2
 80064de:	d00e      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80064e0:	4b86      	ldr	r3, [pc, #536]	@ (80066fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	4a85      	ldr	r2, [pc, #532]	@ (80066fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80064e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80064ea:	6113      	str	r3, [r2, #16]
 80064ec:	4b83      	ldr	r3, [pc, #524]	@ (80066fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80064ee:	6919      	ldr	r1, [r3, #16]
 80064f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80064f8:	4a80      	ldr	r2, [pc, #512]	@ (80066fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80064fa:	430b      	orrs	r3, r1
 80064fc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80064fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006506:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800650a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800650c:	2300      	movs	r3, #0
 800650e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006510:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006514:	460b      	mov	r3, r1
 8006516:	4313      	orrs	r3, r2
 8006518:	d009      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800651a:	4b78      	ldr	r3, [pc, #480]	@ (80066fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800651c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800651e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006522:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006528:	4a74      	ldr	r2, [pc, #464]	@ (80066fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800652a:	430b      	orrs	r3, r1
 800652c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800652e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006536:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800653a:	633b      	str	r3, [r7, #48]	@ 0x30
 800653c:	2300      	movs	r3, #0
 800653e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006540:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006544:	460b      	mov	r3, r1
 8006546:	4313      	orrs	r3, r2
 8006548:	d00a      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800654a:	4b6c      	ldr	r3, [pc, #432]	@ (80066fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800654c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800654e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006552:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006556:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800655a:	4a68      	ldr	r2, [pc, #416]	@ (80066fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800655c:	430b      	orrs	r3, r1
 800655e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006560:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006568:	2100      	movs	r1, #0
 800656a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006572:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006576:	460b      	mov	r3, r1
 8006578:	4313      	orrs	r3, r2
 800657a:	d011      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800657c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006580:	3308      	adds	r3, #8
 8006582:	2100      	movs	r1, #0
 8006584:	4618      	mov	r0, r3
 8006586:	f001 f9a3 	bl	80078d0 <RCCEx_PLL2_Config>
 800658a:	4603      	mov	r3, r0
 800658c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006590:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006594:	2b00      	cmp	r3, #0
 8006596:	d003      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006598:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800659c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80065a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a8:	2100      	movs	r1, #0
 80065aa:	6239      	str	r1, [r7, #32]
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80065b2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80065b6:	460b      	mov	r3, r1
 80065b8:	4313      	orrs	r3, r2
 80065ba:	d011      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065c0:	3308      	adds	r3, #8
 80065c2:	2101      	movs	r1, #1
 80065c4:	4618      	mov	r0, r3
 80065c6:	f001 f983 	bl	80078d0 <RCCEx_PLL2_Config>
 80065ca:	4603      	mov	r3, r0
 80065cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80065d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d003      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80065dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80065e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e8:	2100      	movs	r1, #0
 80065ea:	61b9      	str	r1, [r7, #24]
 80065ec:	f003 0304 	and.w	r3, r3, #4
 80065f0:	61fb      	str	r3, [r7, #28]
 80065f2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80065f6:	460b      	mov	r3, r1
 80065f8:	4313      	orrs	r3, r2
 80065fa:	d011      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80065fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006600:	3308      	adds	r3, #8
 8006602:	2102      	movs	r1, #2
 8006604:	4618      	mov	r0, r3
 8006606:	f001 f963 	bl	80078d0 <RCCEx_PLL2_Config>
 800660a:	4603      	mov	r3, r0
 800660c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006610:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006614:	2b00      	cmp	r3, #0
 8006616:	d003      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006618:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800661c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006620:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006628:	2100      	movs	r1, #0
 800662a:	6139      	str	r1, [r7, #16]
 800662c:	f003 0308 	and.w	r3, r3, #8
 8006630:	617b      	str	r3, [r7, #20]
 8006632:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006636:	460b      	mov	r3, r1
 8006638:	4313      	orrs	r3, r2
 800663a:	d011      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800663c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006640:	3328      	adds	r3, #40	@ 0x28
 8006642:	2100      	movs	r1, #0
 8006644:	4618      	mov	r0, r3
 8006646:	f001 f9f5 	bl	8007a34 <RCCEx_PLL3_Config>
 800664a:	4603      	mov	r3, r0
 800664c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8006650:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006654:	2b00      	cmp	r3, #0
 8006656:	d003      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006658:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800665c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006660:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006668:	2100      	movs	r1, #0
 800666a:	60b9      	str	r1, [r7, #8]
 800666c:	f003 0310 	and.w	r3, r3, #16
 8006670:	60fb      	str	r3, [r7, #12]
 8006672:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006676:	460b      	mov	r3, r1
 8006678:	4313      	orrs	r3, r2
 800667a:	d011      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800667c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006680:	3328      	adds	r3, #40	@ 0x28
 8006682:	2101      	movs	r1, #1
 8006684:	4618      	mov	r0, r3
 8006686:	f001 f9d5 	bl	8007a34 <RCCEx_PLL3_Config>
 800668a:	4603      	mov	r3, r0
 800668c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006690:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006694:	2b00      	cmp	r3, #0
 8006696:	d003      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006698:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800669c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80066a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a8:	2100      	movs	r1, #0
 80066aa:	6039      	str	r1, [r7, #0]
 80066ac:	f003 0320 	and.w	r3, r3, #32
 80066b0:	607b      	str	r3, [r7, #4]
 80066b2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80066b6:	460b      	mov	r3, r1
 80066b8:	4313      	orrs	r3, r2
 80066ba:	d011      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066c0:	3328      	adds	r3, #40	@ 0x28
 80066c2:	2102      	movs	r1, #2
 80066c4:	4618      	mov	r0, r3
 80066c6:	f001 f9b5 	bl	8007a34 <RCCEx_PLL3_Config>
 80066ca:	4603      	mov	r3, r0
 80066cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80066d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d003      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80066dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 80066e0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80066e8:	2300      	movs	r3, #0
 80066ea:	e000      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80066f4:	46bd      	mov	sp, r7
 80066f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066fa:	bf00      	nop
 80066fc:	58024400 	.word	0x58024400

08006700 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b090      	sub	sp, #64	@ 0x40
 8006704:	af00      	add	r7, sp, #0
 8006706:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800670a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800670e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006712:	430b      	orrs	r3, r1
 8006714:	f040 8094 	bne.w	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006718:	4b97      	ldr	r3, [pc, #604]	@ (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800671a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800671c:	f003 0307 	and.w	r3, r3, #7
 8006720:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006724:	2b04      	cmp	r3, #4
 8006726:	f200 8087 	bhi.w	8006838 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800672a:	a201      	add	r2, pc, #4	@ (adr r2, 8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800672c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006730:	08006745 	.word	0x08006745
 8006734:	0800676d 	.word	0x0800676d
 8006738:	08006795 	.word	0x08006795
 800673c:	08006831 	.word	0x08006831
 8006740:	080067bd 	.word	0x080067bd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006744:	4b8c      	ldr	r3, [pc, #560]	@ (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800674c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006750:	d108      	bne.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006752:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006756:	4618      	mov	r0, r3
 8006758:	f000 ff68 	bl	800762c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800675c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800675e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006760:	f000 bc97 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006764:	2300      	movs	r3, #0
 8006766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006768:	f000 bc93 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800676c:	4b82      	ldr	r3, [pc, #520]	@ (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006774:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006778:	d108      	bne.n	800678c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800677a:	f107 0318 	add.w	r3, r7, #24
 800677e:	4618      	mov	r0, r3
 8006780:	f000 fcac 	bl	80070dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006788:	f000 bc83 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800678c:	2300      	movs	r3, #0
 800678e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006790:	f000 bc7f 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006794:	4b78      	ldr	r3, [pc, #480]	@ (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800679c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067a0:	d108      	bne.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067a2:	f107 030c 	add.w	r3, r7, #12
 80067a6:	4618      	mov	r0, r3
 80067a8:	f000 fdec 	bl	8007384 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067b0:	f000 bc6f 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80067b4:	2300      	movs	r3, #0
 80067b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067b8:	f000 bc6b 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80067bc:	4b6e      	ldr	r3, [pc, #440]	@ (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80067be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80067c4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80067c6:	4b6c      	ldr	r3, [pc, #432]	@ (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0304 	and.w	r3, r3, #4
 80067ce:	2b04      	cmp	r3, #4
 80067d0:	d10c      	bne.n	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80067d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d109      	bne.n	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067d8:	4b67      	ldr	r3, [pc, #412]	@ (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	08db      	lsrs	r3, r3, #3
 80067de:	f003 0303 	and.w	r3, r3, #3
 80067e2:	4a66      	ldr	r2, [pc, #408]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80067e4:	fa22 f303 	lsr.w	r3, r2, r3
 80067e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067ea:	e01f      	b.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067ec:	4b62      	ldr	r3, [pc, #392]	@ (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067f8:	d106      	bne.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80067fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006800:	d102      	bne.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006802:	4b5f      	ldr	r3, [pc, #380]	@ (8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006804:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006806:	e011      	b.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006808:	4b5b      	ldr	r3, [pc, #364]	@ (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006810:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006814:	d106      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006818:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800681c:	d102      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800681e:	4b59      	ldr	r3, [pc, #356]	@ (8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006820:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006822:	e003      	b.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006824:	2300      	movs	r3, #0
 8006826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006828:	f000 bc33 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800682c:	f000 bc31 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006830:	4b55      	ldr	r3, [pc, #340]	@ (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006834:	f000 bc2d 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8006838:	2300      	movs	r3, #0
 800683a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800683c:	f000 bc29 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8006840:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006844:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006848:	430b      	orrs	r3, r1
 800684a:	f040 809f 	bne.w	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800684e:	4b4a      	ldr	r3, [pc, #296]	@ (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006850:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006852:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006856:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800685e:	d04d      	beq.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8006860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006866:	f200 8084 	bhi.w	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800686a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686c:	2bc0      	cmp	r3, #192	@ 0xc0
 800686e:	d07d      	beq.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8006870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006872:	2bc0      	cmp	r3, #192	@ 0xc0
 8006874:	d87d      	bhi.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8006876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006878:	2b80      	cmp	r3, #128	@ 0x80
 800687a:	d02d      	beq.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800687c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687e:	2b80      	cmp	r3, #128	@ 0x80
 8006880:	d877      	bhi.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8006882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006884:	2b00      	cmp	r3, #0
 8006886:	d003      	beq.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8006888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688a:	2b40      	cmp	r3, #64	@ 0x40
 800688c:	d012      	beq.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800688e:	e070      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006890:	4b39      	ldr	r3, [pc, #228]	@ (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006898:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800689c:	d107      	bne.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800689e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 fec2 	bl	800762c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80068a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068ac:	e3f1      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80068ae:	2300      	movs	r3, #0
 80068b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068b2:	e3ee      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068b4:	4b30      	ldr	r3, [pc, #192]	@ (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068c0:	d107      	bne.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068c2:	f107 0318 	add.w	r3, r7, #24
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 fc08 	bl	80070dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068d0:	e3df      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80068d2:	2300      	movs	r3, #0
 80068d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068d6:	e3dc      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068d8:	4b27      	ldr	r3, [pc, #156]	@ (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068e4:	d107      	bne.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068e6:	f107 030c 	add.w	r3, r7, #12
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 fd4a 	bl	8007384 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068f4:	e3cd      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80068f6:	2300      	movs	r3, #0
 80068f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068fa:	e3ca      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80068fc:	4b1e      	ldr	r3, [pc, #120]	@ (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80068fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006900:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006904:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006906:	4b1c      	ldr	r3, [pc, #112]	@ (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0304 	and.w	r3, r3, #4
 800690e:	2b04      	cmp	r3, #4
 8006910:	d10c      	bne.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8006912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006914:	2b00      	cmp	r3, #0
 8006916:	d109      	bne.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006918:	4b17      	ldr	r3, [pc, #92]	@ (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	08db      	lsrs	r3, r3, #3
 800691e:	f003 0303 	and.w	r3, r3, #3
 8006922:	4a16      	ldr	r2, [pc, #88]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006924:	fa22 f303 	lsr.w	r3, r2, r3
 8006928:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800692a:	e01e      	b.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800692c:	4b12      	ldr	r3, [pc, #72]	@ (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006934:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006938:	d106      	bne.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800693a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800693c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006940:	d102      	bne.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006942:	4b0f      	ldr	r3, [pc, #60]	@ (8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006944:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006946:	e010      	b.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006948:	4b0b      	ldr	r3, [pc, #44]	@ (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006950:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006954:	d106      	bne.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006958:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800695c:	d102      	bne.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800695e:	4b09      	ldr	r3, [pc, #36]	@ (8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006960:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006962:	e002      	b.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006964:	2300      	movs	r3, #0
 8006966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006968:	e393      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800696a:	e392      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800696c:	4b06      	ldr	r3, [pc, #24]	@ (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800696e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006970:	e38f      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006972:	2300      	movs	r3, #0
 8006974:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006976:	e38c      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006978:	58024400 	.word	0x58024400
 800697c:	03d09000 	.word	0x03d09000
 8006980:	003d0900 	.word	0x003d0900
 8006984:	016e3600 	.word	0x016e3600
 8006988:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800698c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006990:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006994:	430b      	orrs	r3, r1
 8006996:	f040 809c 	bne.w	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 800699a:	4b9e      	ldr	r3, [pc, #632]	@ (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800699c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800699e:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80069a2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80069a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069aa:	d054      	beq.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 80069ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069b2:	f200 808b 	bhi.w	8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80069b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80069bc:	f000 8083 	beq.w	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 80069c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80069c6:	f200 8081 	bhi.w	8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80069ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069d0:	d02f      	beq.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80069d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069d8:	d878      	bhi.n	8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80069da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d004      	beq.n	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 80069e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069e6:	d012      	beq.n	8006a0e <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 80069e8:	e070      	b.n	8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80069ea:	4b8a      	ldr	r3, [pc, #552]	@ (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069f6:	d107      	bne.n	8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069fc:	4618      	mov	r0, r3
 80069fe:	f000 fe15 	bl	800762c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a06:	e344      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a0c:	e341      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a0e:	4b81      	ldr	r3, [pc, #516]	@ (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a1a:	d107      	bne.n	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a1c:	f107 0318 	add.w	r3, r7, #24
 8006a20:	4618      	mov	r0, r3
 8006a22:	f000 fb5b 	bl	80070dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a2a:	e332      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a30:	e32f      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a32:	4b78      	ldr	r3, [pc, #480]	@ (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a3e:	d107      	bne.n	8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a40:	f107 030c 	add.w	r3, r7, #12
 8006a44:	4618      	mov	r0, r3
 8006a46:	f000 fc9d 	bl	8007384 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a4e:	e320      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006a50:	2300      	movs	r3, #0
 8006a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a54:	e31d      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a56:	4b6f      	ldr	r3, [pc, #444]	@ (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a5a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006a5e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a60:	4b6c      	ldr	r3, [pc, #432]	@ (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0304 	and.w	r3, r3, #4
 8006a68:	2b04      	cmp	r3, #4
 8006a6a:	d10c      	bne.n	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8006a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d109      	bne.n	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a72:	4b68      	ldr	r3, [pc, #416]	@ (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	08db      	lsrs	r3, r3, #3
 8006a78:	f003 0303 	and.w	r3, r3, #3
 8006a7c:	4a66      	ldr	r2, [pc, #408]	@ (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8006a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a84:	e01e      	b.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a86:	4b63      	ldr	r3, [pc, #396]	@ (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a92:	d106      	bne.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a9a:	d102      	bne.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a9c:	4b5f      	ldr	r3, [pc, #380]	@ (8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8006a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006aa0:	e010      	b.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006aa2:	4b5c      	ldr	r3, [pc, #368]	@ (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aaa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006aae:	d106      	bne.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ab2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ab6:	d102      	bne.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006ab8:	4b59      	ldr	r3, [pc, #356]	@ (8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8006aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006abc:	e002      	b.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 8006ac2:	e2e6      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006ac4:	e2e5      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ac6:	4b57      	ldr	r3, [pc, #348]	@ (8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006aca:	e2e2      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006acc:	2300      	movs	r3, #0
 8006ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ad0:	e2df      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006ad2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ad6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006ada:	430b      	orrs	r3, r1
 8006adc:	f040 80a7 	bne.w	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006ae0:	4b4c      	ldr	r3, [pc, #304]	@ (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ae4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006ae8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006af0:	d055      	beq.n	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8006af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006af8:	f200 8096 	bhi.w	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006afe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006b02:	f000 8084 	beq.w	8006c0e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8006b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b08:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006b0c:	f200 808c 	bhi.w	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b16:	d030      	beq.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8006b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b1e:	f200 8083 	bhi.w	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d004      	beq.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8006b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b2e:	d012      	beq.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8006b30:	e07a      	b.n	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b32:	4b38      	ldr	r3, [pc, #224]	@ (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b3e:	d107      	bne.n	8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b44:	4618      	mov	r0, r3
 8006b46:	f000 fd71 	bl	800762c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b4e:	e2a0      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006b50:	2300      	movs	r3, #0
 8006b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b54:	e29d      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b56:	4b2f      	ldr	r3, [pc, #188]	@ (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b62:	d107      	bne.n	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b64:	f107 0318 	add.w	r3, r7, #24
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f000 fab7 	bl	80070dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b72:	e28e      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006b74:	2300      	movs	r3, #0
 8006b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b78:	e28b      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b7a:	4b26      	ldr	r3, [pc, #152]	@ (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b86:	d107      	bne.n	8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b88:	f107 030c 	add.w	r3, r7, #12
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f000 fbf9 	bl	8007384 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b96:	e27c      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b9c:	e279      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ba2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006ba6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0304 	and.w	r3, r3, #4
 8006bb0:	2b04      	cmp	r3, #4
 8006bb2:	d10c      	bne.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8006bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d109      	bne.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bba:	4b16      	ldr	r3, [pc, #88]	@ (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	08db      	lsrs	r3, r3, #3
 8006bc0:	f003 0303 	and.w	r3, r3, #3
 8006bc4:	4a14      	ldr	r2, [pc, #80]	@ (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8006bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8006bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bcc:	e01e      	b.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006bce:	4b11      	ldr	r3, [pc, #68]	@ (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bda:	d106      	bne.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006be2:	d102      	bne.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006be4:	4b0d      	ldr	r3, [pc, #52]	@ (8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8006be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006be8:	e010      	b.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006bea:	4b0a      	ldr	r3, [pc, #40]	@ (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bf2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bf6:	d106      	bne.n	8006c06 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bfe:	d102      	bne.n	8006c06 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006c00:	4b07      	ldr	r3, [pc, #28]	@ (8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8006c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c04:	e002      	b.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006c06:	2300      	movs	r3, #0
 8006c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006c0a:	e242      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006c0c:	e241      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006c0e:	4b05      	ldr	r3, [pc, #20]	@ (8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c12:	e23e      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006c14:	58024400 	.word	0x58024400
 8006c18:	03d09000 	.word	0x03d09000
 8006c1c:	003d0900 	.word	0x003d0900
 8006c20:	016e3600 	.word	0x016e3600
 8006c24:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c2c:	e231      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006c2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c32:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006c36:	430b      	orrs	r3, r1
 8006c38:	f040 8085 	bne.w	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006c3c:	4b9c      	ldr	r3, [pc, #624]	@ (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006c3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c40:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006c44:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c4c:	d06b      	beq.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8006c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c54:	d874      	bhi.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c58:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c5c:	d056      	beq.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8006c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c60:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c64:	d86c      	bhi.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c6c:	d03b      	beq.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8006c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c70:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c74:	d864      	bhi.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c7c:	d021      	beq.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8006c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c84:	d85c      	bhi.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d004      	beq.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8006c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c92:	d004      	beq.n	8006c9e <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8006c94:	e054      	b.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006c96:	f7fe fb49 	bl	800532c <HAL_RCC_GetPCLK1Freq>
 8006c9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006c9c:	e1f9      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c9e:	4b84      	ldr	r3, [pc, #528]	@ (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ca6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006caa:	d107      	bne.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cac:	f107 0318 	add.w	r3, r7, #24
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 fa13 	bl	80070dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cba:	e1ea      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cc0:	e1e7      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006cc2:	4b7b      	ldr	r3, [pc, #492]	@ (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006cca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cce:	d107      	bne.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cd0:	f107 030c 	add.w	r3, r7, #12
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 fb55 	bl	8007384 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cde:	e1d8      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ce4:	e1d5      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ce6:	4b72      	ldr	r3, [pc, #456]	@ (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0304 	and.w	r3, r3, #4
 8006cee:	2b04      	cmp	r3, #4
 8006cf0:	d109      	bne.n	8006d06 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cf2:	4b6f      	ldr	r3, [pc, #444]	@ (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	08db      	lsrs	r3, r3, #3
 8006cf8:	f003 0303 	and.w	r3, r3, #3
 8006cfc:	4a6d      	ldr	r2, [pc, #436]	@ (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8006d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d04:	e1c5      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006d06:	2300      	movs	r3, #0
 8006d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d0a:	e1c2      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006d0c:	4b68      	ldr	r3, [pc, #416]	@ (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d18:	d102      	bne.n	8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8006d1a:	4b67      	ldr	r3, [pc, #412]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d1e:	e1b8      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006d20:	2300      	movs	r3, #0
 8006d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d24:	e1b5      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006d26:	4b62      	ldr	r3, [pc, #392]	@ (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d32:	d102      	bne.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8006d34:	4b61      	ldr	r3, [pc, #388]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8006d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d38:	e1ab      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d3e:	e1a8      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8006d40:	2300      	movs	r3, #0
 8006d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d44:	e1a5      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006d46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d4a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006d4e:	430b      	orrs	r3, r1
 8006d50:	d173      	bne.n	8006e3a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006d52:	4b57      	ldr	r3, [pc, #348]	@ (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d56:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006d5a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d62:	d02f      	beq.n	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8006d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d6a:	d863      	bhi.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8006d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d004      	beq.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d78:	d012      	beq.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8006d7a:	e05b      	b.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d7c:	4b4c      	ldr	r3, [pc, #304]	@ (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d88:	d107      	bne.n	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d8a:	f107 0318 	add.w	r3, r7, #24
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f000 f9a4 	bl	80070dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d98:	e17b      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d9e:	e178      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006da0:	4b43      	ldr	r3, [pc, #268]	@ (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006da8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dac:	d107      	bne.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dae:	f107 030c 	add.w	r3, r7, #12
 8006db2:	4618      	mov	r0, r3
 8006db4:	f000 fae6 	bl	8007384 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dbc:	e169      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dc2:	e166      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006dc4:	4b3a      	ldr	r3, [pc, #232]	@ (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dc8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006dcc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006dce:	4b38      	ldr	r3, [pc, #224]	@ (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0304 	and.w	r3, r3, #4
 8006dd6:	2b04      	cmp	r3, #4
 8006dd8:	d10c      	bne.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8006dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d109      	bne.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006de0:	4b33      	ldr	r3, [pc, #204]	@ (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	08db      	lsrs	r3, r3, #3
 8006de6:	f003 0303 	and.w	r3, r3, #3
 8006dea:	4a32      	ldr	r2, [pc, #200]	@ (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006dec:	fa22 f303 	lsr.w	r3, r2, r3
 8006df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006df2:	e01e      	b.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006df4:	4b2e      	ldr	r3, [pc, #184]	@ (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e00:	d106      	bne.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8006e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e08:	d102      	bne.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006e0a:	4b2b      	ldr	r3, [pc, #172]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e0e:	e010      	b.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e10:	4b27      	ldr	r3, [pc, #156]	@ (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e1c:	d106      	bne.n	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8006e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e24:	d102      	bne.n	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006e26:	4b25      	ldr	r3, [pc, #148]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8006e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e2a:	e002      	b.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006e30:	e12f      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006e32:	e12e      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006e34:	2300      	movs	r3, #0
 8006e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e38:	e12b      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006e3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e3e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006e42:	430b      	orrs	r3, r1
 8006e44:	d13c      	bne.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006e46:	4b1a      	ldr	r3, [pc, #104]	@ (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e4e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d004      	beq.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8006e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e5c:	d012      	beq.n	8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8006e5e:	e023      	b.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e60:	4b13      	ldr	r3, [pc, #76]	@ (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e6c:	d107      	bne.n	8006e7e <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 fbda 	bl	800762c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e7c:	e109      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e82:	e106      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e84:	4b0a      	ldr	r3, [pc, #40]	@ (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e90:	d107      	bne.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e92:	f107 0318 	add.w	r3, r7, #24
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 f920 	bl	80070dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006e9c:	6a3b      	ldr	r3, [r7, #32]
 8006e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ea0:	e0f7      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ea6:	e0f4      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eac:	e0f1      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006eae:	bf00      	nop
 8006eb0:	58024400 	.word	0x58024400
 8006eb4:	03d09000 	.word	0x03d09000
 8006eb8:	003d0900 	.word	0x003d0900
 8006ebc:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006ec0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ec4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006ec8:	430b      	orrs	r3, r1
 8006eca:	f040 8091 	bne.w	8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006ece:	4b73      	ldr	r3, [pc, #460]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ed2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006ed6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eda:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8006ede:	f000 8081 	beq.w	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee4:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8006ee8:	d87f      	bhi.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ef0:	d06b      	beq.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8006ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ef8:	d877      	bhi.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006efc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f00:	d056      	beq.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8006f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f08:	d86f      	bhi.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f0c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006f10:	d03b      	beq.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8006f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f14:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006f18:	d867      	bhi.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f20:	d021      	beq.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8006f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f28:	d85f      	bhi.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d004      	beq.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f36:	d004      	beq.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8006f38:	e057      	b.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006f3a:	f000 f8b9 	bl	80070b0 <HAL_RCCEx_GetD3PCLK1Freq>
 8006f3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006f40:	e0a7      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f42:	4b56      	ldr	r3, [pc, #344]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f4e:	d107      	bne.n	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f50:	f107 0318 	add.w	r3, r7, #24
 8006f54:	4618      	mov	r0, r3
 8006f56:	f000 f8c1 	bl	80070dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f5e:	e098      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006f60:	2300      	movs	r3, #0
 8006f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f64:	e095      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f66:	4b4d      	ldr	r3, [pc, #308]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f72:	d107      	bne.n	8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f74:	f107 030c 	add.w	r3, r7, #12
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f000 fa03 	bl	8007384 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f82:	e086      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006f84:	2300      	movs	r3, #0
 8006f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f88:	e083      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f8a:	4b44      	ldr	r3, [pc, #272]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0304 	and.w	r3, r3, #4
 8006f92:	2b04      	cmp	r3, #4
 8006f94:	d109      	bne.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f96:	4b41      	ldr	r3, [pc, #260]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	08db      	lsrs	r3, r3, #3
 8006f9c:	f003 0303 	and.w	r3, r3, #3
 8006fa0:	4a3f      	ldr	r2, [pc, #252]	@ (80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8006fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fa8:	e073      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006faa:	2300      	movs	r3, #0
 8006fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fae:	e070      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006fb0:	4b3a      	ldr	r3, [pc, #232]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fbc:	d102      	bne.n	8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8006fbe:	4b39      	ldr	r3, [pc, #228]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8006fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fc2:	e066      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fc8:	e063      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006fca:	4b34      	ldr	r3, [pc, #208]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fd2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fd6:	d102      	bne.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8006fd8:	4b33      	ldr	r3, [pc, #204]	@ (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fdc:	e059      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fe2:	e056      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006fe4:	4b31      	ldr	r3, [pc, #196]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8006fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fe8:	e053      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006fea:	2300      	movs	r3, #0
 8006fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fee:	e050      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006ff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ff4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006ff8:	430b      	orrs	r3, r1
 8006ffa:	d148      	bne.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006ffc:	4b27      	ldr	r3, [pc, #156]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006ffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007000:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007004:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007008:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800700c:	d02a      	beq.n	8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800700e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007010:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007014:	d838      	bhi.n	8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007018:	2b00      	cmp	r3, #0
 800701a:	d004      	beq.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800701c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800701e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007022:	d00d      	beq.n	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8007024:	e030      	b.n	8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007026:	4b1d      	ldr	r3, [pc, #116]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800702e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007032:	d102      	bne.n	800703a <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8007034:	4b1c      	ldr	r3, [pc, #112]	@ (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8007036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007038:	e02b      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800703a:	2300      	movs	r3, #0
 800703c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800703e:	e028      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007040:	4b16      	ldr	r3, [pc, #88]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007048:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800704c:	d107      	bne.n	800705e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800704e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007052:	4618      	mov	r0, r3
 8007054:	f000 faea 	bl	800762c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800705a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800705c:	e019      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800705e:	2300      	movs	r3, #0
 8007060:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007062:	e016      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007064:	4b0d      	ldr	r3, [pc, #52]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800706c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007070:	d107      	bne.n	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007072:	f107 0318 	add.w	r3, r7, #24
 8007076:	4618      	mov	r0, r3
 8007078:	f000 f830 	bl	80070dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007080:	e007      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007082:	2300      	movs	r3, #0
 8007084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007086:	e004      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8007088:	2300      	movs	r3, #0
 800708a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800708c:	e001      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 800708e:	2300      	movs	r3, #0
 8007090:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8007092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007094:	4618      	mov	r0, r3
 8007096:	3740      	adds	r7, #64	@ 0x40
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	58024400 	.word	0x58024400
 80070a0:	03d09000 	.word	0x03d09000
 80070a4:	003d0900 	.word	0x003d0900
 80070a8:	016e3600 	.word	0x016e3600
 80070ac:	00bb8000 	.word	0x00bb8000

080070b0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80070b4:	f7fe f90a 	bl	80052cc <HAL_RCC_GetHCLKFreq>
 80070b8:	4602      	mov	r2, r0
 80070ba:	4b06      	ldr	r3, [pc, #24]	@ (80070d4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	091b      	lsrs	r3, r3, #4
 80070c0:	f003 0307 	and.w	r3, r3, #7
 80070c4:	4904      	ldr	r1, [pc, #16]	@ (80070d8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80070c6:	5ccb      	ldrb	r3, [r1, r3]
 80070c8:	f003 031f 	and.w	r3, r3, #31
 80070cc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	58024400 	.word	0x58024400
 80070d8:	0800d250 	.word	0x0800d250

080070dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80070dc:	b480      	push	{r7}
 80070de:	b089      	sub	sp, #36	@ 0x24
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070e4:	4ba1      	ldr	r3, [pc, #644]	@ (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e8:	f003 0303 	and.w	r3, r3, #3
 80070ec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80070ee:	4b9f      	ldr	r3, [pc, #636]	@ (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070f2:	0b1b      	lsrs	r3, r3, #12
 80070f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070f8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80070fa:	4b9c      	ldr	r3, [pc, #624]	@ (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070fe:	091b      	lsrs	r3, r3, #4
 8007100:	f003 0301 	and.w	r3, r3, #1
 8007104:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007106:	4b99      	ldr	r3, [pc, #612]	@ (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800710a:	08db      	lsrs	r3, r3, #3
 800710c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	fb02 f303 	mul.w	r3, r2, r3
 8007116:	ee07 3a90 	vmov	s15, r3
 800711a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800711e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	2b00      	cmp	r3, #0
 8007126:	f000 8111 	beq.w	800734c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	2b02      	cmp	r3, #2
 800712e:	f000 8083 	beq.w	8007238 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	2b02      	cmp	r3, #2
 8007136:	f200 80a1 	bhi.w	800727c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d003      	beq.n	8007148 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d056      	beq.n	80071f4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007146:	e099      	b.n	800727c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007148:	4b88      	ldr	r3, [pc, #544]	@ (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0320 	and.w	r3, r3, #32
 8007150:	2b00      	cmp	r3, #0
 8007152:	d02d      	beq.n	80071b0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007154:	4b85      	ldr	r3, [pc, #532]	@ (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	08db      	lsrs	r3, r3, #3
 800715a:	f003 0303 	and.w	r3, r3, #3
 800715e:	4a84      	ldr	r2, [pc, #528]	@ (8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007160:	fa22 f303 	lsr.w	r3, r2, r3
 8007164:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	ee07 3a90 	vmov	s15, r3
 800716c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	ee07 3a90 	vmov	s15, r3
 8007176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800717a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800717e:	4b7b      	ldr	r3, [pc, #492]	@ (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007186:	ee07 3a90 	vmov	s15, r3
 800718a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800718e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007192:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007374 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800719a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800719e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80071ae:	e087      	b.n	80072c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	ee07 3a90 	vmov	s15, r3
 80071b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007378 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80071be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071c2:	4b6a      	ldr	r3, [pc, #424]	@ (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ca:	ee07 3a90 	vmov	s15, r3
 80071ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071d6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007374 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071f2:	e065      	b.n	80072c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	ee07 3a90 	vmov	s15, r3
 80071fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071fe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800737c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007206:	4b59      	ldr	r3, [pc, #356]	@ (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800720a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800720e:	ee07 3a90 	vmov	s15, r3
 8007212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007216:	ed97 6a03 	vldr	s12, [r7, #12]
 800721a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007374 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800721e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007226:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800722a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800722e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007232:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007236:	e043      	b.n	80072c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	ee07 3a90 	vmov	s15, r3
 800723e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007242:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007380 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800724a:	4b48      	ldr	r3, [pc, #288]	@ (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800724c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800724e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007252:	ee07 3a90 	vmov	s15, r3
 8007256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800725a:	ed97 6a03 	vldr	s12, [r7, #12]
 800725e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007374 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800726a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800726e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007276:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800727a:	e021      	b.n	80072c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	ee07 3a90 	vmov	s15, r3
 8007282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007286:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800737c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800728a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800728e:	4b37      	ldr	r3, [pc, #220]	@ (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007296:	ee07 3a90 	vmov	s15, r3
 800729a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800729e:	ed97 6a03 	vldr	s12, [r7, #12]
 80072a2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007374 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072be:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80072c0:	4b2a      	ldr	r3, [pc, #168]	@ (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072c4:	0a5b      	lsrs	r3, r3, #9
 80072c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072ca:	ee07 3a90 	vmov	s15, r3
 80072ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072da:	edd7 6a07 	vldr	s13, [r7, #28]
 80072de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072e6:	ee17 2a90 	vmov	r2, s15
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80072ee:	4b1f      	ldr	r3, [pc, #124]	@ (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f2:	0c1b      	lsrs	r3, r3, #16
 80072f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072f8:	ee07 3a90 	vmov	s15, r3
 80072fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007300:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007304:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007308:	edd7 6a07 	vldr	s13, [r7, #28]
 800730c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007310:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007314:	ee17 2a90 	vmov	r2, s15
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800731c:	4b13      	ldr	r3, [pc, #76]	@ (800736c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800731e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007320:	0e1b      	lsrs	r3, r3, #24
 8007322:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007326:	ee07 3a90 	vmov	s15, r3
 800732a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800732e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007332:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007336:	edd7 6a07 	vldr	s13, [r7, #28]
 800733a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800733e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007342:	ee17 2a90 	vmov	r2, s15
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800734a:	e008      	b.n	800735e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	609a      	str	r2, [r3, #8]
}
 800735e:	bf00      	nop
 8007360:	3724      	adds	r7, #36	@ 0x24
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	58024400 	.word	0x58024400
 8007370:	03d09000 	.word	0x03d09000
 8007374:	46000000 	.word	0x46000000
 8007378:	4c742400 	.word	0x4c742400
 800737c:	4a742400 	.word	0x4a742400
 8007380:	4bb71b00 	.word	0x4bb71b00

08007384 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007384:	b480      	push	{r7}
 8007386:	b089      	sub	sp, #36	@ 0x24
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800738c:	4ba1      	ldr	r3, [pc, #644]	@ (8007614 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800738e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007390:	f003 0303 	and.w	r3, r3, #3
 8007394:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007396:	4b9f      	ldr	r3, [pc, #636]	@ (8007614 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800739a:	0d1b      	lsrs	r3, r3, #20
 800739c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80073a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80073a2:	4b9c      	ldr	r3, [pc, #624]	@ (8007614 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a6:	0a1b      	lsrs	r3, r3, #8
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80073ae:	4b99      	ldr	r3, [pc, #612]	@ (8007614 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073b2:	08db      	lsrs	r3, r3, #3
 80073b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073b8:	693a      	ldr	r2, [r7, #16]
 80073ba:	fb02 f303 	mul.w	r3, r2, r3
 80073be:	ee07 3a90 	vmov	s15, r3
 80073c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f000 8111 	beq.w	80075f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	f000 8083 	beq.w	80074e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	2b02      	cmp	r3, #2
 80073de:	f200 80a1 	bhi.w	8007524 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d003      	beq.n	80073f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d056      	beq.n	800749c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80073ee:	e099      	b.n	8007524 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073f0:	4b88      	ldr	r3, [pc, #544]	@ (8007614 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0320 	and.w	r3, r3, #32
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d02d      	beq.n	8007458 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073fc:	4b85      	ldr	r3, [pc, #532]	@ (8007614 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	08db      	lsrs	r3, r3, #3
 8007402:	f003 0303 	and.w	r3, r3, #3
 8007406:	4a84      	ldr	r2, [pc, #528]	@ (8007618 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007408:	fa22 f303 	lsr.w	r3, r2, r3
 800740c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	ee07 3a90 	vmov	s15, r3
 8007414:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	ee07 3a90 	vmov	s15, r3
 800741e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007426:	4b7b      	ldr	r3, [pc, #492]	@ (8007614 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800742a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800742e:	ee07 3a90 	vmov	s15, r3
 8007432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007436:	ed97 6a03 	vldr	s12, [r7, #12]
 800743a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800761c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800743e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007446:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800744a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800744e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007452:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007456:	e087      	b.n	8007568 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	ee07 3a90 	vmov	s15, r3
 800745e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007462:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007620 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800746a:	4b6a      	ldr	r3, [pc, #424]	@ (8007614 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800746c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800746e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007472:	ee07 3a90 	vmov	s15, r3
 8007476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800747a:	ed97 6a03 	vldr	s12, [r7, #12]
 800747e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800761c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800748a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800748e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007496:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800749a:	e065      	b.n	8007568 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	ee07 3a90 	vmov	s15, r3
 80074a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074a6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007624 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80074aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ae:	4b59      	ldr	r3, [pc, #356]	@ (8007614 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b6:	ee07 3a90 	vmov	s15, r3
 80074ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074be:	ed97 6a03 	vldr	s12, [r7, #12]
 80074c2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800761c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074de:	e043      	b.n	8007568 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	ee07 3a90 	vmov	s15, r3
 80074e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007628 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80074ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074f2:	4b48      	ldr	r3, [pc, #288]	@ (8007614 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074fa:	ee07 3a90 	vmov	s15, r3
 80074fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007502:	ed97 6a03 	vldr	s12, [r7, #12]
 8007506:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800761c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800750a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800750e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007512:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800751a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800751e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007522:	e021      	b.n	8007568 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	ee07 3a90 	vmov	s15, r3
 800752a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800752e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007624 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007536:	4b37      	ldr	r3, [pc, #220]	@ (8007614 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800753a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800753e:	ee07 3a90 	vmov	s15, r3
 8007542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007546:	ed97 6a03 	vldr	s12, [r7, #12]
 800754a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800761c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800754e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007556:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800755a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800755e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007562:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007566:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007568:	4b2a      	ldr	r3, [pc, #168]	@ (8007614 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800756a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800756c:	0a5b      	lsrs	r3, r3, #9
 800756e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007572:	ee07 3a90 	vmov	s15, r3
 8007576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800757a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800757e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007582:	edd7 6a07 	vldr	s13, [r7, #28]
 8007586:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800758a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800758e:	ee17 2a90 	vmov	r2, s15
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007596:	4b1f      	ldr	r3, [pc, #124]	@ (8007614 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800759a:	0c1b      	lsrs	r3, r3, #16
 800759c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075a0:	ee07 3a90 	vmov	s15, r3
 80075a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80075b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075bc:	ee17 2a90 	vmov	r2, s15
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80075c4:	4b13      	ldr	r3, [pc, #76]	@ (8007614 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c8:	0e1b      	lsrs	r3, r3, #24
 80075ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075ce:	ee07 3a90 	vmov	s15, r3
 80075d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075de:	edd7 6a07 	vldr	s13, [r7, #28]
 80075e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075ea:	ee17 2a90 	vmov	r2, s15
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80075f2:	e008      	b.n	8007606 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	609a      	str	r2, [r3, #8]
}
 8007606:	bf00      	nop
 8007608:	3724      	adds	r7, #36	@ 0x24
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	58024400 	.word	0x58024400
 8007618:	03d09000 	.word	0x03d09000
 800761c:	46000000 	.word	0x46000000
 8007620:	4c742400 	.word	0x4c742400
 8007624:	4a742400 	.word	0x4a742400
 8007628:	4bb71b00 	.word	0x4bb71b00

0800762c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800762c:	b480      	push	{r7}
 800762e:	b089      	sub	sp, #36	@ 0x24
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007634:	4ba0      	ldr	r3, [pc, #640]	@ (80078b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007638:	f003 0303 	and.w	r3, r3, #3
 800763c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800763e:	4b9e      	ldr	r3, [pc, #632]	@ (80078b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007642:	091b      	lsrs	r3, r3, #4
 8007644:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007648:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800764a:	4b9b      	ldr	r3, [pc, #620]	@ (80078b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800764c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007654:	4b98      	ldr	r3, [pc, #608]	@ (80078b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007658:	08db      	lsrs	r3, r3, #3
 800765a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800765e:	693a      	ldr	r2, [r7, #16]
 8007660:	fb02 f303 	mul.w	r3, r2, r3
 8007664:	ee07 3a90 	vmov	s15, r3
 8007668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800766c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	2b00      	cmp	r3, #0
 8007674:	f000 8111 	beq.w	800789a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	2b02      	cmp	r3, #2
 800767c:	f000 8083 	beq.w	8007786 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	2b02      	cmp	r3, #2
 8007684:	f200 80a1 	bhi.w	80077ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d003      	beq.n	8007696 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d056      	beq.n	8007742 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007694:	e099      	b.n	80077ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007696:	4b88      	ldr	r3, [pc, #544]	@ (80078b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0320 	and.w	r3, r3, #32
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d02d      	beq.n	80076fe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80076a2:	4b85      	ldr	r3, [pc, #532]	@ (80078b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	08db      	lsrs	r3, r3, #3
 80076a8:	f003 0303 	and.w	r3, r3, #3
 80076ac:	4a83      	ldr	r2, [pc, #524]	@ (80078bc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80076ae:	fa22 f303 	lsr.w	r3, r2, r3
 80076b2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	ee07 3a90 	vmov	s15, r3
 80076ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	ee07 3a90 	vmov	s15, r3
 80076c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076cc:	4b7a      	ldr	r3, [pc, #488]	@ (80078b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076d4:	ee07 3a90 	vmov	s15, r3
 80076d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80076e0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80078c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80076e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076f8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80076fc:	e087      	b.n	800780e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	ee07 3a90 	vmov	s15, r3
 8007704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007708:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80078c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800770c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007710:	4b69      	ldr	r3, [pc, #420]	@ (80078b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007718:	ee07 3a90 	vmov	s15, r3
 800771c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007720:	ed97 6a03 	vldr	s12, [r7, #12]
 8007724:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80078c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007728:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800772c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007730:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007734:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800773c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007740:	e065      	b.n	800780e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	ee07 3a90 	vmov	s15, r3
 8007748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800774c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80078c8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007750:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007754:	4b58      	ldr	r3, [pc, #352]	@ (80078b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800775c:	ee07 3a90 	vmov	s15, r3
 8007760:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007764:	ed97 6a03 	vldr	s12, [r7, #12]
 8007768:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80078c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800776c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007770:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007774:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007778:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800777c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007780:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007784:	e043      	b.n	800780e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	ee07 3a90 	vmov	s15, r3
 800778c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007790:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80078cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007794:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007798:	4b47      	ldr	r3, [pc, #284]	@ (80078b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800779a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800779c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077a0:	ee07 3a90 	vmov	s15, r3
 80077a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80077ac:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80078c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80077b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077c8:	e021      	b.n	800780e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	ee07 3a90 	vmov	s15, r3
 80077d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077d4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80078c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80077d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077dc:	4b36      	ldr	r3, [pc, #216]	@ (80078b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077e4:	ee07 3a90 	vmov	s15, r3
 80077e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80077f0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80078c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80077f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007800:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007804:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007808:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800780c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800780e:	4b2a      	ldr	r3, [pc, #168]	@ (80078b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007812:	0a5b      	lsrs	r3, r3, #9
 8007814:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007818:	ee07 3a90 	vmov	s15, r3
 800781c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007820:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007824:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007828:	edd7 6a07 	vldr	s13, [r7, #28]
 800782c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007830:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007834:	ee17 2a90 	vmov	r2, s15
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800783c:	4b1e      	ldr	r3, [pc, #120]	@ (80078b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800783e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007840:	0c1b      	lsrs	r3, r3, #16
 8007842:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007846:	ee07 3a90 	vmov	s15, r3
 800784a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800784e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007852:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007856:	edd7 6a07 	vldr	s13, [r7, #28]
 800785a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800785e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007862:	ee17 2a90 	vmov	r2, s15
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800786a:	4b13      	ldr	r3, [pc, #76]	@ (80078b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800786c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800786e:	0e1b      	lsrs	r3, r3, #24
 8007870:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007874:	ee07 3a90 	vmov	s15, r3
 8007878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800787c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007880:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007884:	edd7 6a07 	vldr	s13, [r7, #28]
 8007888:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800788c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007890:	ee17 2a90 	vmov	r2, s15
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007898:	e008      	b.n	80078ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	609a      	str	r2, [r3, #8]
}
 80078ac:	bf00      	nop
 80078ae:	3724      	adds	r7, #36	@ 0x24
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr
 80078b8:	58024400 	.word	0x58024400
 80078bc:	03d09000 	.word	0x03d09000
 80078c0:	46000000 	.word	0x46000000
 80078c4:	4c742400 	.word	0x4c742400
 80078c8:	4a742400 	.word	0x4a742400
 80078cc:	4bb71b00 	.word	0x4bb71b00

080078d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80078da:	2300      	movs	r3, #0
 80078dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80078de:	4b53      	ldr	r3, [pc, #332]	@ (8007a2c <RCCEx_PLL2_Config+0x15c>)
 80078e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078e2:	f003 0303 	and.w	r3, r3, #3
 80078e6:	2b03      	cmp	r3, #3
 80078e8:	d101      	bne.n	80078ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	e099      	b.n	8007a22 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80078ee:	4b4f      	ldr	r3, [pc, #316]	@ (8007a2c <RCCEx_PLL2_Config+0x15c>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a4e      	ldr	r2, [pc, #312]	@ (8007a2c <RCCEx_PLL2_Config+0x15c>)
 80078f4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80078f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078fa:	f7fa fe5b 	bl	80025b4 <HAL_GetTick>
 80078fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007900:	e008      	b.n	8007914 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007902:	f7fa fe57 	bl	80025b4 <HAL_GetTick>
 8007906:	4602      	mov	r2, r0
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	1ad3      	subs	r3, r2, r3
 800790c:	2b02      	cmp	r3, #2
 800790e:	d901      	bls.n	8007914 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e086      	b.n	8007a22 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007914:	4b45      	ldr	r3, [pc, #276]	@ (8007a2c <RCCEx_PLL2_Config+0x15c>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1f0      	bne.n	8007902 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007920:	4b42      	ldr	r3, [pc, #264]	@ (8007a2c <RCCEx_PLL2_Config+0x15c>)
 8007922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007924:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	031b      	lsls	r3, r3, #12
 800792e:	493f      	ldr	r1, [pc, #252]	@ (8007a2c <RCCEx_PLL2_Config+0x15c>)
 8007930:	4313      	orrs	r3, r2
 8007932:	628b      	str	r3, [r1, #40]	@ 0x28
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	3b01      	subs	r3, #1
 800793a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	3b01      	subs	r3, #1
 8007944:	025b      	lsls	r3, r3, #9
 8007946:	b29b      	uxth	r3, r3
 8007948:	431a      	orrs	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	3b01      	subs	r3, #1
 8007950:	041b      	lsls	r3, r3, #16
 8007952:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007956:	431a      	orrs	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	3b01      	subs	r3, #1
 800795e:	061b      	lsls	r3, r3, #24
 8007960:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007964:	4931      	ldr	r1, [pc, #196]	@ (8007a2c <RCCEx_PLL2_Config+0x15c>)
 8007966:	4313      	orrs	r3, r2
 8007968:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800796a:	4b30      	ldr	r3, [pc, #192]	@ (8007a2c <RCCEx_PLL2_Config+0x15c>)
 800796c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800796e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	695b      	ldr	r3, [r3, #20]
 8007976:	492d      	ldr	r1, [pc, #180]	@ (8007a2c <RCCEx_PLL2_Config+0x15c>)
 8007978:	4313      	orrs	r3, r2
 800797a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800797c:	4b2b      	ldr	r3, [pc, #172]	@ (8007a2c <RCCEx_PLL2_Config+0x15c>)
 800797e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007980:	f023 0220 	bic.w	r2, r3, #32
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	4928      	ldr	r1, [pc, #160]	@ (8007a2c <RCCEx_PLL2_Config+0x15c>)
 800798a:	4313      	orrs	r3, r2
 800798c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800798e:	4b27      	ldr	r3, [pc, #156]	@ (8007a2c <RCCEx_PLL2_Config+0x15c>)
 8007990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007992:	4a26      	ldr	r2, [pc, #152]	@ (8007a2c <RCCEx_PLL2_Config+0x15c>)
 8007994:	f023 0310 	bic.w	r3, r3, #16
 8007998:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800799a:	4b24      	ldr	r3, [pc, #144]	@ (8007a2c <RCCEx_PLL2_Config+0x15c>)
 800799c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800799e:	4b24      	ldr	r3, [pc, #144]	@ (8007a30 <RCCEx_PLL2_Config+0x160>)
 80079a0:	4013      	ands	r3, r2
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	69d2      	ldr	r2, [r2, #28]
 80079a6:	00d2      	lsls	r2, r2, #3
 80079a8:	4920      	ldr	r1, [pc, #128]	@ (8007a2c <RCCEx_PLL2_Config+0x15c>)
 80079aa:	4313      	orrs	r3, r2
 80079ac:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80079ae:	4b1f      	ldr	r3, [pc, #124]	@ (8007a2c <RCCEx_PLL2_Config+0x15c>)
 80079b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b2:	4a1e      	ldr	r2, [pc, #120]	@ (8007a2c <RCCEx_PLL2_Config+0x15c>)
 80079b4:	f043 0310 	orr.w	r3, r3, #16
 80079b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d106      	bne.n	80079ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80079c0:	4b1a      	ldr	r3, [pc, #104]	@ (8007a2c <RCCEx_PLL2_Config+0x15c>)
 80079c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c4:	4a19      	ldr	r2, [pc, #100]	@ (8007a2c <RCCEx_PLL2_Config+0x15c>)
 80079c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80079ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80079cc:	e00f      	b.n	80079ee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d106      	bne.n	80079e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80079d4:	4b15      	ldr	r3, [pc, #84]	@ (8007a2c <RCCEx_PLL2_Config+0x15c>)
 80079d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d8:	4a14      	ldr	r2, [pc, #80]	@ (8007a2c <RCCEx_PLL2_Config+0x15c>)
 80079da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80079de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80079e0:	e005      	b.n	80079ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80079e2:	4b12      	ldr	r3, [pc, #72]	@ (8007a2c <RCCEx_PLL2_Config+0x15c>)
 80079e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079e6:	4a11      	ldr	r2, [pc, #68]	@ (8007a2c <RCCEx_PLL2_Config+0x15c>)
 80079e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80079ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80079ee:	4b0f      	ldr	r3, [pc, #60]	@ (8007a2c <RCCEx_PLL2_Config+0x15c>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a0e      	ldr	r2, [pc, #56]	@ (8007a2c <RCCEx_PLL2_Config+0x15c>)
 80079f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80079f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079fa:	f7fa fddb 	bl	80025b4 <HAL_GetTick>
 80079fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a00:	e008      	b.n	8007a14 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a02:	f7fa fdd7 	bl	80025b4 <HAL_GetTick>
 8007a06:	4602      	mov	r2, r0
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	1ad3      	subs	r3, r2, r3
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	d901      	bls.n	8007a14 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a10:	2303      	movs	r3, #3
 8007a12:	e006      	b.n	8007a22 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a14:	4b05      	ldr	r3, [pc, #20]	@ (8007a2c <RCCEx_PLL2_Config+0x15c>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d0f0      	beq.n	8007a02 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	58024400 	.word	0x58024400
 8007a30:	ffff0007 	.word	0xffff0007

08007a34 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a42:	4b53      	ldr	r3, [pc, #332]	@ (8007b90 <RCCEx_PLL3_Config+0x15c>)
 8007a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a46:	f003 0303 	and.w	r3, r3, #3
 8007a4a:	2b03      	cmp	r3, #3
 8007a4c:	d101      	bne.n	8007a52 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e099      	b.n	8007b86 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007a52:	4b4f      	ldr	r3, [pc, #316]	@ (8007b90 <RCCEx_PLL3_Config+0x15c>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a4e      	ldr	r2, [pc, #312]	@ (8007b90 <RCCEx_PLL3_Config+0x15c>)
 8007a58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a5e:	f7fa fda9 	bl	80025b4 <HAL_GetTick>
 8007a62:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a64:	e008      	b.n	8007a78 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a66:	f7fa fda5 	bl	80025b4 <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d901      	bls.n	8007a78 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e086      	b.n	8007b86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a78:	4b45      	ldr	r3, [pc, #276]	@ (8007b90 <RCCEx_PLL3_Config+0x15c>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1f0      	bne.n	8007a66 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007a84:	4b42      	ldr	r3, [pc, #264]	@ (8007b90 <RCCEx_PLL3_Config+0x15c>)
 8007a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a88:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	051b      	lsls	r3, r3, #20
 8007a92:	493f      	ldr	r1, [pc, #252]	@ (8007b90 <RCCEx_PLL3_Config+0x15c>)
 8007a94:	4313      	orrs	r3, r2
 8007a96:	628b      	str	r3, [r1, #40]	@ 0x28
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	025b      	lsls	r3, r3, #9
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	431a      	orrs	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	041b      	lsls	r3, r3, #16
 8007ab6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007aba:	431a      	orrs	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	3b01      	subs	r3, #1
 8007ac2:	061b      	lsls	r3, r3, #24
 8007ac4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007ac8:	4931      	ldr	r1, [pc, #196]	@ (8007b90 <RCCEx_PLL3_Config+0x15c>)
 8007aca:	4313      	orrs	r3, r2
 8007acc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007ace:	4b30      	ldr	r3, [pc, #192]	@ (8007b90 <RCCEx_PLL3_Config+0x15c>)
 8007ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	695b      	ldr	r3, [r3, #20]
 8007ada:	492d      	ldr	r1, [pc, #180]	@ (8007b90 <RCCEx_PLL3_Config+0x15c>)
 8007adc:	4313      	orrs	r3, r2
 8007ade:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007ae0:	4b2b      	ldr	r3, [pc, #172]	@ (8007b90 <RCCEx_PLL3_Config+0x15c>)
 8007ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	699b      	ldr	r3, [r3, #24]
 8007aec:	4928      	ldr	r1, [pc, #160]	@ (8007b90 <RCCEx_PLL3_Config+0x15c>)
 8007aee:	4313      	orrs	r3, r2
 8007af0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007af2:	4b27      	ldr	r3, [pc, #156]	@ (8007b90 <RCCEx_PLL3_Config+0x15c>)
 8007af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007af6:	4a26      	ldr	r2, [pc, #152]	@ (8007b90 <RCCEx_PLL3_Config+0x15c>)
 8007af8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007afc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007afe:	4b24      	ldr	r3, [pc, #144]	@ (8007b90 <RCCEx_PLL3_Config+0x15c>)
 8007b00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b02:	4b24      	ldr	r3, [pc, #144]	@ (8007b94 <RCCEx_PLL3_Config+0x160>)
 8007b04:	4013      	ands	r3, r2
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	69d2      	ldr	r2, [r2, #28]
 8007b0a:	00d2      	lsls	r2, r2, #3
 8007b0c:	4920      	ldr	r1, [pc, #128]	@ (8007b90 <RCCEx_PLL3_Config+0x15c>)
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007b12:	4b1f      	ldr	r3, [pc, #124]	@ (8007b90 <RCCEx_PLL3_Config+0x15c>)
 8007b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b16:	4a1e      	ldr	r2, [pc, #120]	@ (8007b90 <RCCEx_PLL3_Config+0x15c>)
 8007b18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d106      	bne.n	8007b32 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007b24:	4b1a      	ldr	r3, [pc, #104]	@ (8007b90 <RCCEx_PLL3_Config+0x15c>)
 8007b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b28:	4a19      	ldr	r2, [pc, #100]	@ (8007b90 <RCCEx_PLL3_Config+0x15c>)
 8007b2a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007b2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007b30:	e00f      	b.n	8007b52 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d106      	bne.n	8007b46 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007b38:	4b15      	ldr	r3, [pc, #84]	@ (8007b90 <RCCEx_PLL3_Config+0x15c>)
 8007b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b3c:	4a14      	ldr	r2, [pc, #80]	@ (8007b90 <RCCEx_PLL3_Config+0x15c>)
 8007b3e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007b42:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007b44:	e005      	b.n	8007b52 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007b46:	4b12      	ldr	r3, [pc, #72]	@ (8007b90 <RCCEx_PLL3_Config+0x15c>)
 8007b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b4a:	4a11      	ldr	r2, [pc, #68]	@ (8007b90 <RCCEx_PLL3_Config+0x15c>)
 8007b4c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007b50:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007b52:	4b0f      	ldr	r3, [pc, #60]	@ (8007b90 <RCCEx_PLL3_Config+0x15c>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a0e      	ldr	r2, [pc, #56]	@ (8007b90 <RCCEx_PLL3_Config+0x15c>)
 8007b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b5e:	f7fa fd29 	bl	80025b4 <HAL_GetTick>
 8007b62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b64:	e008      	b.n	8007b78 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007b66:	f7fa fd25 	bl	80025b4 <HAL_GetTick>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d901      	bls.n	8007b78 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b74:	2303      	movs	r3, #3
 8007b76:	e006      	b.n	8007b86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b78:	4b05      	ldr	r3, [pc, #20]	@ (8007b90 <RCCEx_PLL3_Config+0x15c>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d0f0      	beq.n	8007b66 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	58024400 	.word	0x58024400
 8007b94:	ffff0007 	.word	0xffff0007

08007b98 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d074      	beq.n	8007c94 <HAL_RTC_Init+0xfc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d106      	bne.n	8007bc4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7f9 fdce 	bl	8001760 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	f003 0310 	and.w	r3, r3, #16
 8007bd6:	2b10      	cmp	r3, #16
 8007bd8:	d053      	beq.n	8007c82 <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	22ca      	movs	r2, #202	@ 0xca
 8007be0:	625a      	str	r2, [r3, #36]	@ 0x24
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2253      	movs	r2, #83	@ 0x53
 8007be8:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f87e 	bl	8007cec <RTC_EnterInitMode>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8007bf4:	7bfb      	ldrb	r3, [r7, #15]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d124      	bne.n	8007c44 <HAL_RTC_Init+0xac>
      {
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	6999      	ldr	r1, [r3, #24]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	4b26      	ldr	r3, [pc, #152]	@ (8007ca0 <HAL_RTC_Init+0x108>)
 8007c06:	400b      	ands	r3, r1
 8007c08:	6193      	str	r3, [r2, #24]
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	6999      	ldr	r1, [r3, #24]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	685a      	ldr	r2, [r3, #4]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	431a      	orrs	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	699b      	ldr	r3, [r3, #24]
 8007c1e:	431a      	orrs	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	430a      	orrs	r2, r1
 8007c26:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	0419      	lsls	r1, r3, #16
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	68da      	ldr	r2, [r3, #12]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	430a      	orrs	r2, r1
 8007c38:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 f88c 	bl	8007d58 <RTC_ExitInitMode>
 8007c40:	4603      	mov	r3, r0
 8007c42:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8007c44:	7bfb      	ldrb	r3, [r7, #15]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d116      	bne.n	8007c78 <HAL_RTC_Init+0xe0>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	699a      	ldr	r2, [r3, #24]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f022 4260 	bic.w	r2, r2, #3758096384	@ 0xe0000000
 8007c58:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	6999      	ldr	r1, [r3, #24]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a1a      	ldr	r2, [r3, #32]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	69db      	ldr	r3, [r3, #28]
 8007c68:	431a      	orrs	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	695b      	ldr	r3, [r3, #20]
 8007c6e:	431a      	orrs	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	430a      	orrs	r2, r1
 8007c76:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	22ff      	movs	r2, #255	@ 0xff
 8007c7e:	625a      	str	r2, [r3, #36]	@ 0x24
 8007c80:	e001      	b.n	8007c86 <HAL_RTC_Init+0xee>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8007c82:	2300      	movs	r3, #0
 8007c84:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007c86:	7bfb      	ldrb	r3, [r7, #15]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d103      	bne.n	8007c94 <HAL_RTC_Init+0xfc>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  /* return status */
  return status;
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	fb8fffbf 	.word	0xfb8fffbf

08007ca4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8007ce8 <HAL_RTC_WaitForSynchro+0x44>)
 8007cb2:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8007cb4:	f7fa fc7e 	bl	80025b4 <HAL_GetTick>
 8007cb8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8007cba:	e009      	b.n	8007cd0 <HAL_RTC_WaitForSynchro+0x2c>
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007cbc:	f7fa fc7a 	bl	80025b4 <HAL_GetTick>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007cca:	d901      	bls.n	8007cd0 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8007ccc:	2303      	movs	r3, #3
 8007cce:	e007      	b.n	8007ce0 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	f003 0320 	and.w	r3, r3, #32
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d0ee      	beq.n	8007cbc <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	0001005f 	.word	0x0001005f

08007cec <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(TAMP)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d123      	bne.n	8007d4e <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68da      	ldr	r2, [r3, #12]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007d14:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007d16:	f7fa fc4d 	bl	80025b4 <HAL_GetTick>
 8007d1a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007d1c:	e00d      	b.n	8007d3a <RTC_EnterInitMode+0x4e>

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007d1e:	f7fa fc49 	bl	80025b4 <HAL_GetTick>
 8007d22:	4602      	mov	r2, r0
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	1ad3      	subs	r3, r2, r3
 8007d28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d2c:	d905      	bls.n	8007d3a <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2203      	movs	r2, #3
 8007d36:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d102      	bne.n	8007d4e <RTC_EnterInitMode+0x62>
 8007d48:	7bfb      	ldrb	r3, [r7, #15]
 8007d4a:	2b03      	cmp	r3, #3
 8007d4c:	d1e7      	bne.n	8007d1e <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 8007d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d60:	2300      	movs	r3, #0
 8007d62:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007d64:	4b1a      	ldr	r3, [pc, #104]	@ (8007dd0 <RTC_ExitInitMode+0x78>)
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	4a19      	ldr	r2, [pc, #100]	@ (8007dd0 <RTC_ExitInitMode+0x78>)
 8007d6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d6e:	60d3      	str	r3, [r2, #12]
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007d70:	4b17      	ldr	r3, [pc, #92]	@ (8007dd0 <RTC_ExitInitMode+0x78>)
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	f003 0320 	and.w	r3, r3, #32
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d10c      	bne.n	8007d96 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7ff ff91 	bl	8007ca4 <HAL_RTC_WaitForSynchro>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d01e      	beq.n	8007dc6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2203      	movs	r2, #3
 8007d8c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8007d90:	2303      	movs	r3, #3
 8007d92:	73fb      	strb	r3, [r7, #15]
 8007d94:	e017      	b.n	8007dc6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007d96:	4b0e      	ldr	r3, [pc, #56]	@ (8007dd0 <RTC_ExitInitMode+0x78>)
 8007d98:	699b      	ldr	r3, [r3, #24]
 8007d9a:	4a0d      	ldr	r2, [pc, #52]	@ (8007dd0 <RTC_ExitInitMode+0x78>)
 8007d9c:	f023 0320 	bic.w	r3, r3, #32
 8007da0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f7ff ff7e 	bl	8007ca4 <HAL_RTC_WaitForSynchro>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d005      	beq.n	8007dba <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2203      	movs	r2, #3
 8007db2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8007db6:	2303      	movs	r3, #3
 8007db8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007dba:	4b05      	ldr	r3, [pc, #20]	@ (8007dd0 <RTC_ExitInitMode+0x78>)
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	4a04      	ldr	r2, [pc, #16]	@ (8007dd0 <RTC_ExitInitMode+0x78>)
 8007dc0:	f043 0320 	orr.w	r3, r3, #32
 8007dc4:	6193      	str	r3, [r2, #24]
  }

  return status;
 8007dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	58004000 	.word	0x58004000

08007dd4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b08a      	sub	sp, #40	@ 0x28
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d101      	bne.n	8007de6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e075      	b.n	8007ed2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d105      	bne.n	8007dfe <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f7f9 fce3 	bl	80017c4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2204      	movs	r2, #4
 8007e02:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f868 	bl	8007edc <HAL_SD_InitCard>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d001      	beq.n	8007e16 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e05d      	b.n	8007ed2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007e16:	f107 0308 	add.w	r3, r7, #8
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 fa9d 	bl	800835c <HAL_SD_GetCardStatus>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d001      	beq.n	8007e2c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e052      	b.n	8007ed2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007e2c:	7e3b      	ldrb	r3, [r7, #24]
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007e32:	7e7b      	ldrb	r3, [r7, #25]
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d10a      	bne.n	8007e56 <HAL_SD_Init+0x82>
 8007e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d102      	bne.n	8007e4c <HAL_SD_Init+0x78>
 8007e46:	6a3b      	ldr	r3, [r7, #32]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d004      	beq.n	8007e56 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e52:	659a      	str	r2, [r3, #88]	@ 0x58
 8007e54:	e00b      	b.n	8007e6e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d104      	bne.n	8007e68 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007e64:	659a      	str	r2, [r3, #88]	@ 0x58
 8007e66:	e002      	b.n	8007e6e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	4619      	mov	r1, r3
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 fb2f 	bl	80084d8 <HAL_SD_ConfigWideBusOperation>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d001      	beq.n	8007e84 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	e026      	b.n	8007ed2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007e84:	f7fa fb96 	bl	80025b4 <HAL_GetTick>
 8007e88:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007e8a:	e011      	b.n	8007eb0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8007e8c:	f7fa fb92 	bl	80025b4 <HAL_GetTick>
 8007e90:	4602      	mov	r2, r0
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e9a:	d109      	bne.n	8007eb0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007ea2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8007eac:	2303      	movs	r3, #3
 8007eae:	e010      	b.n	8007ed2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fc23 	bl	80086fc <HAL_SD_GetCardState>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b04      	cmp	r3, #4
 8007eba:	d1e7      	bne.n	8007e8c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3728      	adds	r7, #40	@ 0x28
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
	...

08007edc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007edc:	b590      	push	{r4, r7, lr}
 8007ede:	b08d      	sub	sp, #52	@ 0x34
 8007ee0:	af02      	add	r7, sp, #8
 8007ee2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007eec:	2300      	movs	r3, #0
 8007eee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007ef4:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8007ef8:	f04f 0100 	mov.w	r1, #0
 8007efc:	f7fe fc00 	bl	8006700 <HAL_RCCEx_GetPeriphCLKFreq>
 8007f00:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8007f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d109      	bne.n	8007f1c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007f16:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e070      	b.n	8007ffe <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f1e:	0a1b      	lsrs	r3, r3, #8
 8007f20:	4a39      	ldr	r2, [pc, #228]	@ (8008008 <HAL_SD_InitCard+0x12c>)
 8007f22:	fba2 2303 	umull	r2, r3, r2, r3
 8007f26:	091b      	lsrs	r3, r3, #4
 8007f28:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681c      	ldr	r4, [r3, #0]
 8007f2e:	466a      	mov	r2, sp
 8007f30:	f107 0318 	add.w	r3, r7, #24
 8007f34:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007f38:	e882 0003 	stmia.w	r2, {r0, r1}
 8007f3c:	f107 030c 	add.w	r3, r7, #12
 8007f40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f42:	4620      	mov	r0, r4
 8007f44:	f003 fa5a 	bl	800b3fc <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f003 fa8c 	bl	800b46a <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d005      	beq.n	8007f64 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	005b      	lsls	r3, r3, #1
 8007f5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f62:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8007f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d007      	beq.n	8007f7a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8007f6a:	4a28      	ldr	r2, [pc, #160]	@ (800800c <HAL_SD_InitCard+0x130>)
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f72:	3301      	adds	r3, #1
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7fa fb29 	bl	80025cc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 fcac 	bl	80088d8 <SD_PowerON>
 8007f80:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007f82:	6a3b      	ldr	r3, [r7, #32]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d00b      	beq.n	8007fa0 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f94:	6a3b      	ldr	r3, [r7, #32]
 8007f96:	431a      	orrs	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e02e      	b.n	8007ffe <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fbcb 	bl	800873c <SD_InitCard>
 8007fa6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007fa8:	6a3b      	ldr	r3, [r7, #32]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00b      	beq.n	8007fc6 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fba:	6a3b      	ldr	r3, [r7, #32]
 8007fbc:	431a      	orrs	r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e01b      	b.n	8007ffe <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f003 fae0 	bl	800b594 <SDMMC_CmdBlockLength>
 8007fd4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007fd6:	6a3b      	ldr	r3, [r7, #32]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00f      	beq.n	8007ffc <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a0b      	ldr	r2, [pc, #44]	@ (8008010 <HAL_SD_InitCard+0x134>)
 8007fe2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fe8:	6a3b      	ldr	r3, [r7, #32]
 8007fea:	431a      	orrs	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e000      	b.n	8007ffe <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	372c      	adds	r7, #44	@ 0x2c
 8008002:	46bd      	mov	sp, r7
 8008004:	bd90      	pop	{r4, r7, pc}
 8008006:	bf00      	nop
 8008008:	014f8b59 	.word	0x014f8b59
 800800c:	00012110 	.word	0x00012110
 8008010:	1fe00fff 	.word	0x1fe00fff

08008014 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008022:	0f9b      	lsrs	r3, r3, #30
 8008024:	b2da      	uxtb	r2, r3
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800802e:	0e9b      	lsrs	r3, r3, #26
 8008030:	b2db      	uxtb	r3, r3
 8008032:	f003 030f 	and.w	r3, r3, #15
 8008036:	b2da      	uxtb	r2, r3
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008040:	0e1b      	lsrs	r3, r3, #24
 8008042:	b2db      	uxtb	r3, r3
 8008044:	f003 0303 	and.w	r3, r3, #3
 8008048:	b2da      	uxtb	r2, r3
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008052:	0c1b      	lsrs	r3, r3, #16
 8008054:	b2da      	uxtb	r2, r3
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800805e:	0a1b      	lsrs	r3, r3, #8
 8008060:	b2da      	uxtb	r2, r3
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800806a:	b2da      	uxtb	r2, r3
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008074:	0d1b      	lsrs	r3, r3, #20
 8008076:	b29a      	uxth	r2, r3
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008080:	0c1b      	lsrs	r3, r3, #16
 8008082:	b2db      	uxtb	r3, r3
 8008084:	f003 030f 	and.w	r3, r3, #15
 8008088:	b2da      	uxtb	r2, r3
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008092:	0bdb      	lsrs	r3, r3, #15
 8008094:	b2db      	uxtb	r3, r3
 8008096:	f003 0301 	and.w	r3, r3, #1
 800809a:	b2da      	uxtb	r2, r3
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080a4:	0b9b      	lsrs	r3, r3, #14
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	f003 0301 	and.w	r3, r3, #1
 80080ac:	b2da      	uxtb	r2, r3
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080b6:	0b5b      	lsrs	r3, r3, #13
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	b2da      	uxtb	r2, r3
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080c8:	0b1b      	lsrs	r3, r3, #12
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	f003 0301 	and.w	r3, r3, #1
 80080d0:	b2da      	uxtb	r2, r3
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	2200      	movs	r2, #0
 80080da:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d163      	bne.n	80081ac <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080e8:	009a      	lsls	r2, r3, #2
 80080ea:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80080ee:	4013      	ands	r3, r2
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80080f4:	0f92      	lsrs	r2, r2, #30
 80080f6:	431a      	orrs	r2, r3
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008100:	0edb      	lsrs	r3, r3, #27
 8008102:	b2db      	uxtb	r3, r3
 8008104:	f003 0307 	and.w	r3, r3, #7
 8008108:	b2da      	uxtb	r2, r3
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008112:	0e1b      	lsrs	r3, r3, #24
 8008114:	b2db      	uxtb	r3, r3
 8008116:	f003 0307 	and.w	r3, r3, #7
 800811a:	b2da      	uxtb	r2, r3
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008124:	0d5b      	lsrs	r3, r3, #21
 8008126:	b2db      	uxtb	r3, r3
 8008128:	f003 0307 	and.w	r3, r3, #7
 800812c:	b2da      	uxtb	r2, r3
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008136:	0c9b      	lsrs	r3, r3, #18
 8008138:	b2db      	uxtb	r3, r3
 800813a:	f003 0307 	and.w	r3, r3, #7
 800813e:	b2da      	uxtb	r2, r3
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008148:	0bdb      	lsrs	r3, r3, #15
 800814a:	b2db      	uxtb	r3, r3
 800814c:	f003 0307 	and.w	r3, r3, #7
 8008150:	b2da      	uxtb	r2, r3
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	1c5a      	adds	r2, r3, #1
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	7e1b      	ldrb	r3, [r3, #24]
 8008164:	b2db      	uxtb	r3, r3
 8008166:	f003 0307 	and.w	r3, r3, #7
 800816a:	3302      	adds	r3, #2
 800816c:	2201      	movs	r2, #1
 800816e:	fa02 f303 	lsl.w	r3, r2, r3
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008176:	fb03 f202 	mul.w	r2, r3, r2
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	7a1b      	ldrb	r3, [r3, #8]
 8008182:	b2db      	uxtb	r3, r3
 8008184:	f003 030f 	and.w	r3, r3, #15
 8008188:	2201      	movs	r2, #1
 800818a:	409a      	lsls	r2, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008198:	0a52      	lsrs	r2, r2, #9
 800819a:	fb03 f202 	mul.w	r2, r3, r2
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80081a8:	655a      	str	r2, [r3, #84]	@ 0x54
 80081aa:	e031      	b.n	8008210 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d11d      	bne.n	80081f0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081b8:	041b      	lsls	r3, r3, #16
 80081ba:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081c2:	0c1b      	lsrs	r3, r3, #16
 80081c4:	431a      	orrs	r2, r3
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	3301      	adds	r3, #1
 80081d0:	029a      	lsls	r2, r3, #10
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80081e4:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	655a      	str	r2, [r3, #84]	@ 0x54
 80081ee:	e00f      	b.n	8008210 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a58      	ldr	r2, [pc, #352]	@ (8008358 <HAL_SD_GetCardCSD+0x344>)
 80081f6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081fc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	e09d      	b.n	800834c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008214:	0b9b      	lsrs	r3, r3, #14
 8008216:	b2db      	uxtb	r3, r3
 8008218:	f003 0301 	and.w	r3, r3, #1
 800821c:	b2da      	uxtb	r2, r3
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008226:	09db      	lsrs	r3, r3, #7
 8008228:	b2db      	uxtb	r3, r3
 800822a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800822e:	b2da      	uxtb	r2, r3
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008238:	b2db      	uxtb	r3, r3
 800823a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800823e:	b2da      	uxtb	r2, r3
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008248:	0fdb      	lsrs	r3, r3, #31
 800824a:	b2da      	uxtb	r2, r3
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008254:	0f5b      	lsrs	r3, r3, #29
 8008256:	b2db      	uxtb	r3, r3
 8008258:	f003 0303 	and.w	r3, r3, #3
 800825c:	b2da      	uxtb	r2, r3
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008266:	0e9b      	lsrs	r3, r3, #26
 8008268:	b2db      	uxtb	r3, r3
 800826a:	f003 0307 	and.w	r3, r3, #7
 800826e:	b2da      	uxtb	r2, r3
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008278:	0d9b      	lsrs	r3, r3, #22
 800827a:	b2db      	uxtb	r3, r3
 800827c:	f003 030f 	and.w	r3, r3, #15
 8008280:	b2da      	uxtb	r2, r3
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800828a:	0d5b      	lsrs	r3, r3, #21
 800828c:	b2db      	uxtb	r3, r3
 800828e:	f003 0301 	and.w	r3, r3, #1
 8008292:	b2da      	uxtb	r2, r3
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	2200      	movs	r2, #0
 800829e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80082a6:	0c1b      	lsrs	r3, r3, #16
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	f003 0301 	and.w	r3, r3, #1
 80082ae:	b2da      	uxtb	r2, r3
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80082ba:	0bdb      	lsrs	r3, r3, #15
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	f003 0301 	and.w	r3, r3, #1
 80082c2:	b2da      	uxtb	r2, r3
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80082ce:	0b9b      	lsrs	r3, r3, #14
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	b2da      	uxtb	r2, r3
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80082e2:	0b5b      	lsrs	r3, r3, #13
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	f003 0301 	and.w	r3, r3, #1
 80082ea:	b2da      	uxtb	r2, r3
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80082f6:	0b1b      	lsrs	r3, r3, #12
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	f003 0301 	and.w	r3, r3, #1
 80082fe:	b2da      	uxtb	r2, r3
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800830a:	0a9b      	lsrs	r3, r3, #10
 800830c:	b2db      	uxtb	r3, r3
 800830e:	f003 0303 	and.w	r3, r3, #3
 8008312:	b2da      	uxtb	r2, r3
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800831e:	0a1b      	lsrs	r3, r3, #8
 8008320:	b2db      	uxtb	r3, r3
 8008322:	f003 0303 	and.w	r3, r3, #3
 8008326:	b2da      	uxtb	r2, r3
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008332:	085b      	lsrs	r3, r3, #1
 8008334:	b2db      	uxtb	r3, r3
 8008336:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800833a:	b2da      	uxtb	r2, r3
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	2201      	movs	r2, #1
 8008346:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr
 8008358:	1fe00fff 	.word	0x1fe00fff

0800835c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b094      	sub	sp, #80	@ 0x50
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008372:	b2db      	uxtb	r3, r3
 8008374:	2b03      	cmp	r3, #3
 8008376:	d101      	bne.n	800837c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	e0a7      	b.n	80084cc <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800837c:	f107 0308 	add.w	r3, r7, #8
 8008380:	4619      	mov	r1, r3
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fb36 	bl	80089f4 <SD_SendSDStatus>
 8008388:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800838a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800838c:	2b00      	cmp	r3, #0
 800838e:	d011      	beq.n	80083b4 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a4f      	ldr	r2, [pc, #316]	@ (80084d4 <HAL_SD_GetCardStatus+0x178>)
 8008396:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800839c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800839e:	431a      	orrs	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80083b2:	e070      	b.n	8008496 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	099b      	lsrs	r3, r3, #6
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	f003 0303 	and.w	r3, r3, #3
 80083be:	b2da      	uxtb	r2, r3
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	095b      	lsrs	r3, r3, #5
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	f003 0301 	and.w	r3, r3, #1
 80083ce:	b2da      	uxtb	r2, r3
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	0a1b      	lsrs	r3, r3, #8
 80083d8:	b29b      	uxth	r3, r3
 80083da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80083de:	b29a      	uxth	r2, r3
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	0e1b      	lsrs	r3, r3, #24
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	4313      	orrs	r3, r2
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	061a      	lsls	r2, r3, #24
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	021b      	lsls	r3, r3, #8
 80083f6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80083fa:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	0a1b      	lsrs	r3, r3, #8
 8008400:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008404:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	0e1b      	lsrs	r3, r3, #24
 800840a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	b2da      	uxtb	r2, r3
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	0a1b      	lsrs	r3, r3, #8
 800841c:	b2da      	uxtb	r2, r3
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	0d1b      	lsrs	r3, r3, #20
 8008426:	b2db      	uxtb	r3, r3
 8008428:	f003 030f 	and.w	r3, r3, #15
 800842c:	b2da      	uxtb	r2, r3
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	0c1b      	lsrs	r3, r3, #16
 8008436:	b29b      	uxth	r3, r3
 8008438:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800843c:	b29a      	uxth	r2, r3
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	b29b      	uxth	r3, r3
 8008442:	b2db      	uxtb	r3, r3
 8008444:	b29b      	uxth	r3, r3
 8008446:	4313      	orrs	r3, r2
 8008448:	b29a      	uxth	r2, r3
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	0a9b      	lsrs	r3, r3, #10
 8008452:	b2db      	uxtb	r3, r3
 8008454:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008458:	b2da      	uxtb	r2, r3
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	0a1b      	lsrs	r3, r3, #8
 8008462:	b2db      	uxtb	r3, r3
 8008464:	f003 0303 	and.w	r3, r3, #3
 8008468:	b2da      	uxtb	r2, r3
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	091b      	lsrs	r3, r3, #4
 8008472:	b2db      	uxtb	r3, r3
 8008474:	f003 030f 	and.w	r3, r3, #15
 8008478:	b2da      	uxtb	r2, r3
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	b2db      	uxtb	r3, r3
 8008482:	f003 030f 	and.w	r3, r3, #15
 8008486:	b2da      	uxtb	r2, r3
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	0e1b      	lsrs	r3, r3, #24
 8008490:	b2da      	uxtb	r2, r3
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800849e:	4618      	mov	r0, r3
 80084a0:	f003 f878 	bl	800b594 <SDMMC_CmdBlockLength>
 80084a4:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80084a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00d      	beq.n	80084c8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a08      	ldr	r2, [pc, #32]	@ (80084d4 <HAL_SD_GetCardStatus+0x178>)
 80084b2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084b8:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2201      	movs	r2, #1
 80084be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 80084c8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3750      	adds	r7, #80	@ 0x50
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	1fe00fff 	.word	0x1fe00fff

080084d8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80084d8:	b590      	push	{r4, r7, lr}
 80084da:	b08d      	sub	sp, #52	@ 0x34
 80084dc:	af02      	add	r7, sp, #8
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2203      	movs	r2, #3
 80084ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084f4:	2b03      	cmp	r3, #3
 80084f6:	d02e      	beq.n	8008556 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084fe:	d106      	bne.n	800850e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008504:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	635a      	str	r2, [r3, #52]	@ 0x34
 800850c:	e029      	b.n	8008562 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008514:	d10a      	bne.n	800852c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 fb64 	bl	8008be4 <SD_WideBus_Enable>
 800851c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008522:	6a3b      	ldr	r3, [r7, #32]
 8008524:	431a      	orrs	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	635a      	str	r2, [r3, #52]	@ 0x34
 800852a:	e01a      	b.n	8008562 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d10a      	bne.n	8008548 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 fba1 	bl	8008c7a <SD_WideBus_Disable>
 8008538:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800853e:	6a3b      	ldr	r3, [r7, #32]
 8008540:	431a      	orrs	r2, r3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	635a      	str	r2, [r3, #52]	@ 0x34
 8008546:	e00c      	b.n	8008562 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800854c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	635a      	str	r2, [r3, #52]	@ 0x34
 8008554:	e005      	b.n	8008562 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800855a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008566:	2b00      	cmp	r3, #0
 8008568:	d007      	beq.n	800857a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a5f      	ldr	r2, [pc, #380]	@ (80086ec <HAL_SD_ConfigWideBusOperation+0x214>)
 8008570:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008578:	e096      	b.n	80086a8 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800857a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800857e:	f04f 0100 	mov.w	r1, #0
 8008582:	f7fe f8bd 	bl	8006700 <HAL_RCCEx_GetPeriphCLKFreq>
 8008586:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	2b00      	cmp	r3, #0
 800858c:	f000 8083 	beq.w	8008696 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	695a      	ldr	r2, [r3, #20]
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	4950      	ldr	r1, [pc, #320]	@ (80086f0 <HAL_SD_ConfigWideBusOperation+0x218>)
 80085ae:	fba1 1303 	umull	r1, r3, r1, r3
 80085b2:	0e1b      	lsrs	r3, r3, #24
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d303      	bcc.n	80085c0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	695b      	ldr	r3, [r3, #20]
 80085bc:	61bb      	str	r3, [r7, #24]
 80085be:	e05a      	b.n	8008676 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085c8:	d103      	bne.n	80085d2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	61bb      	str	r3, [r7, #24]
 80085d0:	e051      	b.n	8008676 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085da:	d126      	bne.n	800862a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	695b      	ldr	r3, [r3, #20]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d10e      	bne.n	8008602 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	4a43      	ldr	r2, [pc, #268]	@ (80086f4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d906      	bls.n	80085fa <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	4a40      	ldr	r2, [pc, #256]	@ (80086f0 <HAL_SD_ConfigWideBusOperation+0x218>)
 80085f0:	fba2 2303 	umull	r2, r3, r2, r3
 80085f4:	0e5b      	lsrs	r3, r3, #25
 80085f6:	61bb      	str	r3, [r7, #24]
 80085f8:	e03d      	b.n	8008676 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	695b      	ldr	r3, [r3, #20]
 80085fe:	61bb      	str	r3, [r7, #24]
 8008600:	e039      	b.n	8008676 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	695b      	ldr	r3, [r3, #20]
 8008606:	005b      	lsls	r3, r3, #1
 8008608:	69fa      	ldr	r2, [r7, #28]
 800860a:	fbb2 f3f3 	udiv	r3, r2, r3
 800860e:	4a39      	ldr	r2, [pc, #228]	@ (80086f4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d906      	bls.n	8008622 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	4a36      	ldr	r2, [pc, #216]	@ (80086f0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008618:	fba2 2303 	umull	r2, r3, r2, r3
 800861c:	0e5b      	lsrs	r3, r3, #25
 800861e:	61bb      	str	r3, [r7, #24]
 8008620:	e029      	b.n	8008676 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	695b      	ldr	r3, [r3, #20]
 8008626:	61bb      	str	r3, [r7, #24]
 8008628:	e025      	b.n	8008676 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	695b      	ldr	r3, [r3, #20]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d10e      	bne.n	8008650 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	4a30      	ldr	r2, [pc, #192]	@ (80086f8 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d906      	bls.n	8008648 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	4a2c      	ldr	r2, [pc, #176]	@ (80086f0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800863e:	fba2 2303 	umull	r2, r3, r2, r3
 8008642:	0e1b      	lsrs	r3, r3, #24
 8008644:	61bb      	str	r3, [r7, #24]
 8008646:	e016      	b.n	8008676 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	695b      	ldr	r3, [r3, #20]
 800864c:	61bb      	str	r3, [r7, #24]
 800864e:	e012      	b.n	8008676 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	695b      	ldr	r3, [r3, #20]
 8008654:	005b      	lsls	r3, r3, #1
 8008656:	69fa      	ldr	r2, [r7, #28]
 8008658:	fbb2 f3f3 	udiv	r3, r2, r3
 800865c:	4a26      	ldr	r2, [pc, #152]	@ (80086f8 <HAL_SD_ConfigWideBusOperation+0x220>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d906      	bls.n	8008670 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	4a22      	ldr	r2, [pc, #136]	@ (80086f0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008666:	fba2 2303 	umull	r2, r3, r2, r3
 800866a:	0e1b      	lsrs	r3, r3, #24
 800866c:	61bb      	str	r3, [r7, #24]
 800866e:	e002      	b.n	8008676 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	695b      	ldr	r3, [r3, #20]
 8008674:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681c      	ldr	r4, [r3, #0]
 800867a:	466a      	mov	r2, sp
 800867c:	f107 0314 	add.w	r3, r7, #20
 8008680:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008684:	e882 0003 	stmia.w	r2, {r0, r1}
 8008688:	f107 0308 	add.w	r3, r7, #8
 800868c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800868e:	4620      	mov	r0, r4
 8008690:	f002 feb4 	bl	800b3fc <SDMMC_Init>
 8008694:	e008      	b.n	80086a8 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800869a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80086b0:	4618      	mov	r0, r3
 80086b2:	f002 ff6f 	bl	800b594 <SDMMC_CmdBlockLength>
 80086b6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80086b8:	6a3b      	ldr	r3, [r7, #32]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00c      	beq.n	80086d8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a0a      	ldr	r2, [pc, #40]	@ (80086ec <HAL_SD_ConfigWideBusOperation+0x214>)
 80086c4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086ca:	6a3b      	ldr	r3, [r7, #32]
 80086cc:	431a      	orrs	r2, r3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 80086e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	372c      	adds	r7, #44	@ 0x2c
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd90      	pop	{r4, r7, pc}
 80086ec:	1fe00fff 	.word	0x1fe00fff
 80086f0:	55e63b89 	.word	0x55e63b89
 80086f4:	02faf080 	.word	0x02faf080
 80086f8:	017d7840 	.word	0x017d7840

080086fc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b086      	sub	sp, #24
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008704:	2300      	movs	r3, #0
 8008706:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008708:	f107 030c 	add.w	r3, r7, #12
 800870c:	4619      	mov	r1, r3
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fa40 	bl	8008b94 <SD_SendStatus>
 8008714:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d005      	beq.n	8008728 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	431a      	orrs	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	0a5b      	lsrs	r3, r3, #9
 800872c:	f003 030f 	and.w	r3, r3, #15
 8008730:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008732:	693b      	ldr	r3, [r7, #16]
}
 8008734:	4618      	mov	r0, r3
 8008736:	3718      	adds	r7, #24
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b090      	sub	sp, #64	@ 0x40
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8008744:	2300      	movs	r3, #0
 8008746:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8008748:	f7f9 ff34 	bl	80025b4 <HAL_GetTick>
 800874c:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4618      	mov	r0, r3
 8008754:	f002 fe9a 	bl	800b48c <SDMMC_GetPowerState>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d102      	bne.n	8008764 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800875e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008762:	e0b5      	b.n	80088d0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008768:	2b03      	cmp	r3, #3
 800876a:	d02e      	beq.n	80087ca <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4618      	mov	r0, r3
 8008772:	f003 f81b 	bl	800b7ac <SDMMC_CmdSendCID>
 8008776:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800877a:	2b00      	cmp	r3, #0
 800877c:	d001      	beq.n	8008782 <SD_InitCard+0x46>
    {
      return errorstate;
 800877e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008780:	e0a6      	b.n	80088d0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2100      	movs	r1, #0
 8008788:	4618      	mov	r0, r3
 800878a:	f002 fec4 	bl	800b516 <SDMMC_GetResponse>
 800878e:	4602      	mov	r2, r0
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2104      	movs	r1, #4
 800879a:	4618      	mov	r0, r3
 800879c:	f002 febb 	bl	800b516 <SDMMC_GetResponse>
 80087a0:	4602      	mov	r2, r0
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2108      	movs	r1, #8
 80087ac:	4618      	mov	r0, r3
 80087ae:	f002 feb2 	bl	800b516 <SDMMC_GetResponse>
 80087b2:	4602      	mov	r2, r0
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	210c      	movs	r1, #12
 80087be:	4618      	mov	r0, r3
 80087c0:	f002 fea9 	bl	800b516 <SDMMC_GetResponse>
 80087c4:	4602      	mov	r2, r0
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ce:	2b03      	cmp	r3, #3
 80087d0:	d01d      	beq.n	800880e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80087d2:	e019      	b.n	8008808 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f107 020a 	add.w	r2, r7, #10
 80087dc:	4611      	mov	r1, r2
 80087de:	4618      	mov	r0, r3
 80087e0:	f003 f823 	bl	800b82a <SDMMC_CmdSetRelAdd>
 80087e4:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80087e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d001      	beq.n	80087f0 <SD_InitCard+0xb4>
      {
        return errorstate;
 80087ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ee:	e06f      	b.n	80088d0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80087f0:	f7f9 fee0 	bl	80025b4 <HAL_GetTick>
 80087f4:	4602      	mov	r2, r0
 80087f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	f241 3287 	movw	r2, #4999	@ 0x1387
 80087fe:	4293      	cmp	r3, r2
 8008800:	d902      	bls.n	8008808 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8008802:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008806:	e063      	b.n	80088d0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8008808:	897b      	ldrh	r3, [r7, #10]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d0e2      	beq.n	80087d4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008812:	2b03      	cmp	r3, #3
 8008814:	d036      	beq.n	8008884 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008816:	897b      	ldrh	r3, [r7, #10]
 8008818:	461a      	mov	r2, r3
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008826:	041b      	lsls	r3, r3, #16
 8008828:	4619      	mov	r1, r3
 800882a:	4610      	mov	r0, r2
 800882c:	f002 ffdd 	bl	800b7ea <SDMMC_CmdSendCSD>
 8008830:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008834:	2b00      	cmp	r3, #0
 8008836:	d001      	beq.n	800883c <SD_InitCard+0x100>
    {
      return errorstate;
 8008838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800883a:	e049      	b.n	80088d0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2100      	movs	r1, #0
 8008842:	4618      	mov	r0, r3
 8008844:	f002 fe67 	bl	800b516 <SDMMC_GetResponse>
 8008848:	4602      	mov	r2, r0
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2104      	movs	r1, #4
 8008854:	4618      	mov	r0, r3
 8008856:	f002 fe5e 	bl	800b516 <SDMMC_GetResponse>
 800885a:	4602      	mov	r2, r0
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2108      	movs	r1, #8
 8008866:	4618      	mov	r0, r3
 8008868:	f002 fe55 	bl	800b516 <SDMMC_GetResponse>
 800886c:	4602      	mov	r2, r0
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	210c      	movs	r1, #12
 8008878:	4618      	mov	r0, r3
 800887a:	f002 fe4c 	bl	800b516 <SDMMC_GetResponse>
 800887e:	4602      	mov	r2, r0
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	2104      	movs	r1, #4
 800888a:	4618      	mov	r0, r3
 800888c:	f002 fe43 	bl	800b516 <SDMMC_GetResponse>
 8008890:	4603      	mov	r3, r0
 8008892:	0d1a      	lsrs	r2, r3, #20
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008898:	f107 030c 	add.w	r3, r7, #12
 800889c:	4619      	mov	r1, r3
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f7ff fbb8 	bl	8008014 <HAL_SD_GetCardCSD>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d002      	beq.n	80088b0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80088aa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80088ae:	e00f      	b.n	80088d0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088b8:	041b      	lsls	r3, r3, #16
 80088ba:	4619      	mov	r1, r3
 80088bc:	4610      	mov	r0, r2
 80088be:	f002 fe8c 	bl	800b5da <SDMMC_CmdSelDesel>
 80088c2:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80088c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d001      	beq.n	80088ce <SD_InitCard+0x192>
  {
    return errorstate;
 80088ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088cc:	e000      	b.n	80088d0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3740      	adds	r7, #64	@ 0x40
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b086      	sub	sp, #24
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80088e0:	2300      	movs	r3, #0
 80088e2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80088e4:	2300      	movs	r3, #0
 80088e6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80088e8:	2300      	movs	r3, #0
 80088ea:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4618      	mov	r0, r3
 80088f2:	f002 fe95 	bl	800b620 <SDMMC_CmdGoIdleState>
 80088f6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d001      	beq.n	8008902 <SD_PowerON+0x2a>
  {
    return errorstate;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	e072      	b.n	80089e8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4618      	mov	r0, r3
 8008908:	f002 fea8 	bl	800b65c <SDMMC_CmdOperCond>
 800890c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008914:	d10d      	bne.n	8008932 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4618      	mov	r0, r3
 8008922:	f002 fe7d 	bl	800b620 <SDMMC_CmdGoIdleState>
 8008926:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d004      	beq.n	8008938 <SD_PowerON+0x60>
    {
      return errorstate;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	e05a      	b.n	80089e8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2201      	movs	r2, #1
 8008936:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800893c:	2b01      	cmp	r3, #1
 800893e:	d137      	bne.n	80089b0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2100      	movs	r1, #0
 8008946:	4618      	mov	r0, r3
 8008948:	f002 fea8 	bl	800b69c <SDMMC_CmdAppCommand>
 800894c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d02d      	beq.n	80089b0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008954:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008958:	e046      	b.n	80089e8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2100      	movs	r1, #0
 8008960:	4618      	mov	r0, r3
 8008962:	f002 fe9b 	bl	800b69c <SDMMC_CmdAppCommand>
 8008966:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d001      	beq.n	8008972 <SD_PowerON+0x9a>
    {
      return errorstate;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	e03a      	b.n	80089e8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	491e      	ldr	r1, [pc, #120]	@ (80089f0 <SD_PowerON+0x118>)
 8008978:	4618      	mov	r0, r3
 800897a:	f002 feb2 	bl	800b6e2 <SDMMC_CmdAppOperCommand>
 800897e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d002      	beq.n	800898c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008986:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800898a:	e02d      	b.n	80089e8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2100      	movs	r1, #0
 8008992:	4618      	mov	r0, r3
 8008994:	f002 fdbf 	bl	800b516 <SDMMC_GetResponse>
 8008998:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	0fdb      	lsrs	r3, r3, #31
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d101      	bne.n	80089a6 <SD_PowerON+0xce>
 80089a2:	2301      	movs	r3, #1
 80089a4:	e000      	b.n	80089a8 <SD_PowerON+0xd0>
 80089a6:	2300      	movs	r3, #0
 80089a8:	613b      	str	r3, [r7, #16]

    count++;
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	3301      	adds	r3, #1
 80089ae:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d802      	bhi.n	80089c0 <SD_PowerON+0xe8>
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d0cc      	beq.n	800895a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d902      	bls.n	80089d0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80089ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80089ce:	e00b      	b.n	80089e8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d002      	beq.n	80089e6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2201      	movs	r2, #1
 80089e4:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80089e6:	2300      	movs	r3, #0
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3718      	adds	r7, #24
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	c1100000 	.word	0xc1100000

080089f4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b08c      	sub	sp, #48	@ 0x30
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80089fe:	f7f9 fdd9 	bl	80025b4 <HAL_GetTick>
 8008a02:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2100      	movs	r1, #0
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f002 fd81 	bl	800b516 <SDMMC_GetResponse>
 8008a14:	4603      	mov	r3, r0
 8008a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a1e:	d102      	bne.n	8008a26 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008a20:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008a24:	e0b0      	b.n	8008b88 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2140      	movs	r1, #64	@ 0x40
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f002 fdb1 	bl	800b594 <SDMMC_CmdBlockLength>
 8008a32:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a34:	6a3b      	ldr	r3, [r7, #32]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d005      	beq.n	8008a46 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008a42:	6a3b      	ldr	r3, [r7, #32]
 8008a44:	e0a0      	b.n	8008b88 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a4e:	041b      	lsls	r3, r3, #16
 8008a50:	4619      	mov	r1, r3
 8008a52:	4610      	mov	r0, r2
 8008a54:	f002 fe22 	bl	800b69c <SDMMC_CmdAppCommand>
 8008a58:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a5a:	6a3b      	ldr	r3, [r7, #32]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d005      	beq.n	8008a6c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008a68:	6a3b      	ldr	r3, [r7, #32]
 8008a6a:	e08d      	b.n	8008b88 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8008a70:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008a72:	2340      	movs	r3, #64	@ 0x40
 8008a74:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008a76:	2360      	movs	r3, #96	@ 0x60
 8008a78:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008a7a:	2302      	movs	r3, #2
 8008a7c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008a82:	2301      	movs	r3, #1
 8008a84:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f107 0208 	add.w	r2, r7, #8
 8008a8e:	4611      	mov	r1, r2
 8008a90:	4618      	mov	r0, r3
 8008a92:	f002 fd53 	bl	800b53c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f002 ff0a 	bl	800b8b4 <SDMMC_CmdStatusRegister>
 8008aa0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008aa2:	6a3b      	ldr	r3, [r7, #32]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d02b      	beq.n	8008b00 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008ab0:	6a3b      	ldr	r3, [r7, #32]
 8008ab2:	e069      	b.n	8008b88 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008aba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d013      	beq.n	8008aea <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ac6:	e00d      	b.n	8008ae4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f002 fcbf 	bl	800b450 <SDMMC_ReadFIFO>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad6:	601a      	str	r2, [r3, #0]
        pData++;
 8008ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ada:	3304      	adds	r3, #4
 8008adc:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8008ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae6:	2b07      	cmp	r3, #7
 8008ae8:	d9ee      	bls.n	8008ac8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8008aea:	f7f9 fd63 	bl	80025b4 <HAL_GetTick>
 8008aee:	4602      	mov	r2, r0
 8008af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af2:	1ad3      	subs	r3, r2, r3
 8008af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af8:	d102      	bne.n	8008b00 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008afa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008afe:	e043      	b.n	8008b88 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b06:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d0d2      	beq.n	8008ab4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b14:	f003 0308 	and.w	r3, r3, #8
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d001      	beq.n	8008b20 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008b1c:	2308      	movs	r3, #8
 8008b1e:	e033      	b.n	8008b88 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b26:	f003 0302 	and.w	r3, r3, #2
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d001      	beq.n	8008b32 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008b2e:	2302      	movs	r3, #2
 8008b30:	e02a      	b.n	8008b88 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b38:	f003 0320 	and.w	r3, r3, #32
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d017      	beq.n	8008b70 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008b40:	2320      	movs	r3, #32
 8008b42:	e021      	b.n	8008b88 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f002 fc81 	bl	800b450 <SDMMC_ReadFIFO>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b52:	601a      	str	r2, [r3, #0]
    pData++;
 8008b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b56:	3304      	adds	r3, #4
 8008b58:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8008b5a:	f7f9 fd2b 	bl	80025b4 <HAL_GetTick>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b68:	d102      	bne.n	8008b70 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008b6a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008b6e:	e00b      	b.n	8008b88 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1e2      	bne.n	8008b44 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a03      	ldr	r2, [pc, #12]	@ (8008b90 <SD_SendSDStatus+0x19c>)
 8008b84:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3730      	adds	r7, #48	@ 0x30
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	18000f3a 	.word	0x18000f3a

08008b94 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d102      	bne.n	8008baa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008ba4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008ba8:	e018      	b.n	8008bdc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bb2:	041b      	lsls	r3, r3, #16
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	4610      	mov	r0, r2
 8008bb8:	f002 fe59 	bl	800b86e <SDMMC_CmdSendStatus>
 8008bbc:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d001      	beq.n	8008bc8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	e009      	b.n	8008bdc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2100      	movs	r1, #0
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f002 fca1 	bl	800b516 <SDMMC_GetResponse>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b086      	sub	sp, #24
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008bec:	2300      	movs	r3, #0
 8008bee:	60fb      	str	r3, [r7, #12]
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f002 fc8b 	bl	800b516 <SDMMC_GetResponse>
 8008c00:	4603      	mov	r3, r0
 8008c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c0a:	d102      	bne.n	8008c12 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008c0c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008c10:	e02f      	b.n	8008c72 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008c12:	f107 030c 	add.w	r3, r7, #12
 8008c16:	4619      	mov	r1, r3
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 f879 	bl	8008d10 <SD_FindSCR>
 8008c1e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d001      	beq.n	8008c2a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	e023      	b.n	8008c72 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d01c      	beq.n	8008c6e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c3c:	041b      	lsls	r3, r3, #16
 8008c3e:	4619      	mov	r1, r3
 8008c40:	4610      	mov	r0, r2
 8008c42:	f002 fd2b 	bl	800b69c <SDMMC_CmdAppCommand>
 8008c46:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d001      	beq.n	8008c52 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	e00f      	b.n	8008c72 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2102      	movs	r1, #2
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f002 fd62 	bl	800b722 <SDMMC_CmdBusWidth>
 8008c5e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d001      	beq.n	8008c6a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	e003      	b.n	8008c72 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	e001      	b.n	8008c72 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008c6e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3718      	adds	r7, #24
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b086      	sub	sp, #24
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008c82:	2300      	movs	r3, #0
 8008c84:	60fb      	str	r3, [r7, #12]
 8008c86:	2300      	movs	r3, #0
 8008c88:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2100      	movs	r1, #0
 8008c90:	4618      	mov	r0, r3
 8008c92:	f002 fc40 	bl	800b516 <SDMMC_GetResponse>
 8008c96:	4603      	mov	r3, r0
 8008c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ca0:	d102      	bne.n	8008ca8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008ca2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008ca6:	e02f      	b.n	8008d08 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008ca8:	f107 030c 	add.w	r3, r7, #12
 8008cac:	4619      	mov	r1, r3
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 f82e 	bl	8008d10 <SD_FindSCR>
 8008cb4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d001      	beq.n	8008cc0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	e023      	b.n	8008d08 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d01c      	beq.n	8008d04 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cd2:	041b      	lsls	r3, r3, #16
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	4610      	mov	r0, r2
 8008cd8:	f002 fce0 	bl	800b69c <SDMMC_CmdAppCommand>
 8008cdc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d001      	beq.n	8008ce8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	e00f      	b.n	8008d08 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2100      	movs	r1, #0
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f002 fd17 	bl	800b722 <SDMMC_CmdBusWidth>
 8008cf4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d001      	beq.n	8008d00 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	e003      	b.n	8008d08 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008d00:	2300      	movs	r3, #0
 8008d02:	e001      	b.n	8008d08 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008d04:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3718      	adds	r7, #24
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b08e      	sub	sp, #56	@ 0x38
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008d1a:	f7f9 fc4b 	bl	80025b4 <HAL_GetTick>
 8008d1e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8008d20:	2300      	movs	r3, #0
 8008d22:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008d24:	2300      	movs	r3, #0
 8008d26:	60bb      	str	r3, [r7, #8]
 8008d28:	2300      	movs	r3, #0
 8008d2a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2108      	movs	r1, #8
 8008d36:	4618      	mov	r0, r3
 8008d38:	f002 fc2c 	bl	800b594 <SDMMC_CmdBlockLength>
 8008d3c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d001      	beq.n	8008d48 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d46:	e0ad      	b.n	8008ea4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d50:	041b      	lsls	r3, r3, #16
 8008d52:	4619      	mov	r1, r3
 8008d54:	4610      	mov	r0, r2
 8008d56:	f002 fca1 	bl	800b69c <SDMMC_CmdAppCommand>
 8008d5a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d001      	beq.n	8008d66 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d64:	e09e      	b.n	8008ea4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008d66:	f04f 33ff 	mov.w	r3, #4294967295
 8008d6a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008d6c:	2308      	movs	r3, #8
 8008d6e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008d70:	2330      	movs	r3, #48	@ 0x30
 8008d72:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008d74:	2302      	movs	r3, #2
 8008d76:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f107 0210 	add.w	r2, r7, #16
 8008d88:	4611      	mov	r1, r2
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f002 fbd6 	bl	800b53c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4618      	mov	r0, r3
 8008d96:	f002 fce7 	bl	800b768 <SDMMC_CmdSendSCR>
 8008d9a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d027      	beq.n	8008df2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008da4:	e07e      	b.n	8008ea4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d113      	bne.n	8008ddc <SD_FindSCR+0xcc>
 8008db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d110      	bne.n	8008ddc <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f002 fb46 	bl	800b450 <SDMMC_ReadFIFO>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f002 fb3f 	bl	800b450 <SDMMC_ReadFIFO>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	60fb      	str	r3, [r7, #12]
      index++;
 8008dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dd8:	3301      	adds	r3, #1
 8008dda:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8008ddc:	f7f9 fbea 	bl	80025b4 <HAL_GetTick>
 8008de0:	4602      	mov	r2, r0
 8008de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de4:	1ad3      	subs	r3, r2, r3
 8008de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dea:	d102      	bne.n	8008df2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008dec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008df0:	e058      	b.n	8008ea4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008df8:	f240 532a 	movw	r3, #1322	@ 0x52a
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d0d1      	beq.n	8008da6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e08:	f003 0308 	and.w	r3, r3, #8
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d005      	beq.n	8008e1c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2208      	movs	r2, #8
 8008e16:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008e18:	2308      	movs	r3, #8
 8008e1a:	e043      	b.n	8008ea4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e22:	f003 0302 	and.w	r3, r3, #2
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d005      	beq.n	8008e36 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	2202      	movs	r2, #2
 8008e30:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008e32:	2302      	movs	r3, #2
 8008e34:	e036      	b.n	8008ea4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e3c:	f003 0320 	and.w	r3, r3, #32
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d005      	beq.n	8008e50 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2220      	movs	r2, #32
 8008e4a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008e4c:	2320      	movs	r3, #32
 8008e4e:	e029      	b.n	8008ea4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a15      	ldr	r2, [pc, #84]	@ (8008eac <SD_FindSCR+0x19c>)
 8008e56:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	061a      	lsls	r2, r3, #24
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	021b      	lsls	r3, r3, #8
 8008e60:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008e64:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	0a1b      	lsrs	r3, r3, #8
 8008e6a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8008e6e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	0e1b      	lsrs	r3, r3, #24
 8008e74:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8008e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e78:	601a      	str	r2, [r3, #0]
    scr++;
 8008e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e7c:	3304      	adds	r3, #4
 8008e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	061a      	lsls	r2, r3, #24
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	021b      	lsls	r3, r3, #8
 8008e88:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008e8c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	0a1b      	lsrs	r3, r3, #8
 8008e92:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8008e96:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	0e1b      	lsrs	r3, r3, #24
 8008e9c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8008e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ea0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008ea2:	2300      	movs	r3, #0
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3738      	adds	r7, #56	@ 0x38
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	18000f3a 	.word	0x18000f3a

08008eb0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d101      	bne.n	8008ec4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e02b      	b.n	8008f1c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d106      	bne.n	8008ede <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f7f8 fe5b 	bl	8001b94 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2202      	movs	r2, #2
 8008ee2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	3304      	adds	r3, #4
 8008eee:	4619      	mov	r1, r3
 8008ef0:	4610      	mov	r0, r2
 8008ef2:	f002 f9bd 	bl	800b270 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6818      	ldr	r0, [r3, #0]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	461a      	mov	r2, r3
 8008f00:	6839      	ldr	r1, [r7, #0]
 8008f02:	f002 fa11 	bl	800b328 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8008f06:	4b07      	ldr	r3, [pc, #28]	@ (8008f24 <HAL_SDRAM_Init+0x74>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a06      	ldr	r2, [pc, #24]	@ (8008f24 <HAL_SDRAM_Init+0x74>)
 8008f0c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008f10:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2201      	movs	r2, #1
 8008f16:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	52004000 	.word	0x52004000

08008f28 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d101      	bne.n	8008f3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e10f      	b.n	800915a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a87      	ldr	r2, [pc, #540]	@ (8009164 <HAL_SPI_Init+0x23c>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d00f      	beq.n	8008f6a <HAL_SPI_Init+0x42>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a86      	ldr	r2, [pc, #536]	@ (8009168 <HAL_SPI_Init+0x240>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d00a      	beq.n	8008f6a <HAL_SPI_Init+0x42>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a84      	ldr	r2, [pc, #528]	@ (800916c <HAL_SPI_Init+0x244>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d005      	beq.n	8008f6a <HAL_SPI_Init+0x42>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	2b0f      	cmp	r3, #15
 8008f64:	d901      	bls.n	8008f6a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	e0f7      	b.n	800915a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 fe2e 	bl	8009bcc <SPI_GetPacketSize>
 8008f70:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a7b      	ldr	r2, [pc, #492]	@ (8009164 <HAL_SPI_Init+0x23c>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d00c      	beq.n	8008f96 <HAL_SPI_Init+0x6e>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a79      	ldr	r2, [pc, #484]	@ (8009168 <HAL_SPI_Init+0x240>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d007      	beq.n	8008f96 <HAL_SPI_Init+0x6e>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a78      	ldr	r2, [pc, #480]	@ (800916c <HAL_SPI_Init+0x244>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d002      	beq.n	8008f96 <HAL_SPI_Init+0x6e>
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2b08      	cmp	r3, #8
 8008f94:	d811      	bhi.n	8008fba <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008f9a:	4a72      	ldr	r2, [pc, #456]	@ (8009164 <HAL_SPI_Init+0x23c>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d009      	beq.n	8008fb4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a70      	ldr	r2, [pc, #448]	@ (8009168 <HAL_SPI_Init+0x240>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d004      	beq.n	8008fb4 <HAL_SPI_Init+0x8c>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a6f      	ldr	r2, [pc, #444]	@ (800916c <HAL_SPI_Init+0x244>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d104      	bne.n	8008fbe <HAL_SPI_Init+0x96>
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2b10      	cmp	r3, #16
 8008fb8:	d901      	bls.n	8008fbe <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e0cd      	b.n	800915a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d106      	bne.n	8008fd8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f7f8 fc62 	bl	800189c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2202      	movs	r2, #2
 8008fdc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f022 0201 	bic.w	r2, r2, #1
 8008fee:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008ffa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	699b      	ldr	r3, [r3, #24]
 8009000:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009004:	d119      	bne.n	800903a <HAL_SPI_Init+0x112>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800900e:	d103      	bne.n	8009018 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009014:	2b00      	cmp	r3, #0
 8009016:	d008      	beq.n	800902a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800901c:	2b00      	cmp	r3, #0
 800901e:	d10c      	bne.n	800903a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009024:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009028:	d107      	bne.n	800903a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009038:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009042:	2b00      	cmp	r3, #0
 8009044:	d00f      	beq.n	8009066 <HAL_SPI_Init+0x13e>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	2b06      	cmp	r3, #6
 800904c:	d90b      	bls.n	8009066 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	430a      	orrs	r2, r1
 8009062:	601a      	str	r2, [r3, #0]
 8009064:	e007      	b.n	8009076 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009074:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	69da      	ldr	r2, [r3, #28]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800907e:	431a      	orrs	r2, r3
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	431a      	orrs	r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009088:	ea42 0103 	orr.w	r1, r2, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	68da      	ldr	r2, [r3, #12]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	430a      	orrs	r2, r1
 8009096:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090a0:	431a      	orrs	r2, r3
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090a6:	431a      	orrs	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	699b      	ldr	r3, [r3, #24]
 80090ac:	431a      	orrs	r2, r3
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	431a      	orrs	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	695b      	ldr	r3, [r3, #20]
 80090b8:	431a      	orrs	r2, r3
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a1b      	ldr	r3, [r3, #32]
 80090be:	431a      	orrs	r2, r3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	431a      	orrs	r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090ca:	431a      	orrs	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	431a      	orrs	r2, r3
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090d6:	ea42 0103 	orr.w	r1, r2, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	430a      	orrs	r2, r1
 80090e4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d113      	bne.n	8009116 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009100:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009114:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f022 0201 	bic.w	r2, r2, #1
 8009124:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800912e:	2b00      	cmp	r3, #0
 8009130:	d00a      	beq.n	8009148 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	430a      	orrs	r2, r1
 8009146:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009158:	2300      	movs	r3, #0
}
 800915a:	4618      	mov	r0, r3
 800915c:	3710      	adds	r7, #16
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	40013000 	.word	0x40013000
 8009168:	40003800 	.word	0x40003800
 800916c:	40003c00 	.word	0x40003c00

08009170 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b088      	sub	sp, #32
 8009174:	af02      	add	r7, sp, #8
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	603b      	str	r3, [r7, #0]
 800917c:	4613      	mov	r3, r2
 800917e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	3320      	adds	r3, #32
 8009186:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009188:	f7f9 fa14 	bl	80025b4 <HAL_GetTick>
 800918c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009194:	b2db      	uxtb	r3, r3
 8009196:	2b01      	cmp	r3, #1
 8009198:	d001      	beq.n	800919e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800919a:	2302      	movs	r3, #2
 800919c:	e1d1      	b.n	8009542 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d002      	beq.n	80091aa <HAL_SPI_Transmit+0x3a>
 80091a4:	88fb      	ldrh	r3, [r7, #6]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d101      	bne.n	80091ae <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	e1c9      	b.n	8009542 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d101      	bne.n	80091bc <HAL_SPI_Transmit+0x4c>
 80091b8:	2302      	movs	r3, #2
 80091ba:	e1c2      	b.n	8009542 <HAL_SPI_Transmit+0x3d2>
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2203      	movs	r2, #3
 80091c8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2200      	movs	r2, #0
 80091d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	68ba      	ldr	r2, [r7, #8]
 80091d8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	88fa      	ldrh	r2, [r7, #6]
 80091de:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	88fa      	ldrh	r2, [r7, #6]
 80091e6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2200      	movs	r2, #0
 80091ee:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2200      	movs	r2, #0
 80091f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2200      	movs	r2, #0
 80091fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2200      	movs	r2, #0
 8009204:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2200      	movs	r2, #0
 800920a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009214:	d108      	bne.n	8009228 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009224:	601a      	str	r2, [r3, #0]
 8009226:	e009      	b.n	800923c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800923a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	685a      	ldr	r2, [r3, #4]
 8009242:	4b96      	ldr	r3, [pc, #600]	@ (800949c <HAL_SPI_Transmit+0x32c>)
 8009244:	4013      	ands	r3, r2
 8009246:	88f9      	ldrh	r1, [r7, #6]
 8009248:	68fa      	ldr	r2, [r7, #12]
 800924a:	6812      	ldr	r2, [r2, #0]
 800924c:	430b      	orrs	r3, r1
 800924e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f042 0201 	orr.w	r2, r2, #1
 800925e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009268:	d107      	bne.n	800927a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009278:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	2b0f      	cmp	r3, #15
 8009280:	d947      	bls.n	8009312 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009282:	e03f      	b.n	8009304 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	695b      	ldr	r3, [r3, #20]
 800928a:	f003 0302 	and.w	r3, r3, #2
 800928e:	2b02      	cmp	r3, #2
 8009290:	d114      	bne.n	80092bc <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	6812      	ldr	r2, [r2, #0]
 800929c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092a2:	1d1a      	adds	r2, r3, #4
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	3b01      	subs	r3, #1
 80092b2:	b29a      	uxth	r2, r3
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80092ba:	e023      	b.n	8009304 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092bc:	f7f9 f97a 	bl	80025b4 <HAL_GetTick>
 80092c0:	4602      	mov	r2, r0
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	1ad3      	subs	r3, r2, r3
 80092c6:	683a      	ldr	r2, [r7, #0]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d803      	bhi.n	80092d4 <HAL_SPI_Transmit+0x164>
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d2:	d102      	bne.n	80092da <HAL_SPI_Transmit+0x16a>
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d114      	bne.n	8009304 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	f000 fba8 	bl	8009a30 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009300:	2303      	movs	r3, #3
 8009302:	e11e      	b.n	8009542 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800930a:	b29b      	uxth	r3, r3
 800930c:	2b00      	cmp	r3, #0
 800930e:	d1b9      	bne.n	8009284 <HAL_SPI_Transmit+0x114>
 8009310:	e0f1      	b.n	80094f6 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	2b07      	cmp	r3, #7
 8009318:	f240 80e6 	bls.w	80094e8 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800931c:	e05d      	b.n	80093da <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	695b      	ldr	r3, [r3, #20]
 8009324:	f003 0302 	and.w	r3, r3, #2
 8009328:	2b02      	cmp	r3, #2
 800932a:	d132      	bne.n	8009392 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009332:	b29b      	uxth	r3, r3
 8009334:	2b01      	cmp	r3, #1
 8009336:	d918      	bls.n	800936a <HAL_SPI_Transmit+0x1fa>
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800933c:	2b00      	cmp	r3, #0
 800933e:	d014      	beq.n	800936a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	6812      	ldr	r2, [r2, #0]
 800934a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009350:	1d1a      	adds	r2, r3, #4
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800935c:	b29b      	uxth	r3, r3
 800935e:	3b02      	subs	r3, #2
 8009360:	b29a      	uxth	r2, r3
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009368:	e037      	b.n	80093da <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800936e:	881a      	ldrh	r2, [r3, #0]
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009378:	1c9a      	adds	r2, r3, #2
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009384:	b29b      	uxth	r3, r3
 8009386:	3b01      	subs	r3, #1
 8009388:	b29a      	uxth	r2, r3
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009390:	e023      	b.n	80093da <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009392:	f7f9 f90f 	bl	80025b4 <HAL_GetTick>
 8009396:	4602      	mov	r2, r0
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	1ad3      	subs	r3, r2, r3
 800939c:	683a      	ldr	r2, [r7, #0]
 800939e:	429a      	cmp	r2, r3
 80093a0:	d803      	bhi.n	80093aa <HAL_SPI_Transmit+0x23a>
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093a8:	d102      	bne.n	80093b0 <HAL_SPI_Transmit+0x240>
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d114      	bne.n	80093da <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f000 fb3d 	bl	8009a30 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2201      	movs	r2, #1
 80093ca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80093d6:	2303      	movs	r3, #3
 80093d8:	e0b3      	b.n	8009542 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d19b      	bne.n	800931e <HAL_SPI_Transmit+0x1ae>
 80093e6:	e086      	b.n	80094f6 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	695b      	ldr	r3, [r3, #20]
 80093ee:	f003 0302 	and.w	r3, r3, #2
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	d154      	bne.n	80094a0 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	2b03      	cmp	r3, #3
 8009400:	d918      	bls.n	8009434 <HAL_SPI_Transmit+0x2c4>
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009406:	2b40      	cmp	r3, #64	@ 0x40
 8009408:	d914      	bls.n	8009434 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	6812      	ldr	r2, [r2, #0]
 8009414:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800941a:	1d1a      	adds	r2, r3, #4
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009426:	b29b      	uxth	r3, r3
 8009428:	3b04      	subs	r3, #4
 800942a:	b29a      	uxth	r2, r3
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009432:	e059      	b.n	80094e8 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800943a:	b29b      	uxth	r3, r3
 800943c:	2b01      	cmp	r3, #1
 800943e:	d917      	bls.n	8009470 <HAL_SPI_Transmit+0x300>
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009444:	2b00      	cmp	r3, #0
 8009446:	d013      	beq.n	8009470 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800944c:	881a      	ldrh	r2, [r3, #0]
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009456:	1c9a      	adds	r2, r3, #2
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009462:	b29b      	uxth	r3, r3
 8009464:	3b02      	subs	r3, #2
 8009466:	b29a      	uxth	r2, r3
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800946e:	e03b      	b.n	80094e8 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	3320      	adds	r3, #32
 800947a:	7812      	ldrb	r2, [r2, #0]
 800947c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009482:	1c5a      	adds	r2, r3, #1
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800948e:	b29b      	uxth	r3, r3
 8009490:	3b01      	subs	r3, #1
 8009492:	b29a      	uxth	r2, r3
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800949a:	e025      	b.n	80094e8 <HAL_SPI_Transmit+0x378>
 800949c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094a0:	f7f9 f888 	bl	80025b4 <HAL_GetTick>
 80094a4:	4602      	mov	r2, r0
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	1ad3      	subs	r3, r2, r3
 80094aa:	683a      	ldr	r2, [r7, #0]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d803      	bhi.n	80094b8 <HAL_SPI_Transmit+0x348>
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b6:	d102      	bne.n	80094be <HAL_SPI_Transmit+0x34e>
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d114      	bne.n	80094e8 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80094be:	68f8      	ldr	r0, [r7, #12]
 80094c0:	f000 fab6 	bl	8009a30 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2201      	movs	r2, #1
 80094d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2200      	movs	r2, #0
 80094e0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80094e4:	2303      	movs	r3, #3
 80094e6:	e02c      	b.n	8009542 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f47f af79 	bne.w	80093e8 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	9300      	str	r3, [sp, #0]
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	2200      	movs	r2, #0
 80094fe:	2108      	movs	r1, #8
 8009500:	68f8      	ldr	r0, [r7, #12]
 8009502:	f000 fb35 	bl	8009b70 <SPI_WaitOnFlagUntilTimeout>
 8009506:	4603      	mov	r3, r0
 8009508:	2b00      	cmp	r3, #0
 800950a:	d007      	beq.n	800951c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009512:	f043 0220 	orr.w	r2, r3, #32
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800951c:	68f8      	ldr	r0, [r7, #12]
 800951e:	f000 fa87 	bl	8009a30 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2201      	movs	r2, #1
 8009526:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2200      	movs	r2, #0
 800952e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009538:	2b00      	cmp	r3, #0
 800953a:	d001      	beq.n	8009540 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800953c:	2301      	movs	r3, #1
 800953e:	e000      	b.n	8009542 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8009540:	2300      	movs	r3, #0
  }
}
 8009542:	4618      	mov	r0, r3
 8009544:	3718      	adds	r7, #24
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop

0800954c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b088      	sub	sp, #32
 8009550:	af00      	add	r7, sp, #0
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	603b      	str	r3, [r7, #0]
 8009558:	4613      	mov	r3, r2
 800955a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009560:	095b      	lsrs	r3, r3, #5
 8009562:	b29b      	uxth	r3, r3
 8009564:	3301      	adds	r3, #1
 8009566:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	3330      	adds	r3, #48	@ 0x30
 800956e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009570:	f7f9 f820 	bl	80025b4 <HAL_GetTick>
 8009574:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800957c:	b2db      	uxtb	r3, r3
 800957e:	2b01      	cmp	r3, #1
 8009580:	d001      	beq.n	8009586 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8009582:	2302      	movs	r3, #2
 8009584:	e250      	b.n	8009a28 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d002      	beq.n	8009592 <HAL_SPI_Receive+0x46>
 800958c:	88fb      	ldrh	r3, [r7, #6]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d101      	bne.n	8009596 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	e248      	b.n	8009a28 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800959c:	2b01      	cmp	r3, #1
 800959e:	d101      	bne.n	80095a4 <HAL_SPI_Receive+0x58>
 80095a0:	2302      	movs	r3, #2
 80095a2:	e241      	b.n	8009a28 <HAL_SPI_Receive+0x4dc>
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2204      	movs	r2, #4
 80095b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	68ba      	ldr	r2, [r7, #8]
 80095c0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	88fa      	ldrh	r2, [r7, #6]
 80095c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	88fa      	ldrh	r2, [r7, #6]
 80095ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2200      	movs	r2, #0
 80095d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2200      	movs	r2, #0
 80095dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2200      	movs	r2, #0
 80095e4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2200      	movs	r2, #0
 80095ec:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2200      	movs	r2, #0
 80095f2:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80095fc:	d108      	bne.n	8009610 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800960c:	601a      	str	r2, [r3, #0]
 800960e:	e009      	b.n	8009624 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68db      	ldr	r3, [r3, #12]
 8009616:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8009622:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	685a      	ldr	r2, [r3, #4]
 800962a:	4b95      	ldr	r3, [pc, #596]	@ (8009880 <HAL_SPI_Receive+0x334>)
 800962c:	4013      	ands	r3, r2
 800962e:	88f9      	ldrh	r1, [r7, #6]
 8009630:	68fa      	ldr	r2, [r7, #12]
 8009632:	6812      	ldr	r2, [r2, #0]
 8009634:	430b      	orrs	r3, r1
 8009636:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f042 0201 	orr.w	r2, r2, #1
 8009646:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009650:	d107      	bne.n	8009662 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009660:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	2b0f      	cmp	r3, #15
 8009668:	d96c      	bls.n	8009744 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800966a:	e064      	b.n	8009736 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	695b      	ldr	r3, [r3, #20]
 8009672:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	695b      	ldr	r3, [r3, #20]
 800967a:	f003 0301 	and.w	r3, r3, #1
 800967e:	2b01      	cmp	r3, #1
 8009680:	d114      	bne.n	80096ac <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800968a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800968c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009692:	1d1a      	adds	r2, r3, #4
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800969e:	b29b      	uxth	r3, r3
 80096a0:	3b01      	subs	r3, #1
 80096a2:	b29a      	uxth	r2, r3
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80096aa:	e044      	b.n	8009736 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	8bfa      	ldrh	r2, [r7, #30]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d919      	bls.n	80096ee <HAL_SPI_Receive+0x1a2>
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d014      	beq.n	80096ee <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80096ce:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096d4:	1d1a      	adds	r2, r3, #4
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	3b01      	subs	r3, #1
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80096ec:	e023      	b.n	8009736 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80096ee:	f7f8 ff61 	bl	80025b4 <HAL_GetTick>
 80096f2:	4602      	mov	r2, r0
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	1ad3      	subs	r3, r2, r3
 80096f8:	683a      	ldr	r2, [r7, #0]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d803      	bhi.n	8009706 <HAL_SPI_Receive+0x1ba>
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009704:	d102      	bne.n	800970c <HAL_SPI_Receive+0x1c0>
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d114      	bne.n	8009736 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800970c:	68f8      	ldr	r0, [r7, #12]
 800970e:	f000 f98f 	bl	8009a30 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009718:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2201      	movs	r2, #1
 8009726:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2200      	movs	r2, #0
 800972e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009732:	2303      	movs	r3, #3
 8009734:	e178      	b.n	8009a28 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800973c:	b29b      	uxth	r3, r3
 800973e:	2b00      	cmp	r3, #0
 8009740:	d194      	bne.n	800966c <HAL_SPI_Receive+0x120>
 8009742:	e15e      	b.n	8009a02 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	2b07      	cmp	r3, #7
 800974a:	f240 8153 	bls.w	80099f4 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800974e:	e08f      	b.n	8009870 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	695b      	ldr	r3, [r3, #20]
 8009756:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	695b      	ldr	r3, [r3, #20]
 800975e:	f003 0301 	and.w	r3, r3, #1
 8009762:	2b01      	cmp	r3, #1
 8009764:	d114      	bne.n	8009790 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800976a:	69ba      	ldr	r2, [r7, #24]
 800976c:	8812      	ldrh	r2, [r2, #0]
 800976e:	b292      	uxth	r2, r2
 8009770:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009776:	1c9a      	adds	r2, r3, #2
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009782:	b29b      	uxth	r3, r3
 8009784:	3b01      	subs	r3, #1
 8009786:	b29a      	uxth	r2, r3
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800978e:	e06f      	b.n	8009870 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009796:	b29b      	uxth	r3, r3
 8009798:	8bfa      	ldrh	r2, [r7, #30]
 800979a:	429a      	cmp	r2, r3
 800979c:	d924      	bls.n	80097e8 <HAL_SPI_Receive+0x29c>
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d01f      	beq.n	80097e8 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097ac:	69ba      	ldr	r2, [r7, #24]
 80097ae:	8812      	ldrh	r2, [r2, #0]
 80097b0:	b292      	uxth	r2, r2
 80097b2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097b8:	1c9a      	adds	r2, r3, #2
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097c2:	69ba      	ldr	r2, [r7, #24]
 80097c4:	8812      	ldrh	r2, [r2, #0]
 80097c6:	b292      	uxth	r2, r2
 80097c8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097ce:	1c9a      	adds	r2, r3, #2
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80097da:	b29b      	uxth	r3, r3
 80097dc:	3b02      	subs	r3, #2
 80097de:	b29a      	uxth	r2, r3
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80097e6:	e043      	b.n	8009870 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d119      	bne.n	8009828 <HAL_SPI_Receive+0x2dc>
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d014      	beq.n	8009828 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009802:	69ba      	ldr	r2, [r7, #24]
 8009804:	8812      	ldrh	r2, [r2, #0]
 8009806:	b292      	uxth	r2, r2
 8009808:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800980e:	1c9a      	adds	r2, r3, #2
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800981a:	b29b      	uxth	r3, r3
 800981c:	3b01      	subs	r3, #1
 800981e:	b29a      	uxth	r2, r3
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009826:	e023      	b.n	8009870 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009828:	f7f8 fec4 	bl	80025b4 <HAL_GetTick>
 800982c:	4602      	mov	r2, r0
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	1ad3      	subs	r3, r2, r3
 8009832:	683a      	ldr	r2, [r7, #0]
 8009834:	429a      	cmp	r2, r3
 8009836:	d803      	bhi.n	8009840 <HAL_SPI_Receive+0x2f4>
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800983e:	d102      	bne.n	8009846 <HAL_SPI_Receive+0x2fa>
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d114      	bne.n	8009870 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	f000 f8f2 	bl	8009a30 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009852:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2201      	movs	r2, #1
 8009860:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2200      	movs	r2, #0
 8009868:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800986c:	2303      	movs	r3, #3
 800986e:	e0db      	b.n	8009a28 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009876:	b29b      	uxth	r3, r3
 8009878:	2b00      	cmp	r3, #0
 800987a:	f47f af69 	bne.w	8009750 <HAL_SPI_Receive+0x204>
 800987e:	e0c0      	b.n	8009a02 <HAL_SPI_Receive+0x4b6>
 8009880:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	695b      	ldr	r3, [r3, #20]
 800988a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	695b      	ldr	r3, [r3, #20]
 8009892:	f003 0301 	and.w	r3, r3, #1
 8009896:	2b01      	cmp	r3, #1
 8009898:	d117      	bne.n	80098ca <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098a6:	7812      	ldrb	r2, [r2, #0]
 80098a8:	b2d2      	uxtb	r2, r2
 80098aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098b0:	1c5a      	adds	r2, r3, #1
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80098bc:	b29b      	uxth	r3, r3
 80098be:	3b01      	subs	r3, #1
 80098c0:	b29a      	uxth	r2, r3
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80098c8:	e094      	b.n	80099f4 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	8bfa      	ldrh	r2, [r7, #30]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d946      	bls.n	8009966 <HAL_SPI_Receive+0x41a>
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d041      	beq.n	8009966 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098ee:	7812      	ldrb	r2, [r2, #0]
 80098f0:	b2d2      	uxtb	r2, r2
 80098f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098f8:	1c5a      	adds	r2, r3, #1
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800990a:	7812      	ldrb	r2, [r2, #0]
 800990c:	b2d2      	uxtb	r2, r2
 800990e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009914:	1c5a      	adds	r2, r3, #1
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009926:	7812      	ldrb	r2, [r2, #0]
 8009928:	b2d2      	uxtb	r2, r2
 800992a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009930:	1c5a      	adds	r2, r3, #1
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009942:	7812      	ldrb	r2, [r2, #0]
 8009944:	b2d2      	uxtb	r2, r2
 8009946:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800994c:	1c5a      	adds	r2, r3, #1
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009958:	b29b      	uxth	r3, r3
 800995a:	3b04      	subs	r3, #4
 800995c:	b29a      	uxth	r2, r3
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009964:	e046      	b.n	80099f4 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800996c:	b29b      	uxth	r3, r3
 800996e:	2b03      	cmp	r3, #3
 8009970:	d81c      	bhi.n	80099ac <HAL_SPI_Receive+0x460>
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8009978:	2b00      	cmp	r3, #0
 800997a:	d017      	beq.n	80099ac <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009988:	7812      	ldrb	r2, [r2, #0]
 800998a:	b2d2      	uxtb	r2, r2
 800998c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009992:	1c5a      	adds	r2, r3, #1
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800999e:	b29b      	uxth	r3, r3
 80099a0:	3b01      	subs	r3, #1
 80099a2:	b29a      	uxth	r2, r3
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80099aa:	e023      	b.n	80099f4 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80099ac:	f7f8 fe02 	bl	80025b4 <HAL_GetTick>
 80099b0:	4602      	mov	r2, r0
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	1ad3      	subs	r3, r2, r3
 80099b6:	683a      	ldr	r2, [r7, #0]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d803      	bhi.n	80099c4 <HAL_SPI_Receive+0x478>
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c2:	d102      	bne.n	80099ca <HAL_SPI_Receive+0x47e>
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d114      	bne.n	80099f4 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80099ca:	68f8      	ldr	r0, [r7, #12]
 80099cc:	f000 f830 	bl	8009a30 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099d6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2201      	movs	r2, #1
 80099e4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2200      	movs	r2, #0
 80099ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80099f0:	2303      	movs	r3, #3
 80099f2:	e019      	b.n	8009a28 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	f47f af41 	bne.w	8009884 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009a02:	68f8      	ldr	r0, [r7, #12]
 8009a04:	f000 f814 	bl	8009a30 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d001      	beq.n	8009a26 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8009a22:	2301      	movs	r3, #1
 8009a24:	e000      	b.n	8009a28 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8009a26:	2300      	movs	r3, #0
  }
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3720      	adds	r7, #32
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b085      	sub	sp, #20
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	695b      	ldr	r3, [r3, #20]
 8009a3e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	699a      	ldr	r2, [r3, #24]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f042 0208 	orr.w	r2, r2, #8
 8009a4e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	699a      	ldr	r2, [r3, #24]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f042 0210 	orr.w	r2, r2, #16
 8009a5e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f022 0201 	bic.w	r2, r2, #1
 8009a6e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	6919      	ldr	r1, [r3, #16]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	4b3c      	ldr	r3, [pc, #240]	@ (8009b6c <SPI_CloseTransfer+0x13c>)
 8009a7c:	400b      	ands	r3, r1
 8009a7e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	689a      	ldr	r2, [r3, #8]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009a8e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009a96:	b2db      	uxtb	r3, r3
 8009a98:	2b04      	cmp	r3, #4
 8009a9a:	d014      	beq.n	8009ac6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f003 0320 	and.w	r3, r3, #32
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d00f      	beq.n	8009ac6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009aac:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	699a      	ldr	r2, [r3, #24]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f042 0220 	orr.w	r2, r2, #32
 8009ac4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	2b03      	cmp	r3, #3
 8009ad0:	d014      	beq.n	8009afc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d00f      	beq.n	8009afc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ae2:	f043 0204 	orr.w	r2, r3, #4
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	699a      	ldr	r2, [r3, #24]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009afa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d00f      	beq.n	8009b26 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b0c:	f043 0201 	orr.w	r2, r3, #1
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	699a      	ldr	r2, [r3, #24]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009b24:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d00f      	beq.n	8009b50 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b36:	f043 0208 	orr.w	r2, r3, #8
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	699a      	ldr	r2, [r3, #24]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009b4e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8009b60:	bf00      	nop
 8009b62:	3714      	adds	r7, #20
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr
 8009b6c:	fffffc90 	.word	0xfffffc90

08009b70 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	60f8      	str	r0, [r7, #12]
 8009b78:	60b9      	str	r1, [r7, #8]
 8009b7a:	603b      	str	r3, [r7, #0]
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009b80:	e010      	b.n	8009ba4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b82:	f7f8 fd17 	bl	80025b4 <HAL_GetTick>
 8009b86:	4602      	mov	r2, r0
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	1ad3      	subs	r3, r2, r3
 8009b8c:	683a      	ldr	r2, [r7, #0]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d803      	bhi.n	8009b9a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b98:	d102      	bne.n	8009ba0 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d101      	bne.n	8009ba4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009ba0:	2303      	movs	r3, #3
 8009ba2:	e00f      	b.n	8009bc4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	695a      	ldr	r2, [r3, #20]
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	4013      	ands	r3, r2
 8009bae:	68ba      	ldr	r2, [r7, #8]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	bf0c      	ite	eq
 8009bb4:	2301      	moveq	r3, #1
 8009bb6:	2300      	movne	r3, #0
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	461a      	mov	r2, r3
 8009bbc:	79fb      	ldrb	r3, [r7, #7]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d0df      	beq.n	8009b82 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009bc2:	2300      	movs	r3, #0
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3710      	adds	r7, #16
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b085      	sub	sp, #20
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bd8:	095b      	lsrs	r3, r3, #5
 8009bda:	3301      	adds	r3, #1
 8009bdc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	68db      	ldr	r3, [r3, #12]
 8009be2:	3301      	adds	r3, #1
 8009be4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	3307      	adds	r3, #7
 8009bea:	08db      	lsrs	r3, r3, #3
 8009bec:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	68fa      	ldr	r2, [r7, #12]
 8009bf2:	fb02 f303 	mul.w	r3, r2, r3
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3714      	adds	r7, #20
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr

08009c02 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b082      	sub	sp, #8
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d101      	bne.n	8009c14 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c10:	2301      	movs	r3, #1
 8009c12:	e042      	b.n	8009c9a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d106      	bne.n	8009c2c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f7f7 fec8 	bl	80019bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2224      	movs	r2, #36	@ 0x24
 8009c30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f022 0201 	bic.w	r2, r2, #1
 8009c42:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d002      	beq.n	8009c52 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 ffeb 	bl	800ac28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f97c 	bl	8009f50 <UART_SetConfig>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d101      	bne.n	8009c62 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e01b      	b.n	8009c9a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	685a      	ldr	r2, [r3, #4]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009c70:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	689a      	ldr	r2, [r3, #8]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009c80:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	681a      	ldr	r2, [r3, #0]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f042 0201 	orr.w	r2, r2, #1
 8009c90:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f001 f86a 	bl	800ad6c <UART_CheckIdleState>
 8009c98:	4603      	mov	r3, r0
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3708      	adds	r7, #8
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}

08009ca2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ca2:	b580      	push	{r7, lr}
 8009ca4:	b08a      	sub	sp, #40	@ 0x28
 8009ca6:	af02      	add	r7, sp, #8
 8009ca8:	60f8      	str	r0, [r7, #12]
 8009caa:	60b9      	str	r1, [r7, #8]
 8009cac:	603b      	str	r3, [r7, #0]
 8009cae:	4613      	mov	r3, r2
 8009cb0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cb8:	2b20      	cmp	r3, #32
 8009cba:	d17b      	bne.n	8009db4 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d002      	beq.n	8009cc8 <HAL_UART_Transmit+0x26>
 8009cc2:	88fb      	ldrh	r3, [r7, #6]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d101      	bne.n	8009ccc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	e074      	b.n	8009db6 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2221      	movs	r2, #33	@ 0x21
 8009cd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009cdc:	f7f8 fc6a 	bl	80025b4 <HAL_GetTick>
 8009ce0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	88fa      	ldrh	r2, [r7, #6]
 8009ce6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	88fa      	ldrh	r2, [r7, #6]
 8009cee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cfa:	d108      	bne.n	8009d0e <HAL_UART_Transmit+0x6c>
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	691b      	ldr	r3, [r3, #16]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d104      	bne.n	8009d0e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009d04:	2300      	movs	r3, #0
 8009d06:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	61bb      	str	r3, [r7, #24]
 8009d0c:	e003      	b.n	8009d16 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d12:	2300      	movs	r3, #0
 8009d14:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009d16:	e030      	b.n	8009d7a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	9300      	str	r3, [sp, #0]
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	2180      	movs	r1, #128	@ 0x80
 8009d22:	68f8      	ldr	r0, [r7, #12]
 8009d24:	f001 f8cc 	bl	800aec0 <UART_WaitOnFlagUntilTimeout>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d005      	beq.n	8009d3a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2220      	movs	r2, #32
 8009d32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009d36:	2303      	movs	r3, #3
 8009d38:	e03d      	b.n	8009db6 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d10b      	bne.n	8009d58 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d40:	69bb      	ldr	r3, [r7, #24]
 8009d42:	881b      	ldrh	r3, [r3, #0]
 8009d44:	461a      	mov	r2, r3
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d4e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009d50:	69bb      	ldr	r3, [r7, #24]
 8009d52:	3302      	adds	r3, #2
 8009d54:	61bb      	str	r3, [r7, #24]
 8009d56:	e007      	b.n	8009d68 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d58:	69fb      	ldr	r3, [r7, #28]
 8009d5a:	781a      	ldrb	r2, [r3, #0]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009d62:	69fb      	ldr	r3, [r7, #28]
 8009d64:	3301      	adds	r3, #1
 8009d66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	3b01      	subs	r3, #1
 8009d72:	b29a      	uxth	r2, r3
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d1c8      	bne.n	8009d18 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	9300      	str	r3, [sp, #0]
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	2140      	movs	r1, #64	@ 0x40
 8009d90:	68f8      	ldr	r0, [r7, #12]
 8009d92:	f001 f895 	bl	800aec0 <UART_WaitOnFlagUntilTimeout>
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d005      	beq.n	8009da8 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2220      	movs	r2, #32
 8009da0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009da4:	2303      	movs	r3, #3
 8009da6:	e006      	b.n	8009db6 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2220      	movs	r2, #32
 8009dac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009db0:	2300      	movs	r3, #0
 8009db2:	e000      	b.n	8009db6 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009db4:	2302      	movs	r3, #2
  }
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3720      	adds	r7, #32
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}

08009dbe <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009dbe:	b580      	push	{r7, lr}
 8009dc0:	b08a      	sub	sp, #40	@ 0x28
 8009dc2:	af02      	add	r7, sp, #8
 8009dc4:	60f8      	str	r0, [r7, #12]
 8009dc6:	60b9      	str	r1, [r7, #8]
 8009dc8:	603b      	str	r3, [r7, #0]
 8009dca:	4613      	mov	r3, r2
 8009dcc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009dd4:	2b20      	cmp	r3, #32
 8009dd6:	f040 80b5 	bne.w	8009f44 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d002      	beq.n	8009de6 <HAL_UART_Receive+0x28>
 8009de0:	88fb      	ldrh	r3, [r7, #6]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d101      	bne.n	8009dea <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8009de6:	2301      	movs	r3, #1
 8009de8:	e0ad      	b.n	8009f46 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2200      	movs	r2, #0
 8009dee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2222      	movs	r2, #34	@ 0x22
 8009df6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009e00:	f7f8 fbd8 	bl	80025b4 <HAL_GetTick>
 8009e04:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	88fa      	ldrh	r2, [r7, #6]
 8009e0a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	88fa      	ldrh	r2, [r7, #6]
 8009e12:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e1e:	d10e      	bne.n	8009e3e <HAL_UART_Receive+0x80>
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	691b      	ldr	r3, [r3, #16]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d105      	bne.n	8009e34 <HAL_UART_Receive+0x76>
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009e2e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009e32:	e02d      	b.n	8009e90 <HAL_UART_Receive+0xd2>
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	22ff      	movs	r2, #255	@ 0xff
 8009e38:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009e3c:	e028      	b.n	8009e90 <HAL_UART_Receive+0xd2>
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	689b      	ldr	r3, [r3, #8]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d10d      	bne.n	8009e62 <HAL_UART_Receive+0xa4>
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	691b      	ldr	r3, [r3, #16]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d104      	bne.n	8009e58 <HAL_UART_Receive+0x9a>
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	22ff      	movs	r2, #255	@ 0xff
 8009e52:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009e56:	e01b      	b.n	8009e90 <HAL_UART_Receive+0xd2>
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	227f      	movs	r2, #127	@ 0x7f
 8009e5c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009e60:	e016      	b.n	8009e90 <HAL_UART_Receive+0xd2>
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e6a:	d10d      	bne.n	8009e88 <HAL_UART_Receive+0xca>
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	691b      	ldr	r3, [r3, #16]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d104      	bne.n	8009e7e <HAL_UART_Receive+0xc0>
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	227f      	movs	r2, #127	@ 0x7f
 8009e78:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009e7c:	e008      	b.n	8009e90 <HAL_UART_Receive+0xd2>
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	223f      	movs	r2, #63	@ 0x3f
 8009e82:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009e86:	e003      	b.n	8009e90 <HAL_UART_Receive+0xd2>
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009e96:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ea0:	d108      	bne.n	8009eb4 <HAL_UART_Receive+0xf6>
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	691b      	ldr	r3, [r3, #16]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d104      	bne.n	8009eb4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	61bb      	str	r3, [r7, #24]
 8009eb2:	e003      	b.n	8009ebc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009ebc:	e036      	b.n	8009f2c <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	9300      	str	r3, [sp, #0]
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	2120      	movs	r1, #32
 8009ec8:	68f8      	ldr	r0, [r7, #12]
 8009eca:	f000 fff9 	bl	800aec0 <UART_WaitOnFlagUntilTimeout>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d005      	beq.n	8009ee0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2220      	movs	r2, #32
 8009ed8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8009edc:	2303      	movs	r3, #3
 8009ede:	e032      	b.n	8009f46 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8009ee0:	69fb      	ldr	r3, [r7, #28]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d10c      	bne.n	8009f00 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eec:	b29a      	uxth	r2, r3
 8009eee:	8a7b      	ldrh	r3, [r7, #18]
 8009ef0:	4013      	ands	r3, r2
 8009ef2:	b29a      	uxth	r2, r3
 8009ef4:	69bb      	ldr	r3, [r7, #24]
 8009ef6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009ef8:	69bb      	ldr	r3, [r7, #24]
 8009efa:	3302      	adds	r3, #2
 8009efc:	61bb      	str	r3, [r7, #24]
 8009efe:	e00c      	b.n	8009f1a <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f06:	b2da      	uxtb	r2, r3
 8009f08:	8a7b      	ldrh	r3, [r7, #18]
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	4013      	ands	r3, r2
 8009f0e:	b2da      	uxtb	r2, r3
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009f14:	69fb      	ldr	r3, [r7, #28]
 8009f16:	3301      	adds	r3, #1
 8009f18:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	3b01      	subs	r3, #1
 8009f24:	b29a      	uxth	r2, r3
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d1c2      	bne.n	8009ebe <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2220      	movs	r2, #32
 8009f3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8009f40:	2300      	movs	r3, #0
 8009f42:	e000      	b.n	8009f46 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8009f44:	2302      	movs	r3, #2
  }
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3720      	adds	r7, #32
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
	...

08009f50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f54:	b092      	sub	sp, #72	@ 0x48
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	689a      	ldr	r2, [r3, #8]
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	691b      	ldr	r3, [r3, #16]
 8009f68:	431a      	orrs	r2, r3
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	695b      	ldr	r3, [r3, #20]
 8009f6e:	431a      	orrs	r2, r3
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	69db      	ldr	r3, [r3, #28]
 8009f74:	4313      	orrs	r3, r2
 8009f76:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	681a      	ldr	r2, [r3, #0]
 8009f7e:	4bbe      	ldr	r3, [pc, #760]	@ (800a278 <UART_SetConfig+0x328>)
 8009f80:	4013      	ands	r3, r2
 8009f82:	697a      	ldr	r2, [r7, #20]
 8009f84:	6812      	ldr	r2, [r2, #0]
 8009f86:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009f88:	430b      	orrs	r3, r1
 8009f8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	68da      	ldr	r2, [r3, #12]
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	430a      	orrs	r2, r1
 8009fa0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	699b      	ldr	r3, [r3, #24]
 8009fa6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4ab3      	ldr	r2, [pc, #716]	@ (800a27c <UART_SetConfig+0x32c>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d004      	beq.n	8009fbc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	6a1b      	ldr	r3, [r3, #32]
 8009fb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	689a      	ldr	r2, [r3, #8]
 8009fc2:	4baf      	ldr	r3, [pc, #700]	@ (800a280 <UART_SetConfig+0x330>)
 8009fc4:	4013      	ands	r3, r2
 8009fc6:	697a      	ldr	r2, [r7, #20]
 8009fc8:	6812      	ldr	r2, [r2, #0]
 8009fca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009fcc:	430b      	orrs	r3, r1
 8009fce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fd6:	f023 010f 	bic.w	r1, r3, #15
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	430a      	orrs	r2, r1
 8009fe4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4aa6      	ldr	r2, [pc, #664]	@ (800a284 <UART_SetConfig+0x334>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d177      	bne.n	800a0e0 <UART_SetConfig+0x190>
 8009ff0:	4ba5      	ldr	r3, [pc, #660]	@ (800a288 <UART_SetConfig+0x338>)
 8009ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ff4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009ff8:	2b28      	cmp	r3, #40	@ 0x28
 8009ffa:	d86d      	bhi.n	800a0d8 <UART_SetConfig+0x188>
 8009ffc:	a201      	add	r2, pc, #4	@ (adr r2, 800a004 <UART_SetConfig+0xb4>)
 8009ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a002:	bf00      	nop
 800a004:	0800a0a9 	.word	0x0800a0a9
 800a008:	0800a0d9 	.word	0x0800a0d9
 800a00c:	0800a0d9 	.word	0x0800a0d9
 800a010:	0800a0d9 	.word	0x0800a0d9
 800a014:	0800a0d9 	.word	0x0800a0d9
 800a018:	0800a0d9 	.word	0x0800a0d9
 800a01c:	0800a0d9 	.word	0x0800a0d9
 800a020:	0800a0d9 	.word	0x0800a0d9
 800a024:	0800a0b1 	.word	0x0800a0b1
 800a028:	0800a0d9 	.word	0x0800a0d9
 800a02c:	0800a0d9 	.word	0x0800a0d9
 800a030:	0800a0d9 	.word	0x0800a0d9
 800a034:	0800a0d9 	.word	0x0800a0d9
 800a038:	0800a0d9 	.word	0x0800a0d9
 800a03c:	0800a0d9 	.word	0x0800a0d9
 800a040:	0800a0d9 	.word	0x0800a0d9
 800a044:	0800a0b9 	.word	0x0800a0b9
 800a048:	0800a0d9 	.word	0x0800a0d9
 800a04c:	0800a0d9 	.word	0x0800a0d9
 800a050:	0800a0d9 	.word	0x0800a0d9
 800a054:	0800a0d9 	.word	0x0800a0d9
 800a058:	0800a0d9 	.word	0x0800a0d9
 800a05c:	0800a0d9 	.word	0x0800a0d9
 800a060:	0800a0d9 	.word	0x0800a0d9
 800a064:	0800a0c1 	.word	0x0800a0c1
 800a068:	0800a0d9 	.word	0x0800a0d9
 800a06c:	0800a0d9 	.word	0x0800a0d9
 800a070:	0800a0d9 	.word	0x0800a0d9
 800a074:	0800a0d9 	.word	0x0800a0d9
 800a078:	0800a0d9 	.word	0x0800a0d9
 800a07c:	0800a0d9 	.word	0x0800a0d9
 800a080:	0800a0d9 	.word	0x0800a0d9
 800a084:	0800a0c9 	.word	0x0800a0c9
 800a088:	0800a0d9 	.word	0x0800a0d9
 800a08c:	0800a0d9 	.word	0x0800a0d9
 800a090:	0800a0d9 	.word	0x0800a0d9
 800a094:	0800a0d9 	.word	0x0800a0d9
 800a098:	0800a0d9 	.word	0x0800a0d9
 800a09c:	0800a0d9 	.word	0x0800a0d9
 800a0a0:	0800a0d9 	.word	0x0800a0d9
 800a0a4:	0800a0d1 	.word	0x0800a0d1
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ae:	e326      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a0b0:	2304      	movs	r3, #4
 800a0b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0b6:	e322      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a0b8:	2308      	movs	r3, #8
 800a0ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0be:	e31e      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a0c0:	2310      	movs	r3, #16
 800a0c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0c6:	e31a      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a0c8:	2320      	movs	r3, #32
 800a0ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ce:	e316      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a0d0:	2340      	movs	r3, #64	@ 0x40
 800a0d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0d6:	e312      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a0d8:	2380      	movs	r3, #128	@ 0x80
 800a0da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0de:	e30e      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a69      	ldr	r2, [pc, #420]	@ (800a28c <UART_SetConfig+0x33c>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d130      	bne.n	800a14c <UART_SetConfig+0x1fc>
 800a0ea:	4b67      	ldr	r3, [pc, #412]	@ (800a288 <UART_SetConfig+0x338>)
 800a0ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0ee:	f003 0307 	and.w	r3, r3, #7
 800a0f2:	2b05      	cmp	r3, #5
 800a0f4:	d826      	bhi.n	800a144 <UART_SetConfig+0x1f4>
 800a0f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a0fc <UART_SetConfig+0x1ac>)
 800a0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0fc:	0800a115 	.word	0x0800a115
 800a100:	0800a11d 	.word	0x0800a11d
 800a104:	0800a125 	.word	0x0800a125
 800a108:	0800a12d 	.word	0x0800a12d
 800a10c:	0800a135 	.word	0x0800a135
 800a110:	0800a13d 	.word	0x0800a13d
 800a114:	2300      	movs	r3, #0
 800a116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a11a:	e2f0      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a11c:	2304      	movs	r3, #4
 800a11e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a122:	e2ec      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a124:	2308      	movs	r3, #8
 800a126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a12a:	e2e8      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a12c:	2310      	movs	r3, #16
 800a12e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a132:	e2e4      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a134:	2320      	movs	r3, #32
 800a136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a13a:	e2e0      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a13c:	2340      	movs	r3, #64	@ 0x40
 800a13e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a142:	e2dc      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a144:	2380      	movs	r3, #128	@ 0x80
 800a146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a14a:	e2d8      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a4f      	ldr	r2, [pc, #316]	@ (800a290 <UART_SetConfig+0x340>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d130      	bne.n	800a1b8 <UART_SetConfig+0x268>
 800a156:	4b4c      	ldr	r3, [pc, #304]	@ (800a288 <UART_SetConfig+0x338>)
 800a158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a15a:	f003 0307 	and.w	r3, r3, #7
 800a15e:	2b05      	cmp	r3, #5
 800a160:	d826      	bhi.n	800a1b0 <UART_SetConfig+0x260>
 800a162:	a201      	add	r2, pc, #4	@ (adr r2, 800a168 <UART_SetConfig+0x218>)
 800a164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a168:	0800a181 	.word	0x0800a181
 800a16c:	0800a189 	.word	0x0800a189
 800a170:	0800a191 	.word	0x0800a191
 800a174:	0800a199 	.word	0x0800a199
 800a178:	0800a1a1 	.word	0x0800a1a1
 800a17c:	0800a1a9 	.word	0x0800a1a9
 800a180:	2300      	movs	r3, #0
 800a182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a186:	e2ba      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a188:	2304      	movs	r3, #4
 800a18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a18e:	e2b6      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a190:	2308      	movs	r3, #8
 800a192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a196:	e2b2      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a198:	2310      	movs	r3, #16
 800a19a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a19e:	e2ae      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a1a0:	2320      	movs	r3, #32
 800a1a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1a6:	e2aa      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a1a8:	2340      	movs	r3, #64	@ 0x40
 800a1aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ae:	e2a6      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a1b0:	2380      	movs	r3, #128	@ 0x80
 800a1b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1b6:	e2a2      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a35      	ldr	r2, [pc, #212]	@ (800a294 <UART_SetConfig+0x344>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d130      	bne.n	800a224 <UART_SetConfig+0x2d4>
 800a1c2:	4b31      	ldr	r3, [pc, #196]	@ (800a288 <UART_SetConfig+0x338>)
 800a1c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1c6:	f003 0307 	and.w	r3, r3, #7
 800a1ca:	2b05      	cmp	r3, #5
 800a1cc:	d826      	bhi.n	800a21c <UART_SetConfig+0x2cc>
 800a1ce:	a201      	add	r2, pc, #4	@ (adr r2, 800a1d4 <UART_SetConfig+0x284>)
 800a1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d4:	0800a1ed 	.word	0x0800a1ed
 800a1d8:	0800a1f5 	.word	0x0800a1f5
 800a1dc:	0800a1fd 	.word	0x0800a1fd
 800a1e0:	0800a205 	.word	0x0800a205
 800a1e4:	0800a20d 	.word	0x0800a20d
 800a1e8:	0800a215 	.word	0x0800a215
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1f2:	e284      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a1f4:	2304      	movs	r3, #4
 800a1f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1fa:	e280      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a1fc:	2308      	movs	r3, #8
 800a1fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a202:	e27c      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a204:	2310      	movs	r3, #16
 800a206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a20a:	e278      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a20c:	2320      	movs	r3, #32
 800a20e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a212:	e274      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a214:	2340      	movs	r3, #64	@ 0x40
 800a216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a21a:	e270      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a21c:	2380      	movs	r3, #128	@ 0x80
 800a21e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a222:	e26c      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a1b      	ldr	r2, [pc, #108]	@ (800a298 <UART_SetConfig+0x348>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d142      	bne.n	800a2b4 <UART_SetConfig+0x364>
 800a22e:	4b16      	ldr	r3, [pc, #88]	@ (800a288 <UART_SetConfig+0x338>)
 800a230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a232:	f003 0307 	and.w	r3, r3, #7
 800a236:	2b05      	cmp	r3, #5
 800a238:	d838      	bhi.n	800a2ac <UART_SetConfig+0x35c>
 800a23a:	a201      	add	r2, pc, #4	@ (adr r2, 800a240 <UART_SetConfig+0x2f0>)
 800a23c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a240:	0800a259 	.word	0x0800a259
 800a244:	0800a261 	.word	0x0800a261
 800a248:	0800a269 	.word	0x0800a269
 800a24c:	0800a271 	.word	0x0800a271
 800a250:	0800a29d 	.word	0x0800a29d
 800a254:	0800a2a5 	.word	0x0800a2a5
 800a258:	2300      	movs	r3, #0
 800a25a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a25e:	e24e      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a260:	2304      	movs	r3, #4
 800a262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a266:	e24a      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a268:	2308      	movs	r3, #8
 800a26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a26e:	e246      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a270:	2310      	movs	r3, #16
 800a272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a276:	e242      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a278:	cfff69f3 	.word	0xcfff69f3
 800a27c:	58000c00 	.word	0x58000c00
 800a280:	11fff4ff 	.word	0x11fff4ff
 800a284:	40011000 	.word	0x40011000
 800a288:	58024400 	.word	0x58024400
 800a28c:	40004400 	.word	0x40004400
 800a290:	40004800 	.word	0x40004800
 800a294:	40004c00 	.word	0x40004c00
 800a298:	40005000 	.word	0x40005000
 800a29c:	2320      	movs	r3, #32
 800a29e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2a2:	e22c      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a2a4:	2340      	movs	r3, #64	@ 0x40
 800a2a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2aa:	e228      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a2ac:	2380      	movs	r3, #128	@ 0x80
 800a2ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2b2:	e224      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4ab1      	ldr	r2, [pc, #708]	@ (800a580 <UART_SetConfig+0x630>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d176      	bne.n	800a3ac <UART_SetConfig+0x45c>
 800a2be:	4bb1      	ldr	r3, [pc, #708]	@ (800a584 <UART_SetConfig+0x634>)
 800a2c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a2c6:	2b28      	cmp	r3, #40	@ 0x28
 800a2c8:	d86c      	bhi.n	800a3a4 <UART_SetConfig+0x454>
 800a2ca:	a201      	add	r2, pc, #4	@ (adr r2, 800a2d0 <UART_SetConfig+0x380>)
 800a2cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d0:	0800a375 	.word	0x0800a375
 800a2d4:	0800a3a5 	.word	0x0800a3a5
 800a2d8:	0800a3a5 	.word	0x0800a3a5
 800a2dc:	0800a3a5 	.word	0x0800a3a5
 800a2e0:	0800a3a5 	.word	0x0800a3a5
 800a2e4:	0800a3a5 	.word	0x0800a3a5
 800a2e8:	0800a3a5 	.word	0x0800a3a5
 800a2ec:	0800a3a5 	.word	0x0800a3a5
 800a2f0:	0800a37d 	.word	0x0800a37d
 800a2f4:	0800a3a5 	.word	0x0800a3a5
 800a2f8:	0800a3a5 	.word	0x0800a3a5
 800a2fc:	0800a3a5 	.word	0x0800a3a5
 800a300:	0800a3a5 	.word	0x0800a3a5
 800a304:	0800a3a5 	.word	0x0800a3a5
 800a308:	0800a3a5 	.word	0x0800a3a5
 800a30c:	0800a3a5 	.word	0x0800a3a5
 800a310:	0800a385 	.word	0x0800a385
 800a314:	0800a3a5 	.word	0x0800a3a5
 800a318:	0800a3a5 	.word	0x0800a3a5
 800a31c:	0800a3a5 	.word	0x0800a3a5
 800a320:	0800a3a5 	.word	0x0800a3a5
 800a324:	0800a3a5 	.word	0x0800a3a5
 800a328:	0800a3a5 	.word	0x0800a3a5
 800a32c:	0800a3a5 	.word	0x0800a3a5
 800a330:	0800a38d 	.word	0x0800a38d
 800a334:	0800a3a5 	.word	0x0800a3a5
 800a338:	0800a3a5 	.word	0x0800a3a5
 800a33c:	0800a3a5 	.word	0x0800a3a5
 800a340:	0800a3a5 	.word	0x0800a3a5
 800a344:	0800a3a5 	.word	0x0800a3a5
 800a348:	0800a3a5 	.word	0x0800a3a5
 800a34c:	0800a3a5 	.word	0x0800a3a5
 800a350:	0800a395 	.word	0x0800a395
 800a354:	0800a3a5 	.word	0x0800a3a5
 800a358:	0800a3a5 	.word	0x0800a3a5
 800a35c:	0800a3a5 	.word	0x0800a3a5
 800a360:	0800a3a5 	.word	0x0800a3a5
 800a364:	0800a3a5 	.word	0x0800a3a5
 800a368:	0800a3a5 	.word	0x0800a3a5
 800a36c:	0800a3a5 	.word	0x0800a3a5
 800a370:	0800a39d 	.word	0x0800a39d
 800a374:	2301      	movs	r3, #1
 800a376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a37a:	e1c0      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a37c:	2304      	movs	r3, #4
 800a37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a382:	e1bc      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a384:	2308      	movs	r3, #8
 800a386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a38a:	e1b8      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a38c:	2310      	movs	r3, #16
 800a38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a392:	e1b4      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a394:	2320      	movs	r3, #32
 800a396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a39a:	e1b0      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a39c:	2340      	movs	r3, #64	@ 0x40
 800a39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3a2:	e1ac      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a3a4:	2380      	movs	r3, #128	@ 0x80
 800a3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3aa:	e1a8      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a75      	ldr	r2, [pc, #468]	@ (800a588 <UART_SetConfig+0x638>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d130      	bne.n	800a418 <UART_SetConfig+0x4c8>
 800a3b6:	4b73      	ldr	r3, [pc, #460]	@ (800a584 <UART_SetConfig+0x634>)
 800a3b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3ba:	f003 0307 	and.w	r3, r3, #7
 800a3be:	2b05      	cmp	r3, #5
 800a3c0:	d826      	bhi.n	800a410 <UART_SetConfig+0x4c0>
 800a3c2:	a201      	add	r2, pc, #4	@ (adr r2, 800a3c8 <UART_SetConfig+0x478>)
 800a3c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c8:	0800a3e1 	.word	0x0800a3e1
 800a3cc:	0800a3e9 	.word	0x0800a3e9
 800a3d0:	0800a3f1 	.word	0x0800a3f1
 800a3d4:	0800a3f9 	.word	0x0800a3f9
 800a3d8:	0800a401 	.word	0x0800a401
 800a3dc:	0800a409 	.word	0x0800a409
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3e6:	e18a      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a3e8:	2304      	movs	r3, #4
 800a3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ee:	e186      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a3f0:	2308      	movs	r3, #8
 800a3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3f6:	e182      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a3f8:	2310      	movs	r3, #16
 800a3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3fe:	e17e      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a400:	2320      	movs	r3, #32
 800a402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a406:	e17a      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a408:	2340      	movs	r3, #64	@ 0x40
 800a40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a40e:	e176      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a410:	2380      	movs	r3, #128	@ 0x80
 800a412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a416:	e172      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a5b      	ldr	r2, [pc, #364]	@ (800a58c <UART_SetConfig+0x63c>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d130      	bne.n	800a484 <UART_SetConfig+0x534>
 800a422:	4b58      	ldr	r3, [pc, #352]	@ (800a584 <UART_SetConfig+0x634>)
 800a424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a426:	f003 0307 	and.w	r3, r3, #7
 800a42a:	2b05      	cmp	r3, #5
 800a42c:	d826      	bhi.n	800a47c <UART_SetConfig+0x52c>
 800a42e:	a201      	add	r2, pc, #4	@ (adr r2, 800a434 <UART_SetConfig+0x4e4>)
 800a430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a434:	0800a44d 	.word	0x0800a44d
 800a438:	0800a455 	.word	0x0800a455
 800a43c:	0800a45d 	.word	0x0800a45d
 800a440:	0800a465 	.word	0x0800a465
 800a444:	0800a46d 	.word	0x0800a46d
 800a448:	0800a475 	.word	0x0800a475
 800a44c:	2300      	movs	r3, #0
 800a44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a452:	e154      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a454:	2304      	movs	r3, #4
 800a456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a45a:	e150      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a45c:	2308      	movs	r3, #8
 800a45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a462:	e14c      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a464:	2310      	movs	r3, #16
 800a466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a46a:	e148      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a46c:	2320      	movs	r3, #32
 800a46e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a472:	e144      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a474:	2340      	movs	r3, #64	@ 0x40
 800a476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a47a:	e140      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a47c:	2380      	movs	r3, #128	@ 0x80
 800a47e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a482:	e13c      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a41      	ldr	r2, [pc, #260]	@ (800a590 <UART_SetConfig+0x640>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	f040 8082 	bne.w	800a594 <UART_SetConfig+0x644>
 800a490:	4b3c      	ldr	r3, [pc, #240]	@ (800a584 <UART_SetConfig+0x634>)
 800a492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a494:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a498:	2b28      	cmp	r3, #40	@ 0x28
 800a49a:	d86d      	bhi.n	800a578 <UART_SetConfig+0x628>
 800a49c:	a201      	add	r2, pc, #4	@ (adr r2, 800a4a4 <UART_SetConfig+0x554>)
 800a49e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a2:	bf00      	nop
 800a4a4:	0800a549 	.word	0x0800a549
 800a4a8:	0800a579 	.word	0x0800a579
 800a4ac:	0800a579 	.word	0x0800a579
 800a4b0:	0800a579 	.word	0x0800a579
 800a4b4:	0800a579 	.word	0x0800a579
 800a4b8:	0800a579 	.word	0x0800a579
 800a4bc:	0800a579 	.word	0x0800a579
 800a4c0:	0800a579 	.word	0x0800a579
 800a4c4:	0800a551 	.word	0x0800a551
 800a4c8:	0800a579 	.word	0x0800a579
 800a4cc:	0800a579 	.word	0x0800a579
 800a4d0:	0800a579 	.word	0x0800a579
 800a4d4:	0800a579 	.word	0x0800a579
 800a4d8:	0800a579 	.word	0x0800a579
 800a4dc:	0800a579 	.word	0x0800a579
 800a4e0:	0800a579 	.word	0x0800a579
 800a4e4:	0800a559 	.word	0x0800a559
 800a4e8:	0800a579 	.word	0x0800a579
 800a4ec:	0800a579 	.word	0x0800a579
 800a4f0:	0800a579 	.word	0x0800a579
 800a4f4:	0800a579 	.word	0x0800a579
 800a4f8:	0800a579 	.word	0x0800a579
 800a4fc:	0800a579 	.word	0x0800a579
 800a500:	0800a579 	.word	0x0800a579
 800a504:	0800a561 	.word	0x0800a561
 800a508:	0800a579 	.word	0x0800a579
 800a50c:	0800a579 	.word	0x0800a579
 800a510:	0800a579 	.word	0x0800a579
 800a514:	0800a579 	.word	0x0800a579
 800a518:	0800a579 	.word	0x0800a579
 800a51c:	0800a579 	.word	0x0800a579
 800a520:	0800a579 	.word	0x0800a579
 800a524:	0800a569 	.word	0x0800a569
 800a528:	0800a579 	.word	0x0800a579
 800a52c:	0800a579 	.word	0x0800a579
 800a530:	0800a579 	.word	0x0800a579
 800a534:	0800a579 	.word	0x0800a579
 800a538:	0800a579 	.word	0x0800a579
 800a53c:	0800a579 	.word	0x0800a579
 800a540:	0800a579 	.word	0x0800a579
 800a544:	0800a571 	.word	0x0800a571
 800a548:	2301      	movs	r3, #1
 800a54a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a54e:	e0d6      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a550:	2304      	movs	r3, #4
 800a552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a556:	e0d2      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a558:	2308      	movs	r3, #8
 800a55a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a55e:	e0ce      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a560:	2310      	movs	r3, #16
 800a562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a566:	e0ca      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a568:	2320      	movs	r3, #32
 800a56a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a56e:	e0c6      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a570:	2340      	movs	r3, #64	@ 0x40
 800a572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a576:	e0c2      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a578:	2380      	movs	r3, #128	@ 0x80
 800a57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a57e:	e0be      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a580:	40011400 	.word	0x40011400
 800a584:	58024400 	.word	0x58024400
 800a588:	40007800 	.word	0x40007800
 800a58c:	40007c00 	.word	0x40007c00
 800a590:	40011800 	.word	0x40011800
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4aad      	ldr	r2, [pc, #692]	@ (800a850 <UART_SetConfig+0x900>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d176      	bne.n	800a68c <UART_SetConfig+0x73c>
 800a59e:	4bad      	ldr	r3, [pc, #692]	@ (800a854 <UART_SetConfig+0x904>)
 800a5a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a5a6:	2b28      	cmp	r3, #40	@ 0x28
 800a5a8:	d86c      	bhi.n	800a684 <UART_SetConfig+0x734>
 800a5aa:	a201      	add	r2, pc, #4	@ (adr r2, 800a5b0 <UART_SetConfig+0x660>)
 800a5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b0:	0800a655 	.word	0x0800a655
 800a5b4:	0800a685 	.word	0x0800a685
 800a5b8:	0800a685 	.word	0x0800a685
 800a5bc:	0800a685 	.word	0x0800a685
 800a5c0:	0800a685 	.word	0x0800a685
 800a5c4:	0800a685 	.word	0x0800a685
 800a5c8:	0800a685 	.word	0x0800a685
 800a5cc:	0800a685 	.word	0x0800a685
 800a5d0:	0800a65d 	.word	0x0800a65d
 800a5d4:	0800a685 	.word	0x0800a685
 800a5d8:	0800a685 	.word	0x0800a685
 800a5dc:	0800a685 	.word	0x0800a685
 800a5e0:	0800a685 	.word	0x0800a685
 800a5e4:	0800a685 	.word	0x0800a685
 800a5e8:	0800a685 	.word	0x0800a685
 800a5ec:	0800a685 	.word	0x0800a685
 800a5f0:	0800a665 	.word	0x0800a665
 800a5f4:	0800a685 	.word	0x0800a685
 800a5f8:	0800a685 	.word	0x0800a685
 800a5fc:	0800a685 	.word	0x0800a685
 800a600:	0800a685 	.word	0x0800a685
 800a604:	0800a685 	.word	0x0800a685
 800a608:	0800a685 	.word	0x0800a685
 800a60c:	0800a685 	.word	0x0800a685
 800a610:	0800a66d 	.word	0x0800a66d
 800a614:	0800a685 	.word	0x0800a685
 800a618:	0800a685 	.word	0x0800a685
 800a61c:	0800a685 	.word	0x0800a685
 800a620:	0800a685 	.word	0x0800a685
 800a624:	0800a685 	.word	0x0800a685
 800a628:	0800a685 	.word	0x0800a685
 800a62c:	0800a685 	.word	0x0800a685
 800a630:	0800a675 	.word	0x0800a675
 800a634:	0800a685 	.word	0x0800a685
 800a638:	0800a685 	.word	0x0800a685
 800a63c:	0800a685 	.word	0x0800a685
 800a640:	0800a685 	.word	0x0800a685
 800a644:	0800a685 	.word	0x0800a685
 800a648:	0800a685 	.word	0x0800a685
 800a64c:	0800a685 	.word	0x0800a685
 800a650:	0800a67d 	.word	0x0800a67d
 800a654:	2301      	movs	r3, #1
 800a656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a65a:	e050      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a65c:	2304      	movs	r3, #4
 800a65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a662:	e04c      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a664:	2308      	movs	r3, #8
 800a666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a66a:	e048      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a66c:	2310      	movs	r3, #16
 800a66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a672:	e044      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a674:	2320      	movs	r3, #32
 800a676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a67a:	e040      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a67c:	2340      	movs	r3, #64	@ 0x40
 800a67e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a682:	e03c      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a684:	2380      	movs	r3, #128	@ 0x80
 800a686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a68a:	e038      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a71      	ldr	r2, [pc, #452]	@ (800a858 <UART_SetConfig+0x908>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d130      	bne.n	800a6f8 <UART_SetConfig+0x7a8>
 800a696:	4b6f      	ldr	r3, [pc, #444]	@ (800a854 <UART_SetConfig+0x904>)
 800a698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a69a:	f003 0307 	and.w	r3, r3, #7
 800a69e:	2b05      	cmp	r3, #5
 800a6a0:	d826      	bhi.n	800a6f0 <UART_SetConfig+0x7a0>
 800a6a2:	a201      	add	r2, pc, #4	@ (adr r2, 800a6a8 <UART_SetConfig+0x758>)
 800a6a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6a8:	0800a6c1 	.word	0x0800a6c1
 800a6ac:	0800a6c9 	.word	0x0800a6c9
 800a6b0:	0800a6d1 	.word	0x0800a6d1
 800a6b4:	0800a6d9 	.word	0x0800a6d9
 800a6b8:	0800a6e1 	.word	0x0800a6e1
 800a6bc:	0800a6e9 	.word	0x0800a6e9
 800a6c0:	2302      	movs	r3, #2
 800a6c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6c6:	e01a      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a6c8:	2304      	movs	r3, #4
 800a6ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ce:	e016      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a6d0:	2308      	movs	r3, #8
 800a6d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6d6:	e012      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a6d8:	2310      	movs	r3, #16
 800a6da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6de:	e00e      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a6e0:	2320      	movs	r3, #32
 800a6e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6e6:	e00a      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a6e8:	2340      	movs	r3, #64	@ 0x40
 800a6ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ee:	e006      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a6f0:	2380      	movs	r3, #128	@ 0x80
 800a6f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6f6:	e002      	b.n	800a6fe <UART_SetConfig+0x7ae>
 800a6f8:	2380      	movs	r3, #128	@ 0x80
 800a6fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4a55      	ldr	r2, [pc, #340]	@ (800a858 <UART_SetConfig+0x908>)
 800a704:	4293      	cmp	r3, r2
 800a706:	f040 80f8 	bne.w	800a8fa <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a70a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a70e:	2b20      	cmp	r3, #32
 800a710:	dc46      	bgt.n	800a7a0 <UART_SetConfig+0x850>
 800a712:	2b02      	cmp	r3, #2
 800a714:	db75      	blt.n	800a802 <UART_SetConfig+0x8b2>
 800a716:	3b02      	subs	r3, #2
 800a718:	2b1e      	cmp	r3, #30
 800a71a:	d872      	bhi.n	800a802 <UART_SetConfig+0x8b2>
 800a71c:	a201      	add	r2, pc, #4	@ (adr r2, 800a724 <UART_SetConfig+0x7d4>)
 800a71e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a722:	bf00      	nop
 800a724:	0800a7a7 	.word	0x0800a7a7
 800a728:	0800a803 	.word	0x0800a803
 800a72c:	0800a7af 	.word	0x0800a7af
 800a730:	0800a803 	.word	0x0800a803
 800a734:	0800a803 	.word	0x0800a803
 800a738:	0800a803 	.word	0x0800a803
 800a73c:	0800a7bf 	.word	0x0800a7bf
 800a740:	0800a803 	.word	0x0800a803
 800a744:	0800a803 	.word	0x0800a803
 800a748:	0800a803 	.word	0x0800a803
 800a74c:	0800a803 	.word	0x0800a803
 800a750:	0800a803 	.word	0x0800a803
 800a754:	0800a803 	.word	0x0800a803
 800a758:	0800a803 	.word	0x0800a803
 800a75c:	0800a7cf 	.word	0x0800a7cf
 800a760:	0800a803 	.word	0x0800a803
 800a764:	0800a803 	.word	0x0800a803
 800a768:	0800a803 	.word	0x0800a803
 800a76c:	0800a803 	.word	0x0800a803
 800a770:	0800a803 	.word	0x0800a803
 800a774:	0800a803 	.word	0x0800a803
 800a778:	0800a803 	.word	0x0800a803
 800a77c:	0800a803 	.word	0x0800a803
 800a780:	0800a803 	.word	0x0800a803
 800a784:	0800a803 	.word	0x0800a803
 800a788:	0800a803 	.word	0x0800a803
 800a78c:	0800a803 	.word	0x0800a803
 800a790:	0800a803 	.word	0x0800a803
 800a794:	0800a803 	.word	0x0800a803
 800a798:	0800a803 	.word	0x0800a803
 800a79c:	0800a7f5 	.word	0x0800a7f5
 800a7a0:	2b40      	cmp	r3, #64	@ 0x40
 800a7a2:	d02a      	beq.n	800a7fa <UART_SetConfig+0x8aa>
 800a7a4:	e02d      	b.n	800a802 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a7a6:	f7fc fc83 	bl	80070b0 <HAL_RCCEx_GetD3PCLK1Freq>
 800a7aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a7ac:	e02f      	b.n	800a80e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7fc fc92 	bl	80070dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a7b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7bc:	e027      	b.n	800a80e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7be:	f107 0318 	add.w	r3, r7, #24
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7fc fdde 	bl	8007384 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a7c8:	69fb      	ldr	r3, [r7, #28]
 800a7ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7cc:	e01f      	b.n	800a80e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7ce:	4b21      	ldr	r3, [pc, #132]	@ (800a854 <UART_SetConfig+0x904>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f003 0320 	and.w	r3, r3, #32
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d009      	beq.n	800a7ee <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a7da:	4b1e      	ldr	r3, [pc, #120]	@ (800a854 <UART_SetConfig+0x904>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	08db      	lsrs	r3, r3, #3
 800a7e0:	f003 0303 	and.w	r3, r3, #3
 800a7e4:	4a1d      	ldr	r2, [pc, #116]	@ (800a85c <UART_SetConfig+0x90c>)
 800a7e6:	fa22 f303 	lsr.w	r3, r2, r3
 800a7ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a7ec:	e00f      	b.n	800a80e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a7ee:	4b1b      	ldr	r3, [pc, #108]	@ (800a85c <UART_SetConfig+0x90c>)
 800a7f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7f2:	e00c      	b.n	800a80e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a7f4:	4b1a      	ldr	r3, [pc, #104]	@ (800a860 <UART_SetConfig+0x910>)
 800a7f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7f8:	e009      	b.n	800a80e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a7fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a800:	e005      	b.n	800a80e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a802:	2300      	movs	r3, #0
 800a804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a806:	2301      	movs	r3, #1
 800a808:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a80c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a80e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a810:	2b00      	cmp	r3, #0
 800a812:	f000 81ee 	beq.w	800abf2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a81a:	4a12      	ldr	r2, [pc, #72]	@ (800a864 <UART_SetConfig+0x914>)
 800a81c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a820:	461a      	mov	r2, r3
 800a822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a824:	fbb3 f3f2 	udiv	r3, r3, r2
 800a828:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	685a      	ldr	r2, [r3, #4]
 800a82e:	4613      	mov	r3, r2
 800a830:	005b      	lsls	r3, r3, #1
 800a832:	4413      	add	r3, r2
 800a834:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a836:	429a      	cmp	r2, r3
 800a838:	d305      	bcc.n	800a846 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a840:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a842:	429a      	cmp	r2, r3
 800a844:	d910      	bls.n	800a868 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a846:	2301      	movs	r3, #1
 800a848:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a84c:	e1d1      	b.n	800abf2 <UART_SetConfig+0xca2>
 800a84e:	bf00      	nop
 800a850:	40011c00 	.word	0x40011c00
 800a854:	58024400 	.word	0x58024400
 800a858:	58000c00 	.word	0x58000c00
 800a85c:	03d09000 	.word	0x03d09000
 800a860:	003d0900 	.word	0x003d0900
 800a864:	0800d260 	.word	0x0800d260
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a868:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a86a:	2200      	movs	r2, #0
 800a86c:	60bb      	str	r3, [r7, #8]
 800a86e:	60fa      	str	r2, [r7, #12]
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a874:	4ac0      	ldr	r2, [pc, #768]	@ (800ab78 <UART_SetConfig+0xc28>)
 800a876:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a87a:	b29b      	uxth	r3, r3
 800a87c:	2200      	movs	r2, #0
 800a87e:	603b      	str	r3, [r7, #0]
 800a880:	607a      	str	r2, [r7, #4]
 800a882:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a886:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a88a:	f7f5 fd99 	bl	80003c0 <__aeabi_uldivmod>
 800a88e:	4602      	mov	r2, r0
 800a890:	460b      	mov	r3, r1
 800a892:	4610      	mov	r0, r2
 800a894:	4619      	mov	r1, r3
 800a896:	f04f 0200 	mov.w	r2, #0
 800a89a:	f04f 0300 	mov.w	r3, #0
 800a89e:	020b      	lsls	r3, r1, #8
 800a8a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a8a4:	0202      	lsls	r2, r0, #8
 800a8a6:	6979      	ldr	r1, [r7, #20]
 800a8a8:	6849      	ldr	r1, [r1, #4]
 800a8aa:	0849      	lsrs	r1, r1, #1
 800a8ac:	2000      	movs	r0, #0
 800a8ae:	460c      	mov	r4, r1
 800a8b0:	4605      	mov	r5, r0
 800a8b2:	eb12 0804 	adds.w	r8, r2, r4
 800a8b6:	eb43 0905 	adc.w	r9, r3, r5
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	469a      	mov	sl, r3
 800a8c2:	4693      	mov	fp, r2
 800a8c4:	4652      	mov	r2, sl
 800a8c6:	465b      	mov	r3, fp
 800a8c8:	4640      	mov	r0, r8
 800a8ca:	4649      	mov	r1, r9
 800a8cc:	f7f5 fd78 	bl	80003c0 <__aeabi_uldivmod>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	460b      	mov	r3, r1
 800a8d4:	4613      	mov	r3, r2
 800a8d6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a8d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a8de:	d308      	bcc.n	800a8f2 <UART_SetConfig+0x9a2>
 800a8e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a8e6:	d204      	bcs.n	800a8f2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a8ee:	60da      	str	r2, [r3, #12]
 800a8f0:	e17f      	b.n	800abf2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a8f8:	e17b      	b.n	800abf2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	69db      	ldr	r3, [r3, #28]
 800a8fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a902:	f040 80bd 	bne.w	800aa80 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a906:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a90a:	2b20      	cmp	r3, #32
 800a90c:	dc48      	bgt.n	800a9a0 <UART_SetConfig+0xa50>
 800a90e:	2b00      	cmp	r3, #0
 800a910:	db7b      	blt.n	800aa0a <UART_SetConfig+0xaba>
 800a912:	2b20      	cmp	r3, #32
 800a914:	d879      	bhi.n	800aa0a <UART_SetConfig+0xaba>
 800a916:	a201      	add	r2, pc, #4	@ (adr r2, 800a91c <UART_SetConfig+0x9cc>)
 800a918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a91c:	0800a9a7 	.word	0x0800a9a7
 800a920:	0800a9af 	.word	0x0800a9af
 800a924:	0800aa0b 	.word	0x0800aa0b
 800a928:	0800aa0b 	.word	0x0800aa0b
 800a92c:	0800a9b7 	.word	0x0800a9b7
 800a930:	0800aa0b 	.word	0x0800aa0b
 800a934:	0800aa0b 	.word	0x0800aa0b
 800a938:	0800aa0b 	.word	0x0800aa0b
 800a93c:	0800a9c7 	.word	0x0800a9c7
 800a940:	0800aa0b 	.word	0x0800aa0b
 800a944:	0800aa0b 	.word	0x0800aa0b
 800a948:	0800aa0b 	.word	0x0800aa0b
 800a94c:	0800aa0b 	.word	0x0800aa0b
 800a950:	0800aa0b 	.word	0x0800aa0b
 800a954:	0800aa0b 	.word	0x0800aa0b
 800a958:	0800aa0b 	.word	0x0800aa0b
 800a95c:	0800a9d7 	.word	0x0800a9d7
 800a960:	0800aa0b 	.word	0x0800aa0b
 800a964:	0800aa0b 	.word	0x0800aa0b
 800a968:	0800aa0b 	.word	0x0800aa0b
 800a96c:	0800aa0b 	.word	0x0800aa0b
 800a970:	0800aa0b 	.word	0x0800aa0b
 800a974:	0800aa0b 	.word	0x0800aa0b
 800a978:	0800aa0b 	.word	0x0800aa0b
 800a97c:	0800aa0b 	.word	0x0800aa0b
 800a980:	0800aa0b 	.word	0x0800aa0b
 800a984:	0800aa0b 	.word	0x0800aa0b
 800a988:	0800aa0b 	.word	0x0800aa0b
 800a98c:	0800aa0b 	.word	0x0800aa0b
 800a990:	0800aa0b 	.word	0x0800aa0b
 800a994:	0800aa0b 	.word	0x0800aa0b
 800a998:	0800aa0b 	.word	0x0800aa0b
 800a99c:	0800a9fd 	.word	0x0800a9fd
 800a9a0:	2b40      	cmp	r3, #64	@ 0x40
 800a9a2:	d02e      	beq.n	800aa02 <UART_SetConfig+0xab2>
 800a9a4:	e031      	b.n	800aa0a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9a6:	f7fa fcc1 	bl	800532c <HAL_RCC_GetPCLK1Freq>
 800a9aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a9ac:	e033      	b.n	800aa16 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a9ae:	f7fa fcd3 	bl	8005358 <HAL_RCC_GetPCLK2Freq>
 800a9b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a9b4:	e02f      	b.n	800aa16 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7fc fb8e 	bl	80070dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a9c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9c4:	e027      	b.n	800aa16 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9c6:	f107 0318 	add.w	r3, r7, #24
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7fc fcda 	bl	8007384 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a9d0:	69fb      	ldr	r3, [r7, #28]
 800a9d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9d4:	e01f      	b.n	800aa16 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9d6:	4b69      	ldr	r3, [pc, #420]	@ (800ab7c <UART_SetConfig+0xc2c>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f003 0320 	and.w	r3, r3, #32
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d009      	beq.n	800a9f6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a9e2:	4b66      	ldr	r3, [pc, #408]	@ (800ab7c <UART_SetConfig+0xc2c>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	08db      	lsrs	r3, r3, #3
 800a9e8:	f003 0303 	and.w	r3, r3, #3
 800a9ec:	4a64      	ldr	r2, [pc, #400]	@ (800ab80 <UART_SetConfig+0xc30>)
 800a9ee:	fa22 f303 	lsr.w	r3, r2, r3
 800a9f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a9f4:	e00f      	b.n	800aa16 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a9f6:	4b62      	ldr	r3, [pc, #392]	@ (800ab80 <UART_SetConfig+0xc30>)
 800a9f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9fa:	e00c      	b.n	800aa16 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a9fc:	4b61      	ldr	r3, [pc, #388]	@ (800ab84 <UART_SetConfig+0xc34>)
 800a9fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa00:	e009      	b.n	800aa16 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa08:	e005      	b.n	800aa16 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aa14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aa16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	f000 80ea 	beq.w	800abf2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa22:	4a55      	ldr	r2, [pc, #340]	@ (800ab78 <UART_SetConfig+0xc28>)
 800aa24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa28:	461a      	mov	r2, r3
 800aa2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa2c:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa30:	005a      	lsls	r2, r3, #1
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	085b      	lsrs	r3, r3, #1
 800aa38:	441a      	add	r2, r3
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa42:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa46:	2b0f      	cmp	r3, #15
 800aa48:	d916      	bls.n	800aa78 <UART_SetConfig+0xb28>
 800aa4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa50:	d212      	bcs.n	800aa78 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aa52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	f023 030f 	bic.w	r3, r3, #15
 800aa5a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aa5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa5e:	085b      	lsrs	r3, r3, #1
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	f003 0307 	and.w	r3, r3, #7
 800aa66:	b29a      	uxth	r2, r3
 800aa68:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800aa74:	60da      	str	r2, [r3, #12]
 800aa76:	e0bc      	b.n	800abf2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800aa78:	2301      	movs	r3, #1
 800aa7a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800aa7e:	e0b8      	b.n	800abf2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aa80:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800aa84:	2b20      	cmp	r3, #32
 800aa86:	dc4b      	bgt.n	800ab20 <UART_SetConfig+0xbd0>
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	f2c0 8087 	blt.w	800ab9c <UART_SetConfig+0xc4c>
 800aa8e:	2b20      	cmp	r3, #32
 800aa90:	f200 8084 	bhi.w	800ab9c <UART_SetConfig+0xc4c>
 800aa94:	a201      	add	r2, pc, #4	@ (adr r2, 800aa9c <UART_SetConfig+0xb4c>)
 800aa96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa9a:	bf00      	nop
 800aa9c:	0800ab27 	.word	0x0800ab27
 800aaa0:	0800ab2f 	.word	0x0800ab2f
 800aaa4:	0800ab9d 	.word	0x0800ab9d
 800aaa8:	0800ab9d 	.word	0x0800ab9d
 800aaac:	0800ab37 	.word	0x0800ab37
 800aab0:	0800ab9d 	.word	0x0800ab9d
 800aab4:	0800ab9d 	.word	0x0800ab9d
 800aab8:	0800ab9d 	.word	0x0800ab9d
 800aabc:	0800ab47 	.word	0x0800ab47
 800aac0:	0800ab9d 	.word	0x0800ab9d
 800aac4:	0800ab9d 	.word	0x0800ab9d
 800aac8:	0800ab9d 	.word	0x0800ab9d
 800aacc:	0800ab9d 	.word	0x0800ab9d
 800aad0:	0800ab9d 	.word	0x0800ab9d
 800aad4:	0800ab9d 	.word	0x0800ab9d
 800aad8:	0800ab9d 	.word	0x0800ab9d
 800aadc:	0800ab57 	.word	0x0800ab57
 800aae0:	0800ab9d 	.word	0x0800ab9d
 800aae4:	0800ab9d 	.word	0x0800ab9d
 800aae8:	0800ab9d 	.word	0x0800ab9d
 800aaec:	0800ab9d 	.word	0x0800ab9d
 800aaf0:	0800ab9d 	.word	0x0800ab9d
 800aaf4:	0800ab9d 	.word	0x0800ab9d
 800aaf8:	0800ab9d 	.word	0x0800ab9d
 800aafc:	0800ab9d 	.word	0x0800ab9d
 800ab00:	0800ab9d 	.word	0x0800ab9d
 800ab04:	0800ab9d 	.word	0x0800ab9d
 800ab08:	0800ab9d 	.word	0x0800ab9d
 800ab0c:	0800ab9d 	.word	0x0800ab9d
 800ab10:	0800ab9d 	.word	0x0800ab9d
 800ab14:	0800ab9d 	.word	0x0800ab9d
 800ab18:	0800ab9d 	.word	0x0800ab9d
 800ab1c:	0800ab8f 	.word	0x0800ab8f
 800ab20:	2b40      	cmp	r3, #64	@ 0x40
 800ab22:	d037      	beq.n	800ab94 <UART_SetConfig+0xc44>
 800ab24:	e03a      	b.n	800ab9c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab26:	f7fa fc01 	bl	800532c <HAL_RCC_GetPCLK1Freq>
 800ab2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ab2c:	e03c      	b.n	800aba8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab2e:	f7fa fc13 	bl	8005358 <HAL_RCC_GetPCLK2Freq>
 800ab32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ab34:	e038      	b.n	800aba8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f7fc face 	bl	80070dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ab40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab44:	e030      	b.n	800aba8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab46:	f107 0318 	add.w	r3, r7, #24
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f7fc fc1a 	bl	8007384 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ab50:	69fb      	ldr	r3, [r7, #28]
 800ab52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab54:	e028      	b.n	800aba8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab56:	4b09      	ldr	r3, [pc, #36]	@ (800ab7c <UART_SetConfig+0xc2c>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f003 0320 	and.w	r3, r3, #32
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d012      	beq.n	800ab88 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ab62:	4b06      	ldr	r3, [pc, #24]	@ (800ab7c <UART_SetConfig+0xc2c>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	08db      	lsrs	r3, r3, #3
 800ab68:	f003 0303 	and.w	r3, r3, #3
 800ab6c:	4a04      	ldr	r2, [pc, #16]	@ (800ab80 <UART_SetConfig+0xc30>)
 800ab6e:	fa22 f303 	lsr.w	r3, r2, r3
 800ab72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ab74:	e018      	b.n	800aba8 <UART_SetConfig+0xc58>
 800ab76:	bf00      	nop
 800ab78:	0800d260 	.word	0x0800d260
 800ab7c:	58024400 	.word	0x58024400
 800ab80:	03d09000 	.word	0x03d09000
 800ab84:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ab88:	4b24      	ldr	r3, [pc, #144]	@ (800ac1c <UART_SetConfig+0xccc>)
 800ab8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab8c:	e00c      	b.n	800aba8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ab8e:	4b24      	ldr	r3, [pc, #144]	@ (800ac20 <UART_SetConfig+0xcd0>)
 800ab90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab92:	e009      	b.n	800aba8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab9a:	e005      	b.n	800aba8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800aba0:	2301      	movs	r3, #1
 800aba2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aba6:	bf00      	nop
    }

    if (pclk != 0U)
 800aba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d021      	beq.n	800abf2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abb2:	4a1c      	ldr	r2, [pc, #112]	@ (800ac24 <UART_SetConfig+0xcd4>)
 800abb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abb8:	461a      	mov	r2, r3
 800abba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abbc:	fbb3 f2f2 	udiv	r2, r3, r2
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	085b      	lsrs	r3, r3, #1
 800abc6:	441a      	add	r2, r3
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	fbb2 f3f3 	udiv	r3, r2, r3
 800abd0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800abd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abd4:	2b0f      	cmp	r3, #15
 800abd6:	d909      	bls.n	800abec <UART_SetConfig+0xc9c>
 800abd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abde:	d205      	bcs.n	800abec <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800abe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abe2:	b29a      	uxth	r2, r3
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	60da      	str	r2, [r3, #12]
 800abea:	e002      	b.n	800abf2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800abec:	2301      	movs	r3, #1
 800abee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	2201      	movs	r2, #1
 800abf6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	2201      	movs	r2, #1
 800abfe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	2200      	movs	r2, #0
 800ac06:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ac0e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3748      	adds	r7, #72	@ 0x48
 800ac16:	46bd      	mov	sp, r7
 800ac18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac1c:	03d09000 	.word	0x03d09000
 800ac20:	003d0900 	.word	0x003d0900
 800ac24:	0800d260 	.word	0x0800d260

0800ac28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac34:	f003 0308 	and.w	r3, r3, #8
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d00a      	beq.n	800ac52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	430a      	orrs	r2, r1
 800ac50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac56:	f003 0301 	and.w	r3, r3, #1
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d00a      	beq.n	800ac74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	430a      	orrs	r2, r1
 800ac72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac78:	f003 0302 	and.w	r3, r3, #2
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d00a      	beq.n	800ac96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	430a      	orrs	r2, r1
 800ac94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac9a:	f003 0304 	and.w	r3, r3, #4
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d00a      	beq.n	800acb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	430a      	orrs	r2, r1
 800acb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acbc:	f003 0310 	and.w	r3, r3, #16
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d00a      	beq.n	800acda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	689b      	ldr	r3, [r3, #8]
 800acca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	430a      	orrs	r2, r1
 800acd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acde:	f003 0320 	and.w	r3, r3, #32
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d00a      	beq.n	800acfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	430a      	orrs	r2, r1
 800acfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d01a      	beq.n	800ad3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	430a      	orrs	r2, r1
 800ad1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad26:	d10a      	bne.n	800ad3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	430a      	orrs	r2, r1
 800ad3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d00a      	beq.n	800ad60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	430a      	orrs	r2, r1
 800ad5e:	605a      	str	r2, [r3, #4]
  }
}
 800ad60:	bf00      	nop
 800ad62:	370c      	adds	r7, #12
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr

0800ad6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b098      	sub	sp, #96	@ 0x60
 800ad70:	af02      	add	r7, sp, #8
 800ad72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ad7c:	f7f7 fc1a 	bl	80025b4 <HAL_GetTick>
 800ad80:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f003 0308 	and.w	r3, r3, #8
 800ad8c:	2b08      	cmp	r3, #8
 800ad8e:	d12f      	bne.n	800adf0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ad94:	9300      	str	r3, [sp, #0]
 800ad96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 f88e 	bl	800aec0 <UART_WaitOnFlagUntilTimeout>
 800ada4:	4603      	mov	r3, r0
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d022      	beq.n	800adf0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adb2:	e853 3f00 	ldrex	r3, [r3]
 800adb6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800adb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800adbe:	653b      	str	r3, [r7, #80]	@ 0x50
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	461a      	mov	r2, r3
 800adc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800adc8:	647b      	str	r3, [r7, #68]	@ 0x44
 800adca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adcc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800adce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800add0:	e841 2300 	strex	r3, r2, [r1]
 800add4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800add6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800add8:	2b00      	cmp	r3, #0
 800adda:	d1e6      	bne.n	800adaa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2220      	movs	r2, #32
 800ade0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2200      	movs	r2, #0
 800ade8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800adec:	2303      	movs	r3, #3
 800adee:	e063      	b.n	800aeb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f003 0304 	and.w	r3, r3, #4
 800adfa:	2b04      	cmp	r3, #4
 800adfc:	d149      	bne.n	800ae92 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800adfe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ae02:	9300      	str	r3, [sp, #0]
 800ae04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae06:	2200      	movs	r2, #0
 800ae08:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 f857 	bl	800aec0 <UART_WaitOnFlagUntilTimeout>
 800ae12:	4603      	mov	r3, r0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d03c      	beq.n	800ae92 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae20:	e853 3f00 	ldrex	r3, [r3]
 800ae24:	623b      	str	r3, [r7, #32]
   return(result);
 800ae26:	6a3b      	ldr	r3, [r7, #32]
 800ae28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	461a      	mov	r2, r3
 800ae34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae36:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae38:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae3e:	e841 2300 	strex	r3, r2, [r1]
 800ae42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ae44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d1e6      	bne.n	800ae18 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	3308      	adds	r3, #8
 800ae50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	e853 3f00 	ldrex	r3, [r3]
 800ae58:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f023 0301 	bic.w	r3, r3, #1
 800ae60:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	3308      	adds	r3, #8
 800ae68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae6a:	61fa      	str	r2, [r7, #28]
 800ae6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae6e:	69b9      	ldr	r1, [r7, #24]
 800ae70:	69fa      	ldr	r2, [r7, #28]
 800ae72:	e841 2300 	strex	r3, r2, [r1]
 800ae76:	617b      	str	r3, [r7, #20]
   return(result);
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d1e5      	bne.n	800ae4a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2220      	movs	r2, #32
 800ae82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae8e:	2303      	movs	r3, #3
 800ae90:	e012      	b.n	800aeb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2220      	movs	r2, #32
 800ae96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2220      	movs	r2, #32
 800ae9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2200      	movs	r2, #0
 800aea6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aeb6:	2300      	movs	r3, #0
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3758      	adds	r7, #88	@ 0x58
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	60f8      	str	r0, [r7, #12]
 800aec8:	60b9      	str	r1, [r7, #8]
 800aeca:	603b      	str	r3, [r7, #0]
 800aecc:	4613      	mov	r3, r2
 800aece:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aed0:	e04f      	b.n	800af72 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aed2:	69bb      	ldr	r3, [r7, #24]
 800aed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aed8:	d04b      	beq.n	800af72 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aeda:	f7f7 fb6b 	bl	80025b4 <HAL_GetTick>
 800aede:	4602      	mov	r2, r0
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	1ad3      	subs	r3, r2, r3
 800aee4:	69ba      	ldr	r2, [r7, #24]
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d302      	bcc.n	800aef0 <UART_WaitOnFlagUntilTimeout+0x30>
 800aeea:	69bb      	ldr	r3, [r7, #24]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d101      	bne.n	800aef4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aef0:	2303      	movs	r3, #3
 800aef2:	e04e      	b.n	800af92 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f003 0304 	and.w	r3, r3, #4
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d037      	beq.n	800af72 <UART_WaitOnFlagUntilTimeout+0xb2>
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	2b80      	cmp	r3, #128	@ 0x80
 800af06:	d034      	beq.n	800af72 <UART_WaitOnFlagUntilTimeout+0xb2>
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	2b40      	cmp	r3, #64	@ 0x40
 800af0c:	d031      	beq.n	800af72 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	69db      	ldr	r3, [r3, #28]
 800af14:	f003 0308 	and.w	r3, r3, #8
 800af18:	2b08      	cmp	r3, #8
 800af1a:	d110      	bne.n	800af3e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	2208      	movs	r2, #8
 800af22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	f000 f839 	bl	800af9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2208      	movs	r2, #8
 800af2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2200      	movs	r2, #0
 800af36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800af3a:	2301      	movs	r3, #1
 800af3c:	e029      	b.n	800af92 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	69db      	ldr	r3, [r3, #28]
 800af44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800af48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af4c:	d111      	bne.n	800af72 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800af56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800af58:	68f8      	ldr	r0, [r7, #12]
 800af5a:	f000 f81f 	bl	800af9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	2220      	movs	r2, #32
 800af62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2200      	movs	r2, #0
 800af6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800af6e:	2303      	movs	r3, #3
 800af70:	e00f      	b.n	800af92 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	69da      	ldr	r2, [r3, #28]
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	4013      	ands	r3, r2
 800af7c:	68ba      	ldr	r2, [r7, #8]
 800af7e:	429a      	cmp	r2, r3
 800af80:	bf0c      	ite	eq
 800af82:	2301      	moveq	r3, #1
 800af84:	2300      	movne	r3, #0
 800af86:	b2db      	uxtb	r3, r3
 800af88:	461a      	mov	r2, r3
 800af8a:	79fb      	ldrb	r3, [r7, #7]
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d0a0      	beq.n	800aed2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af90:	2300      	movs	r3, #0
}
 800af92:	4618      	mov	r0, r3
 800af94:	3710      	adds	r7, #16
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
	...

0800af9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b095      	sub	sp, #84	@ 0x54
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afac:	e853 3f00 	ldrex	r3, [r3]
 800afb0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800afb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800afb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	461a      	mov	r2, r3
 800afc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afc2:	643b      	str	r3, [r7, #64]	@ 0x40
 800afc4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afc6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800afc8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800afca:	e841 2300 	strex	r3, r2, [r1]
 800afce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800afd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d1e6      	bne.n	800afa4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	3308      	adds	r3, #8
 800afdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afde:	6a3b      	ldr	r3, [r7, #32]
 800afe0:	e853 3f00 	ldrex	r3, [r3]
 800afe4:	61fb      	str	r3, [r7, #28]
   return(result);
 800afe6:	69fa      	ldr	r2, [r7, #28]
 800afe8:	4b1e      	ldr	r3, [pc, #120]	@ (800b064 <UART_EndRxTransfer+0xc8>)
 800afea:	4013      	ands	r3, r2
 800afec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	3308      	adds	r3, #8
 800aff4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aff6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aff8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800affa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800affc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800affe:	e841 2300 	strex	r3, r2, [r1]
 800b002:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b006:	2b00      	cmp	r3, #0
 800b008:	d1e5      	bne.n	800afd6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b00e:	2b01      	cmp	r3, #1
 800b010:	d118      	bne.n	800b044 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	e853 3f00 	ldrex	r3, [r3]
 800b01e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	f023 0310 	bic.w	r3, r3, #16
 800b026:	647b      	str	r3, [r7, #68]	@ 0x44
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	461a      	mov	r2, r3
 800b02e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b030:	61bb      	str	r3, [r7, #24]
 800b032:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b034:	6979      	ldr	r1, [r7, #20]
 800b036:	69ba      	ldr	r2, [r7, #24]
 800b038:	e841 2300 	strex	r3, r2, [r1]
 800b03c:	613b      	str	r3, [r7, #16]
   return(result);
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d1e6      	bne.n	800b012 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2220      	movs	r2, #32
 800b048:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2200      	movs	r2, #0
 800b056:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b058:	bf00      	nop
 800b05a:	3754      	adds	r7, #84	@ 0x54
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr
 800b064:	effffffe 	.word	0xeffffffe

0800b068 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b068:	b480      	push	{r7}
 800b06a:	b085      	sub	sp, #20
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b076:	2b01      	cmp	r3, #1
 800b078:	d101      	bne.n	800b07e <HAL_UARTEx_DisableFifoMode+0x16>
 800b07a:	2302      	movs	r3, #2
 800b07c:	e027      	b.n	800b0ce <HAL_UARTEx_DisableFifoMode+0x66>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2201      	movs	r2, #1
 800b082:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2224      	movs	r2, #36	@ 0x24
 800b08a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f022 0201 	bic.w	r2, r2, #1
 800b0a4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b0ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	68fa      	ldr	r2, [r7, #12]
 800b0ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2220      	movs	r2, #32
 800b0c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b0cc:	2300      	movs	r3, #0
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3714      	adds	r7, #20
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr

0800b0da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b0da:	b580      	push	{r7, lr}
 800b0dc:	b084      	sub	sp, #16
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6078      	str	r0, [r7, #4]
 800b0e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d101      	bne.n	800b0f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b0ee:	2302      	movs	r3, #2
 800b0f0:	e02d      	b.n	800b14e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2224      	movs	r2, #36	@ 0x24
 800b0fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	681a      	ldr	r2, [r3, #0]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f022 0201 	bic.w	r2, r2, #1
 800b118:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	689b      	ldr	r3, [r3, #8]
 800b120:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	683a      	ldr	r2, [r7, #0]
 800b12a:	430a      	orrs	r2, r1
 800b12c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 f850 	bl	800b1d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	68fa      	ldr	r2, [r7, #12]
 800b13a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2220      	movs	r2, #32
 800b140:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2200      	movs	r2, #0
 800b148:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b14c:	2300      	movs	r3, #0
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}

0800b156 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b156:	b580      	push	{r7, lr}
 800b158:	b084      	sub	sp, #16
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
 800b15e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b166:	2b01      	cmp	r3, #1
 800b168:	d101      	bne.n	800b16e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b16a:	2302      	movs	r3, #2
 800b16c:	e02d      	b.n	800b1ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2201      	movs	r2, #1
 800b172:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2224      	movs	r2, #36	@ 0x24
 800b17a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f022 0201 	bic.w	r2, r2, #1
 800b194:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	689b      	ldr	r3, [r3, #8]
 800b19c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	683a      	ldr	r2, [r7, #0]
 800b1a6:	430a      	orrs	r2, r1
 800b1a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 f812 	bl	800b1d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	68fa      	ldr	r2, [r7, #12]
 800b1b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2220      	movs	r2, #32
 800b1bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b1c8:	2300      	movs	r3, #0
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3710      	adds	r7, #16
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
	...

0800b1d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b085      	sub	sp, #20
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d108      	bne.n	800b1f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b1f4:	e031      	b.n	800b25a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b1f6:	2310      	movs	r3, #16
 800b1f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b1fa:	2310      	movs	r3, #16
 800b1fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	689b      	ldr	r3, [r3, #8]
 800b204:	0e5b      	lsrs	r3, r3, #25
 800b206:	b2db      	uxtb	r3, r3
 800b208:	f003 0307 	and.w	r3, r3, #7
 800b20c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	0f5b      	lsrs	r3, r3, #29
 800b216:	b2db      	uxtb	r3, r3
 800b218:	f003 0307 	and.w	r3, r3, #7
 800b21c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b21e:	7bbb      	ldrb	r3, [r7, #14]
 800b220:	7b3a      	ldrb	r2, [r7, #12]
 800b222:	4911      	ldr	r1, [pc, #68]	@ (800b268 <UARTEx_SetNbDataToProcess+0x94>)
 800b224:	5c8a      	ldrb	r2, [r1, r2]
 800b226:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b22a:	7b3a      	ldrb	r2, [r7, #12]
 800b22c:	490f      	ldr	r1, [pc, #60]	@ (800b26c <UARTEx_SetNbDataToProcess+0x98>)
 800b22e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b230:	fb93 f3f2 	sdiv	r3, r3, r2
 800b234:	b29a      	uxth	r2, r3
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b23c:	7bfb      	ldrb	r3, [r7, #15]
 800b23e:	7b7a      	ldrb	r2, [r7, #13]
 800b240:	4909      	ldr	r1, [pc, #36]	@ (800b268 <UARTEx_SetNbDataToProcess+0x94>)
 800b242:	5c8a      	ldrb	r2, [r1, r2]
 800b244:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b248:	7b7a      	ldrb	r2, [r7, #13]
 800b24a:	4908      	ldr	r1, [pc, #32]	@ (800b26c <UARTEx_SetNbDataToProcess+0x98>)
 800b24c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b24e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b252:	b29a      	uxth	r2, r3
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b25a:	bf00      	nop
 800b25c:	3714      	adds	r7, #20
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop
 800b268:	0800d278 	.word	0x0800d278
 800b26c:	0800d280 	.word	0x0800d280

0800b270 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800b270:	b480      	push	{r7}
 800b272:	b083      	sub	sp, #12
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d121      	bne.n	800b2c6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	4b27      	ldr	r3, [pc, #156]	@ (800b324 <FMC_SDRAM_Init+0xb4>)
 800b288:	4013      	ands	r3, r2
 800b28a:	683a      	ldr	r2, [r7, #0]
 800b28c:	6851      	ldr	r1, [r2, #4]
 800b28e:	683a      	ldr	r2, [r7, #0]
 800b290:	6892      	ldr	r2, [r2, #8]
 800b292:	4311      	orrs	r1, r2
 800b294:	683a      	ldr	r2, [r7, #0]
 800b296:	68d2      	ldr	r2, [r2, #12]
 800b298:	4311      	orrs	r1, r2
 800b29a:	683a      	ldr	r2, [r7, #0]
 800b29c:	6912      	ldr	r2, [r2, #16]
 800b29e:	4311      	orrs	r1, r2
 800b2a0:	683a      	ldr	r2, [r7, #0]
 800b2a2:	6952      	ldr	r2, [r2, #20]
 800b2a4:	4311      	orrs	r1, r2
 800b2a6:	683a      	ldr	r2, [r7, #0]
 800b2a8:	6992      	ldr	r2, [r2, #24]
 800b2aa:	4311      	orrs	r1, r2
 800b2ac:	683a      	ldr	r2, [r7, #0]
 800b2ae:	69d2      	ldr	r2, [r2, #28]
 800b2b0:	4311      	orrs	r1, r2
 800b2b2:	683a      	ldr	r2, [r7, #0]
 800b2b4:	6a12      	ldr	r2, [r2, #32]
 800b2b6:	4311      	orrs	r1, r2
 800b2b8:	683a      	ldr	r2, [r7, #0]
 800b2ba:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b2bc:	430a      	orrs	r2, r1
 800b2be:	431a      	orrs	r2, r3
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	601a      	str	r2, [r3, #0]
 800b2c4:	e026      	b.n	800b314 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	69d9      	ldr	r1, [r3, #28]
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	6a1b      	ldr	r3, [r3, #32]
 800b2d6:	4319      	orrs	r1, r3
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2dc:	430b      	orrs	r3, r1
 800b2de:	431a      	orrs	r2, r3
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	685a      	ldr	r2, [r3, #4]
 800b2e8:	4b0e      	ldr	r3, [pc, #56]	@ (800b324 <FMC_SDRAM_Init+0xb4>)
 800b2ea:	4013      	ands	r3, r2
 800b2ec:	683a      	ldr	r2, [r7, #0]
 800b2ee:	6851      	ldr	r1, [r2, #4]
 800b2f0:	683a      	ldr	r2, [r7, #0]
 800b2f2:	6892      	ldr	r2, [r2, #8]
 800b2f4:	4311      	orrs	r1, r2
 800b2f6:	683a      	ldr	r2, [r7, #0]
 800b2f8:	68d2      	ldr	r2, [r2, #12]
 800b2fa:	4311      	orrs	r1, r2
 800b2fc:	683a      	ldr	r2, [r7, #0]
 800b2fe:	6912      	ldr	r2, [r2, #16]
 800b300:	4311      	orrs	r1, r2
 800b302:	683a      	ldr	r2, [r7, #0]
 800b304:	6952      	ldr	r2, [r2, #20]
 800b306:	4311      	orrs	r1, r2
 800b308:	683a      	ldr	r2, [r7, #0]
 800b30a:	6992      	ldr	r2, [r2, #24]
 800b30c:	430a      	orrs	r2, r1
 800b30e:	431a      	orrs	r2, r3
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b314:	2300      	movs	r3, #0
}
 800b316:	4618      	mov	r0, r3
 800b318:	370c      	adds	r7, #12
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr
 800b322:	bf00      	nop
 800b324:	ffff8000 	.word	0xffff8000

0800b328 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b328:	b480      	push	{r7}
 800b32a:	b085      	sub	sp, #20
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	60f8      	str	r0, [r7, #12]
 800b330:	60b9      	str	r1, [r7, #8]
 800b332:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d128      	bne.n	800b38c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	689b      	ldr	r3, [r3, #8]
 800b33e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	1e59      	subs	r1, r3, #1
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	3b01      	subs	r3, #1
 800b34e:	011b      	lsls	r3, r3, #4
 800b350:	4319      	orrs	r1, r3
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	3b01      	subs	r3, #1
 800b358:	021b      	lsls	r3, r3, #8
 800b35a:	4319      	orrs	r1, r3
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	68db      	ldr	r3, [r3, #12]
 800b360:	3b01      	subs	r3, #1
 800b362:	031b      	lsls	r3, r3, #12
 800b364:	4319      	orrs	r1, r3
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	691b      	ldr	r3, [r3, #16]
 800b36a:	3b01      	subs	r3, #1
 800b36c:	041b      	lsls	r3, r3, #16
 800b36e:	4319      	orrs	r1, r3
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	695b      	ldr	r3, [r3, #20]
 800b374:	3b01      	subs	r3, #1
 800b376:	051b      	lsls	r3, r3, #20
 800b378:	4319      	orrs	r1, r3
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	699b      	ldr	r3, [r3, #24]
 800b37e:	3b01      	subs	r3, #1
 800b380:	061b      	lsls	r3, r3, #24
 800b382:	430b      	orrs	r3, r1
 800b384:	431a      	orrs	r2, r3
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	609a      	str	r2, [r3, #8]
 800b38a:	e02d      	b.n	800b3e8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	689a      	ldr	r2, [r3, #8]
 800b390:	4b19      	ldr	r3, [pc, #100]	@ (800b3f8 <FMC_SDRAM_Timing_Init+0xd0>)
 800b392:	4013      	ands	r3, r2
 800b394:	68ba      	ldr	r2, [r7, #8]
 800b396:	68d2      	ldr	r2, [r2, #12]
 800b398:	3a01      	subs	r2, #1
 800b39a:	0311      	lsls	r1, r2, #12
 800b39c:	68ba      	ldr	r2, [r7, #8]
 800b39e:	6952      	ldr	r2, [r2, #20]
 800b3a0:	3a01      	subs	r2, #1
 800b3a2:	0512      	lsls	r2, r2, #20
 800b3a4:	430a      	orrs	r2, r1
 800b3a6:	431a      	orrs	r2, r3
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	68db      	ldr	r3, [r3, #12]
 800b3b0:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	1e59      	subs	r1, r3, #1
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	3b01      	subs	r3, #1
 800b3c0:	011b      	lsls	r3, r3, #4
 800b3c2:	4319      	orrs	r1, r3
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	689b      	ldr	r3, [r3, #8]
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	021b      	lsls	r3, r3, #8
 800b3cc:	4319      	orrs	r1, r3
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	691b      	ldr	r3, [r3, #16]
 800b3d2:	3b01      	subs	r3, #1
 800b3d4:	041b      	lsls	r3, r3, #16
 800b3d6:	4319      	orrs	r1, r3
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	699b      	ldr	r3, [r3, #24]
 800b3dc:	3b01      	subs	r3, #1
 800b3de:	061b      	lsls	r3, r3, #24
 800b3e0:	430b      	orrs	r3, r1
 800b3e2:	431a      	orrs	r2, r3
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800b3e8:	2300      	movs	r3, #0
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3714      	adds	r7, #20
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f4:	4770      	bx	lr
 800b3f6:	bf00      	nop
 800b3f8:	ff0f0fff 	.word	0xff0f0fff

0800b3fc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b3fc:	b084      	sub	sp, #16
 800b3fe:	b480      	push	{r7}
 800b400:	b085      	sub	sp, #20
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
 800b406:	f107 001c 	add.w	r0, r7, #28
 800b40a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b40e:	2300      	movs	r3, #0
 800b410:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b412:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800b414:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800b416:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800b418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800b41a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800b41c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800b41e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800b422:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800b424:	68fa      	ldr	r2, [r7, #12]
 800b426:	4313      	orrs	r3, r2
 800b428:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	685a      	ldr	r2, [r3, #4]
 800b42e:	4b07      	ldr	r3, [pc, #28]	@ (800b44c <SDMMC_Init+0x50>)
 800b430:	4013      	ands	r3, r2
 800b432:	68fa      	ldr	r2, [r7, #12]
 800b434:	431a      	orrs	r2, r3
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b43a:	2300      	movs	r3, #0
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3714      	adds	r7, #20
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	b004      	add	sp, #16
 800b448:	4770      	bx	lr
 800b44a:	bf00      	nop
 800b44c:	ffc02c00 	.word	0xffc02c00

0800b450 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 800b450:	b480      	push	{r7}
 800b452:	b083      	sub	sp, #12
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800b45e:	4618      	mov	r0, r3
 800b460:	370c      	adds	r7, #12
 800b462:	46bd      	mov	sp, r7
 800b464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b468:	4770      	bx	lr

0800b46a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b46a:	b480      	push	{r7}
 800b46c:	b083      	sub	sp, #12
 800b46e:	af00      	add	r7, sp, #0
 800b470:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f043 0203 	orr.w	r2, r3, #3
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b47e:	2300      	movs	r3, #0
}
 800b480:	4618      	mov	r0, r3
 800b482:	370c      	adds	r7, #12
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr

0800b48c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b083      	sub	sp, #12
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f003 0303 	and.w	r3, r3, #3
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	370c      	adds	r7, #12
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr

0800b4a8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b085      	sub	sp, #20
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b4c6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800b4cc:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800b4d2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b4d4:	68fa      	ldr	r2, [r7, #12]
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	68da      	ldr	r2, [r3, #12]
 800b4de:	4b06      	ldr	r3, [pc, #24]	@ (800b4f8 <SDMMC_SendCommand+0x50>)
 800b4e0:	4013      	ands	r3, r2
 800b4e2:	68fa      	ldr	r2, [r7, #12]
 800b4e4:	431a      	orrs	r2, r3
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b4ea:	2300      	movs	r3, #0
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3714      	adds	r7, #20
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr
 800b4f8:	fffee0c0 	.word	0xfffee0c0

0800b4fc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b083      	sub	sp, #12
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	691b      	ldr	r3, [r3, #16]
 800b508:	b2db      	uxtb	r3, r3
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	370c      	adds	r7, #12
 800b50e:	46bd      	mov	sp, r7
 800b510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b514:	4770      	bx	lr

0800b516 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b516:	b480      	push	{r7}
 800b518:	b085      	sub	sp, #20
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	6078      	str	r0, [r7, #4]
 800b51e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	3314      	adds	r3, #20
 800b524:	461a      	mov	r2, r3
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	4413      	add	r3, r2
 800b52a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	681b      	ldr	r3, [r3, #0]
}
 800b530:	4618      	mov	r0, r3
 800b532:	3714      	adds	r7, #20
 800b534:	46bd      	mov	sp, r7
 800b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53a:	4770      	bx	lr

0800b53c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b085      	sub	sp, #20
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
 800b544:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b546:	2300      	movs	r3, #0
 800b548:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	681a      	ldr	r2, [r3, #0]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	685a      	ldr	r2, [r3, #4]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b562:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800b568:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800b56e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b570:	68fa      	ldr	r2, [r7, #12]
 800b572:	4313      	orrs	r3, r2
 800b574:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b57a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	431a      	orrs	r2, r3
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800b586:	2300      	movs	r3, #0

}
 800b588:	4618      	mov	r0, r3
 800b58a:	3714      	adds	r7, #20
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b088      	sub	sp, #32
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b5a2:	2310      	movs	r3, #16
 800b5a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b5aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b5b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5b6:	f107 0308 	add.w	r3, r7, #8
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f7ff ff73 	bl	800b4a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b5c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b5c6:	2110      	movs	r1, #16
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f000 f995 	bl	800b8f8 <SDMMC_GetCmdResp1>
 800b5ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5d0:	69fb      	ldr	r3, [r7, #28]
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3720      	adds	r7, #32
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}

0800b5da <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800b5da:	b580      	push	{r7, lr}
 800b5dc:	b088      	sub	sp, #32
 800b5de:	af00      	add	r7, sp, #0
 800b5e0:	6078      	str	r0, [r7, #4]
 800b5e2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b5e8:	2307      	movs	r3, #7
 800b5ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b5f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b5fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5fc:	f107 0308 	add.w	r3, r7, #8
 800b600:	4619      	mov	r1, r3
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f7ff ff50 	bl	800b4a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b608:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b60c:	2107      	movs	r1, #7
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 f972 	bl	800b8f8 <SDMMC_GetCmdResp1>
 800b614:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b616:	69fb      	ldr	r3, [r7, #28]
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3720      	adds	r7, #32
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}

0800b620 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b088      	sub	sp, #32
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b628:	2300      	movs	r3, #0
 800b62a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b62c:	2300      	movs	r3, #0
 800b62e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b630:	2300      	movs	r3, #0
 800b632:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b634:	2300      	movs	r3, #0
 800b636:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b638:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b63c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b63e:	f107 0308 	add.w	r3, r7, #8
 800b642:	4619      	mov	r1, r3
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f7ff ff2f 	bl	800b4a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 fb96 	bl	800bd7c <SDMMC_GetCmdError>
 800b650:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b652:	69fb      	ldr	r3, [r7, #28]
}
 800b654:	4618      	mov	r0, r3
 800b656:	3720      	adds	r7, #32
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}

0800b65c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b088      	sub	sp, #32
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b664:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800b668:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b66a:	2308      	movs	r3, #8
 800b66c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b66e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b672:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b674:	2300      	movs	r3, #0
 800b676:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b678:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b67c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b67e:	f107 0308 	add.w	r3, r7, #8
 800b682:	4619      	mov	r1, r3
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f7ff ff0f 	bl	800b4a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 fb28 	bl	800bce0 <SDMMC_GetCmdResp7>
 800b690:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b692:	69fb      	ldr	r3, [r7, #28]
}
 800b694:	4618      	mov	r0, r3
 800b696:	3720      	adds	r7, #32
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b088      	sub	sp, #32
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b6aa:	2337      	movs	r3, #55	@ 0x37
 800b6ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b6b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b6bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6be:	f107 0308 	add.w	r3, r7, #8
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f7ff feef 	bl	800b4a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b6ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b6ce:	2137      	movs	r1, #55	@ 0x37
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f000 f911 	bl	800b8f8 <SDMMC_GetCmdResp1>
 800b6d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6d8:	69fb      	ldr	r3, [r7, #28]
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3720      	adds	r7, #32
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}

0800b6e2 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b6e2:	b580      	push	{r7, lr}
 800b6e4:	b088      	sub	sp, #32
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
 800b6ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b6f0:	2329      	movs	r3, #41	@ 0x29
 800b6f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b6f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b702:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b704:	f107 0308 	add.w	r3, r7, #8
 800b708:	4619      	mov	r1, r3
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f7ff fecc 	bl	800b4a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f000 fa2d 	bl	800bb70 <SDMMC_GetCmdResp3>
 800b716:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b718:	69fb      	ldr	r3, [r7, #28]
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3720      	adds	r7, #32
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}

0800b722 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b722:	b580      	push	{r7, lr}
 800b724:	b088      	sub	sp, #32
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]
 800b72a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b730:	2306      	movs	r3, #6
 800b732:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b734:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b738:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b73a:	2300      	movs	r3, #0
 800b73c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b73e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b742:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b744:	f107 0308 	add.w	r3, r7, #8
 800b748:	4619      	mov	r1, r3
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f7ff feac 	bl	800b4a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b750:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b754:	2106      	movs	r1, #6
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f000 f8ce 	bl	800b8f8 <SDMMC_GetCmdResp1>
 800b75c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b75e:	69fb      	ldr	r3, [r7, #28]
}
 800b760:	4618      	mov	r0, r3
 800b762:	3720      	adds	r7, #32
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b088      	sub	sp, #32
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b770:	2300      	movs	r3, #0
 800b772:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b774:	2333      	movs	r3, #51	@ 0x33
 800b776:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b778:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b77c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b77e:	2300      	movs	r3, #0
 800b780:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b782:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b786:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b788:	f107 0308 	add.w	r3, r7, #8
 800b78c:	4619      	mov	r1, r3
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f7ff fe8a 	bl	800b4a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b794:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b798:	2133      	movs	r1, #51	@ 0x33
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f000 f8ac 	bl	800b8f8 <SDMMC_GetCmdResp1>
 800b7a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7a2:	69fb      	ldr	r3, [r7, #28]
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3720      	adds	r7, #32
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b088      	sub	sp, #32
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b7b8:	2302      	movs	r3, #2
 800b7ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b7bc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b7c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b7ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7cc:	f107 0308 	add.w	r3, r7, #8
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f7ff fe68 	bl	800b4a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f000 f97f 	bl	800badc <SDMMC_GetCmdResp2>
 800b7de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7e0:	69fb      	ldr	r3, [r7, #28]
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3720      	adds	r7, #32
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b088      	sub	sp, #32
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
 800b7f2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b7f8:	2309      	movs	r3, #9
 800b7fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b7fc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b800:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b802:	2300      	movs	r3, #0
 800b804:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b806:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b80a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b80c:	f107 0308 	add.w	r3, r7, #8
 800b810:	4619      	mov	r1, r3
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f7ff fe48 	bl	800b4a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f000 f95f 	bl	800badc <SDMMC_GetCmdResp2>
 800b81e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b820:	69fb      	ldr	r3, [r7, #28]
}
 800b822:	4618      	mov	r0, r3
 800b824:	3720      	adds	r7, #32
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}

0800b82a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b82a:	b580      	push	{r7, lr}
 800b82c:	b088      	sub	sp, #32
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
 800b832:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b834:	2300      	movs	r3, #0
 800b836:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b838:	2303      	movs	r3, #3
 800b83a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b83c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b840:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b842:	2300      	movs	r3, #0
 800b844:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b846:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b84a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b84c:	f107 0308 	add.w	r3, r7, #8
 800b850:	4619      	mov	r1, r3
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f7ff fe28 	bl	800b4a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b858:	683a      	ldr	r2, [r7, #0]
 800b85a:	2103      	movs	r1, #3
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 f9c7 	bl	800bbf0 <SDMMC_GetCmdResp6>
 800b862:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b864:	69fb      	ldr	r3, [r7, #28]
}
 800b866:	4618      	mov	r0, r3
 800b868:	3720      	adds	r7, #32
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}

0800b86e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b86e:	b580      	push	{r7, lr}
 800b870:	b088      	sub	sp, #32
 800b872:	af00      	add	r7, sp, #0
 800b874:	6078      	str	r0, [r7, #4]
 800b876:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b87c:	230d      	movs	r3, #13
 800b87e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b880:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b884:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b886:	2300      	movs	r3, #0
 800b888:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b88a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b88e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b890:	f107 0308 	add.w	r3, r7, #8
 800b894:	4619      	mov	r1, r3
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f7ff fe06 	bl	800b4a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b89c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b8a0:	210d      	movs	r1, #13
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 f828 	bl	800b8f8 <SDMMC_GetCmdResp1>
 800b8a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8aa:	69fb      	ldr	r3, [r7, #28]
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3720      	adds	r7, #32
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}

0800b8b4 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b088      	sub	sp, #32
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b8c0:	230d      	movs	r3, #13
 800b8c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b8c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b8d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8d4:	f107 0308 	add.w	r3, r7, #8
 800b8d8:	4619      	mov	r1, r3
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f7ff fde4 	bl	800b4a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b8e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b8e4:	210d      	movs	r1, #13
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f000 f806 	bl	800b8f8 <SDMMC_GetCmdResp1>
 800b8ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8ee:	69fb      	ldr	r3, [r7, #28]
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3720      	adds	r7, #32
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b088      	sub	sp, #32
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	60f8      	str	r0, [r7, #12]
 800b900:	460b      	mov	r3, r1
 800b902:	607a      	str	r2, [r7, #4]
 800b904:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b906:	4b70      	ldr	r3, [pc, #448]	@ (800bac8 <SDMMC_GetCmdResp1+0x1d0>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	4a70      	ldr	r2, [pc, #448]	@ (800bacc <SDMMC_GetCmdResp1+0x1d4>)
 800b90c:	fba2 2303 	umull	r2, r3, r2, r3
 800b910:	0a5a      	lsrs	r2, r3, #9
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	fb02 f303 	mul.w	r3, r2, r3
 800b918:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b91a:	69fb      	ldr	r3, [r7, #28]
 800b91c:	1e5a      	subs	r2, r3, #1
 800b91e:	61fa      	str	r2, [r7, #28]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d102      	bne.n	800b92a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b924:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b928:	e0c9      	b.n	800babe <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b92e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b930:	69ba      	ldr	r2, [r7, #24]
 800b932:	4b67      	ldr	r3, [pc, #412]	@ (800bad0 <SDMMC_GetCmdResp1+0x1d8>)
 800b934:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b936:	2b00      	cmp	r3, #0
 800b938:	d0ef      	beq.n	800b91a <SDMMC_GetCmdResp1+0x22>
 800b93a:	69bb      	ldr	r3, [r7, #24]
 800b93c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b940:	2b00      	cmp	r3, #0
 800b942:	d1ea      	bne.n	800b91a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b948:	f003 0304 	and.w	r3, r3, #4
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d004      	beq.n	800b95a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2204      	movs	r2, #4
 800b954:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b956:	2304      	movs	r3, #4
 800b958:	e0b1      	b.n	800babe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b95e:	f003 0301 	and.w	r3, r3, #1
 800b962:	2b00      	cmp	r3, #0
 800b964:	d004      	beq.n	800b970 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2201      	movs	r2, #1
 800b96a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b96c:	2301      	movs	r3, #1
 800b96e:	e0a6      	b.n	800babe <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	4a58      	ldr	r2, [pc, #352]	@ (800bad4 <SDMMC_GetCmdResp1+0x1dc>)
 800b974:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b976:	68f8      	ldr	r0, [r7, #12]
 800b978:	f7ff fdc0 	bl	800b4fc <SDMMC_GetCommandResponse>
 800b97c:	4603      	mov	r3, r0
 800b97e:	461a      	mov	r2, r3
 800b980:	7afb      	ldrb	r3, [r7, #11]
 800b982:	4293      	cmp	r3, r2
 800b984:	d001      	beq.n	800b98a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b986:	2301      	movs	r3, #1
 800b988:	e099      	b.n	800babe <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b98a:	2100      	movs	r1, #0
 800b98c:	68f8      	ldr	r0, [r7, #12]
 800b98e:	f7ff fdc2 	bl	800b516 <SDMMC_GetResponse>
 800b992:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b994:	697a      	ldr	r2, [r7, #20]
 800b996:	4b50      	ldr	r3, [pc, #320]	@ (800bad8 <SDMMC_GetCmdResp1+0x1e0>)
 800b998:	4013      	ands	r3, r2
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d101      	bne.n	800b9a2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	e08d      	b.n	800babe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	da02      	bge.n	800b9ae <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b9a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b9ac:	e087      	b.n	800babe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d001      	beq.n	800b9bc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b9b8:	2340      	movs	r3, #64	@ 0x40
 800b9ba:	e080      	b.n	800babe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d001      	beq.n	800b9ca <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b9c6:	2380      	movs	r3, #128	@ 0x80
 800b9c8:	e079      	b.n	800babe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d002      	beq.n	800b9da <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b9d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b9d8:	e071      	b.n	800babe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d002      	beq.n	800b9ea <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b9e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b9e8:	e069      	b.n	800babe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d002      	beq.n	800b9fa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b9f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b9f8:	e061      	b.n	800babe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d002      	beq.n	800ba0a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ba04:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ba08:	e059      	b.n	800babe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d002      	beq.n	800ba1a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ba14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ba18:	e051      	b.n	800babe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d002      	beq.n	800ba2a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ba24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ba28:	e049      	b.n	800babe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d002      	beq.n	800ba3a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ba34:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ba38:	e041      	b.n	800babe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d002      	beq.n	800ba4a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ba44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba48:	e039      	b.n	800babe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d002      	beq.n	800ba5a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ba54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800ba58:	e031      	b.n	800babe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d002      	beq.n	800ba6a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ba64:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800ba68:	e029      	b.n	800babe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d002      	beq.n	800ba7a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ba74:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ba78:	e021      	b.n	800babe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d002      	beq.n	800ba8a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ba84:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ba88:	e019      	b.n	800babe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d002      	beq.n	800ba9a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ba94:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800ba98:	e011      	b.n	800babe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d002      	beq.n	800baaa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800baa4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800baa8:	e009      	b.n	800babe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	f003 0308 	and.w	r3, r3, #8
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d002      	beq.n	800baba <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bab4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800bab8:	e001      	b.n	800babe <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800baba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3720      	adds	r7, #32
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop
 800bac8:	24000014 	.word	0x24000014
 800bacc:	10624dd3 	.word	0x10624dd3
 800bad0:	00200045 	.word	0x00200045
 800bad4:	002000c5 	.word	0x002000c5
 800bad8:	fdffe008 	.word	0xfdffe008

0800badc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800badc:	b480      	push	{r7}
 800bade:	b085      	sub	sp, #20
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bae4:	4b1f      	ldr	r3, [pc, #124]	@ (800bb64 <SDMMC_GetCmdResp2+0x88>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	4a1f      	ldr	r2, [pc, #124]	@ (800bb68 <SDMMC_GetCmdResp2+0x8c>)
 800baea:	fba2 2303 	umull	r2, r3, r2, r3
 800baee:	0a5b      	lsrs	r3, r3, #9
 800baf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800baf4:	fb02 f303 	mul.w	r3, r2, r3
 800baf8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	1e5a      	subs	r2, r3, #1
 800bafe:	60fa      	str	r2, [r7, #12]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d102      	bne.n	800bb0a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb04:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bb08:	e026      	b.n	800bb58 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb0e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d0ef      	beq.n	800bafa <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d1ea      	bne.n	800bafa <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb28:	f003 0304 	and.w	r3, r3, #4
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d004      	beq.n	800bb3a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2204      	movs	r2, #4
 800bb34:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb36:	2304      	movs	r3, #4
 800bb38:	e00e      	b.n	800bb58 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb3e:	f003 0301 	and.w	r3, r3, #1
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d004      	beq.n	800bb50 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2201      	movs	r2, #1
 800bb4a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	e003      	b.n	800bb58 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	4a06      	ldr	r2, [pc, #24]	@ (800bb6c <SDMMC_GetCmdResp2+0x90>)
 800bb54:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800bb56:	2300      	movs	r3, #0
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3714      	adds	r7, #20
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb62:	4770      	bx	lr
 800bb64:	24000014 	.word	0x24000014
 800bb68:	10624dd3 	.word	0x10624dd3
 800bb6c:	002000c5 	.word	0x002000c5

0800bb70 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b085      	sub	sp, #20
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bb78:	4b1a      	ldr	r3, [pc, #104]	@ (800bbe4 <SDMMC_GetCmdResp3+0x74>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	4a1a      	ldr	r2, [pc, #104]	@ (800bbe8 <SDMMC_GetCmdResp3+0x78>)
 800bb7e:	fba2 2303 	umull	r2, r3, r2, r3
 800bb82:	0a5b      	lsrs	r3, r3, #9
 800bb84:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb88:	fb02 f303 	mul.w	r3, r2, r3
 800bb8c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	1e5a      	subs	r2, r3, #1
 800bb92:	60fa      	str	r2, [r7, #12]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d102      	bne.n	800bb9e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb98:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bb9c:	e01b      	b.n	800bbd6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bba2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d0ef      	beq.n	800bb8e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d1ea      	bne.n	800bb8e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbbc:	f003 0304 	and.w	r3, r3, #4
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d004      	beq.n	800bbce <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2204      	movs	r2, #4
 800bbc8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bbca:	2304      	movs	r3, #4
 800bbcc:	e003      	b.n	800bbd6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	4a06      	ldr	r2, [pc, #24]	@ (800bbec <SDMMC_GetCmdResp3+0x7c>)
 800bbd2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800bbd4:	2300      	movs	r3, #0
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3714      	adds	r7, #20
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe0:	4770      	bx	lr
 800bbe2:	bf00      	nop
 800bbe4:	24000014 	.word	0x24000014
 800bbe8:	10624dd3 	.word	0x10624dd3
 800bbec:	002000c5 	.word	0x002000c5

0800bbf0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b088      	sub	sp, #32
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	460b      	mov	r3, r1
 800bbfa:	607a      	str	r2, [r7, #4]
 800bbfc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bbfe:	4b35      	ldr	r3, [pc, #212]	@ (800bcd4 <SDMMC_GetCmdResp6+0xe4>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	4a35      	ldr	r2, [pc, #212]	@ (800bcd8 <SDMMC_GetCmdResp6+0xe8>)
 800bc04:	fba2 2303 	umull	r2, r3, r2, r3
 800bc08:	0a5b      	lsrs	r3, r3, #9
 800bc0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc0e:	fb02 f303 	mul.w	r3, r2, r3
 800bc12:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bc14:	69fb      	ldr	r3, [r7, #28]
 800bc16:	1e5a      	subs	r2, r3, #1
 800bc18:	61fa      	str	r2, [r7, #28]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d102      	bne.n	800bc24 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc1e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bc22:	e052      	b.n	800bcca <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc28:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc2a:	69bb      	ldr	r3, [r7, #24]
 800bc2c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d0ef      	beq.n	800bc14 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bc34:	69bb      	ldr	r3, [r7, #24]
 800bc36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d1ea      	bne.n	800bc14 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc42:	f003 0304 	and.w	r3, r3, #4
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d004      	beq.n	800bc54 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	2204      	movs	r2, #4
 800bc4e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc50:	2304      	movs	r3, #4
 800bc52:	e03a      	b.n	800bcca <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc58:	f003 0301 	and.w	r3, r3, #1
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d004      	beq.n	800bc6a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	2201      	movs	r2, #1
 800bc64:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc66:	2301      	movs	r3, #1
 800bc68:	e02f      	b.n	800bcca <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bc6a:	68f8      	ldr	r0, [r7, #12]
 800bc6c:	f7ff fc46 	bl	800b4fc <SDMMC_GetCommandResponse>
 800bc70:	4603      	mov	r3, r0
 800bc72:	461a      	mov	r2, r3
 800bc74:	7afb      	ldrb	r3, [r7, #11]
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d001      	beq.n	800bc7e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	e025      	b.n	800bcca <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	4a16      	ldr	r2, [pc, #88]	@ (800bcdc <SDMMC_GetCmdResp6+0xec>)
 800bc82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bc84:	2100      	movs	r1, #0
 800bc86:	68f8      	ldr	r0, [r7, #12]
 800bc88:	f7ff fc45 	bl	800b516 <SDMMC_GetResponse>
 800bc8c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d106      	bne.n	800bca6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	0c1b      	lsrs	r3, r3, #16
 800bc9c:	b29a      	uxth	r2, r3
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800bca2:	2300      	movs	r3, #0
 800bca4:	e011      	b.n	800bcca <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d002      	beq.n	800bcb6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bcb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bcb4:	e009      	b.n	800bcca <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d002      	beq.n	800bcc6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bcc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bcc4:	e001      	b.n	800bcca <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bcc6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3720      	adds	r7, #32
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	bf00      	nop
 800bcd4:	24000014 	.word	0x24000014
 800bcd8:	10624dd3 	.word	0x10624dd3
 800bcdc:	002000c5 	.word	0x002000c5

0800bce0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b085      	sub	sp, #20
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bce8:	4b22      	ldr	r3, [pc, #136]	@ (800bd74 <SDMMC_GetCmdResp7+0x94>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a22      	ldr	r2, [pc, #136]	@ (800bd78 <SDMMC_GetCmdResp7+0x98>)
 800bcee:	fba2 2303 	umull	r2, r3, r2, r3
 800bcf2:	0a5b      	lsrs	r3, r3, #9
 800bcf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bcf8:	fb02 f303 	mul.w	r3, r2, r3
 800bcfc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	1e5a      	subs	r2, r3, #1
 800bd02:	60fa      	str	r2, [r7, #12]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d102      	bne.n	800bd0e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd08:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bd0c:	e02c      	b.n	800bd68 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd12:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d0ef      	beq.n	800bcfe <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d1ea      	bne.n	800bcfe <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd2c:	f003 0304 	and.w	r3, r3, #4
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d004      	beq.n	800bd3e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2204      	movs	r2, #4
 800bd38:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd3a:	2304      	movs	r3, #4
 800bd3c:	e014      	b.n	800bd68 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd42:	f003 0301 	and.w	r3, r3, #1
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d004      	beq.n	800bd54 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2201      	movs	r2, #1
 800bd4e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd50:	2301      	movs	r3, #1
 800bd52:	e009      	b.n	800bd68 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d002      	beq.n	800bd66 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2240      	movs	r2, #64	@ 0x40
 800bd64:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800bd66:	2300      	movs	r3, #0

}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3714      	adds	r7, #20
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr
 800bd74:	24000014 	.word	0x24000014
 800bd78:	10624dd3 	.word	0x10624dd3

0800bd7c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b085      	sub	sp, #20
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bd84:	4b11      	ldr	r3, [pc, #68]	@ (800bdcc <SDMMC_GetCmdError+0x50>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	4a11      	ldr	r2, [pc, #68]	@ (800bdd0 <SDMMC_GetCmdError+0x54>)
 800bd8a:	fba2 2303 	umull	r2, r3, r2, r3
 800bd8e:	0a5b      	lsrs	r3, r3, #9
 800bd90:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bd94:	fb02 f303 	mul.w	r3, r2, r3
 800bd98:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	1e5a      	subs	r2, r3, #1
 800bd9e:	60fa      	str	r2, [r7, #12]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d102      	bne.n	800bdaa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bda4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bda8:	e009      	b.n	800bdbe <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d0f1      	beq.n	800bd9a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	4a06      	ldr	r2, [pc, #24]	@ (800bdd4 <SDMMC_GetCmdError+0x58>)
 800bdba:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800bdbc:	2300      	movs	r3, #0
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3714      	adds	r7, #20
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc8:	4770      	bx	lr
 800bdca:	bf00      	nop
 800bdcc:	24000014 	.word	0x24000014
 800bdd0:	10624dd3 	.word	0x10624dd3
 800bdd4:	002000c5 	.word	0x002000c5

0800bdd8 <std>:
 800bdd8:	2300      	movs	r3, #0
 800bdda:	b510      	push	{r4, lr}
 800bddc:	4604      	mov	r4, r0
 800bdde:	e9c0 3300 	strd	r3, r3, [r0]
 800bde2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bde6:	6083      	str	r3, [r0, #8]
 800bde8:	8181      	strh	r1, [r0, #12]
 800bdea:	6643      	str	r3, [r0, #100]	@ 0x64
 800bdec:	81c2      	strh	r2, [r0, #14]
 800bdee:	6183      	str	r3, [r0, #24]
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	2208      	movs	r2, #8
 800bdf4:	305c      	adds	r0, #92	@ 0x5c
 800bdf6:	f000 f95a 	bl	800c0ae <memset>
 800bdfa:	4b0d      	ldr	r3, [pc, #52]	@ (800be30 <std+0x58>)
 800bdfc:	6263      	str	r3, [r4, #36]	@ 0x24
 800bdfe:	4b0d      	ldr	r3, [pc, #52]	@ (800be34 <std+0x5c>)
 800be00:	62a3      	str	r3, [r4, #40]	@ 0x28
 800be02:	4b0d      	ldr	r3, [pc, #52]	@ (800be38 <std+0x60>)
 800be04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800be06:	4b0d      	ldr	r3, [pc, #52]	@ (800be3c <std+0x64>)
 800be08:	6323      	str	r3, [r4, #48]	@ 0x30
 800be0a:	4b0d      	ldr	r3, [pc, #52]	@ (800be40 <std+0x68>)
 800be0c:	6224      	str	r4, [r4, #32]
 800be0e:	429c      	cmp	r4, r3
 800be10:	d006      	beq.n	800be20 <std+0x48>
 800be12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800be16:	4294      	cmp	r4, r2
 800be18:	d002      	beq.n	800be20 <std+0x48>
 800be1a:	33d0      	adds	r3, #208	@ 0xd0
 800be1c:	429c      	cmp	r4, r3
 800be1e:	d105      	bne.n	800be2c <std+0x54>
 800be20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800be24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be28:	f000 b9ec 	b.w	800c204 <__retarget_lock_init_recursive>
 800be2c:	bd10      	pop	{r4, pc}
 800be2e:	bf00      	nop
 800be30:	0800c029 	.word	0x0800c029
 800be34:	0800c04b 	.word	0x0800c04b
 800be38:	0800c083 	.word	0x0800c083
 800be3c:	0800c0a7 	.word	0x0800c0a7
 800be40:	24000d9c 	.word	0x24000d9c

0800be44 <stdio_exit_handler>:
 800be44:	4a02      	ldr	r2, [pc, #8]	@ (800be50 <stdio_exit_handler+0xc>)
 800be46:	4903      	ldr	r1, [pc, #12]	@ (800be54 <stdio_exit_handler+0x10>)
 800be48:	4803      	ldr	r0, [pc, #12]	@ (800be58 <stdio_exit_handler+0x14>)
 800be4a:	f000 b869 	b.w	800bf20 <_fwalk_sglue>
 800be4e:	bf00      	nop
 800be50:	24000024 	.word	0x24000024
 800be54:	0800cd55 	.word	0x0800cd55
 800be58:	24000034 	.word	0x24000034

0800be5c <cleanup_stdio>:
 800be5c:	6841      	ldr	r1, [r0, #4]
 800be5e:	4b0c      	ldr	r3, [pc, #48]	@ (800be90 <cleanup_stdio+0x34>)
 800be60:	4299      	cmp	r1, r3
 800be62:	b510      	push	{r4, lr}
 800be64:	4604      	mov	r4, r0
 800be66:	d001      	beq.n	800be6c <cleanup_stdio+0x10>
 800be68:	f000 ff74 	bl	800cd54 <_fflush_r>
 800be6c:	68a1      	ldr	r1, [r4, #8]
 800be6e:	4b09      	ldr	r3, [pc, #36]	@ (800be94 <cleanup_stdio+0x38>)
 800be70:	4299      	cmp	r1, r3
 800be72:	d002      	beq.n	800be7a <cleanup_stdio+0x1e>
 800be74:	4620      	mov	r0, r4
 800be76:	f000 ff6d 	bl	800cd54 <_fflush_r>
 800be7a:	68e1      	ldr	r1, [r4, #12]
 800be7c:	4b06      	ldr	r3, [pc, #24]	@ (800be98 <cleanup_stdio+0x3c>)
 800be7e:	4299      	cmp	r1, r3
 800be80:	d004      	beq.n	800be8c <cleanup_stdio+0x30>
 800be82:	4620      	mov	r0, r4
 800be84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be88:	f000 bf64 	b.w	800cd54 <_fflush_r>
 800be8c:	bd10      	pop	{r4, pc}
 800be8e:	bf00      	nop
 800be90:	24000d9c 	.word	0x24000d9c
 800be94:	24000e04 	.word	0x24000e04
 800be98:	24000e6c 	.word	0x24000e6c

0800be9c <global_stdio_init.part.0>:
 800be9c:	b510      	push	{r4, lr}
 800be9e:	4b0b      	ldr	r3, [pc, #44]	@ (800becc <global_stdio_init.part.0+0x30>)
 800bea0:	4c0b      	ldr	r4, [pc, #44]	@ (800bed0 <global_stdio_init.part.0+0x34>)
 800bea2:	4a0c      	ldr	r2, [pc, #48]	@ (800bed4 <global_stdio_init.part.0+0x38>)
 800bea4:	601a      	str	r2, [r3, #0]
 800bea6:	4620      	mov	r0, r4
 800bea8:	2200      	movs	r2, #0
 800beaa:	2104      	movs	r1, #4
 800beac:	f7ff ff94 	bl	800bdd8 <std>
 800beb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800beb4:	2201      	movs	r2, #1
 800beb6:	2109      	movs	r1, #9
 800beb8:	f7ff ff8e 	bl	800bdd8 <std>
 800bebc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bec0:	2202      	movs	r2, #2
 800bec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bec6:	2112      	movs	r1, #18
 800bec8:	f7ff bf86 	b.w	800bdd8 <std>
 800becc:	24000ed4 	.word	0x24000ed4
 800bed0:	24000d9c 	.word	0x24000d9c
 800bed4:	0800be45 	.word	0x0800be45

0800bed8 <__sfp_lock_acquire>:
 800bed8:	4801      	ldr	r0, [pc, #4]	@ (800bee0 <__sfp_lock_acquire+0x8>)
 800beda:	f000 b994 	b.w	800c206 <__retarget_lock_acquire_recursive>
 800bede:	bf00      	nop
 800bee0:	24000edd 	.word	0x24000edd

0800bee4 <__sfp_lock_release>:
 800bee4:	4801      	ldr	r0, [pc, #4]	@ (800beec <__sfp_lock_release+0x8>)
 800bee6:	f000 b98f 	b.w	800c208 <__retarget_lock_release_recursive>
 800beea:	bf00      	nop
 800beec:	24000edd 	.word	0x24000edd

0800bef0 <__sinit>:
 800bef0:	b510      	push	{r4, lr}
 800bef2:	4604      	mov	r4, r0
 800bef4:	f7ff fff0 	bl	800bed8 <__sfp_lock_acquire>
 800bef8:	6a23      	ldr	r3, [r4, #32]
 800befa:	b11b      	cbz	r3, 800bf04 <__sinit+0x14>
 800befc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf00:	f7ff bff0 	b.w	800bee4 <__sfp_lock_release>
 800bf04:	4b04      	ldr	r3, [pc, #16]	@ (800bf18 <__sinit+0x28>)
 800bf06:	6223      	str	r3, [r4, #32]
 800bf08:	4b04      	ldr	r3, [pc, #16]	@ (800bf1c <__sinit+0x2c>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d1f5      	bne.n	800befc <__sinit+0xc>
 800bf10:	f7ff ffc4 	bl	800be9c <global_stdio_init.part.0>
 800bf14:	e7f2      	b.n	800befc <__sinit+0xc>
 800bf16:	bf00      	nop
 800bf18:	0800be5d 	.word	0x0800be5d
 800bf1c:	24000ed4 	.word	0x24000ed4

0800bf20 <_fwalk_sglue>:
 800bf20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf24:	4607      	mov	r7, r0
 800bf26:	4688      	mov	r8, r1
 800bf28:	4614      	mov	r4, r2
 800bf2a:	2600      	movs	r6, #0
 800bf2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf30:	f1b9 0901 	subs.w	r9, r9, #1
 800bf34:	d505      	bpl.n	800bf42 <_fwalk_sglue+0x22>
 800bf36:	6824      	ldr	r4, [r4, #0]
 800bf38:	2c00      	cmp	r4, #0
 800bf3a:	d1f7      	bne.n	800bf2c <_fwalk_sglue+0xc>
 800bf3c:	4630      	mov	r0, r6
 800bf3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf42:	89ab      	ldrh	r3, [r5, #12]
 800bf44:	2b01      	cmp	r3, #1
 800bf46:	d907      	bls.n	800bf58 <_fwalk_sglue+0x38>
 800bf48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf4c:	3301      	adds	r3, #1
 800bf4e:	d003      	beq.n	800bf58 <_fwalk_sglue+0x38>
 800bf50:	4629      	mov	r1, r5
 800bf52:	4638      	mov	r0, r7
 800bf54:	47c0      	blx	r8
 800bf56:	4306      	orrs	r6, r0
 800bf58:	3568      	adds	r5, #104	@ 0x68
 800bf5a:	e7e9      	b.n	800bf30 <_fwalk_sglue+0x10>

0800bf5c <iprintf>:
 800bf5c:	b40f      	push	{r0, r1, r2, r3}
 800bf5e:	b507      	push	{r0, r1, r2, lr}
 800bf60:	4906      	ldr	r1, [pc, #24]	@ (800bf7c <iprintf+0x20>)
 800bf62:	ab04      	add	r3, sp, #16
 800bf64:	6808      	ldr	r0, [r1, #0]
 800bf66:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf6a:	6881      	ldr	r1, [r0, #8]
 800bf6c:	9301      	str	r3, [sp, #4]
 800bf6e:	f000 fbc7 	bl	800c700 <_vfiprintf_r>
 800bf72:	b003      	add	sp, #12
 800bf74:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf78:	b004      	add	sp, #16
 800bf7a:	4770      	bx	lr
 800bf7c:	24000030 	.word	0x24000030

0800bf80 <sniprintf>:
 800bf80:	b40c      	push	{r2, r3}
 800bf82:	b530      	push	{r4, r5, lr}
 800bf84:	4b17      	ldr	r3, [pc, #92]	@ (800bfe4 <sniprintf+0x64>)
 800bf86:	1e0c      	subs	r4, r1, #0
 800bf88:	681d      	ldr	r5, [r3, #0]
 800bf8a:	b09d      	sub	sp, #116	@ 0x74
 800bf8c:	da08      	bge.n	800bfa0 <sniprintf+0x20>
 800bf8e:	238b      	movs	r3, #139	@ 0x8b
 800bf90:	602b      	str	r3, [r5, #0]
 800bf92:	f04f 30ff 	mov.w	r0, #4294967295
 800bf96:	b01d      	add	sp, #116	@ 0x74
 800bf98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf9c:	b002      	add	sp, #8
 800bf9e:	4770      	bx	lr
 800bfa0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bfa4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bfa8:	bf14      	ite	ne
 800bfaa:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bfae:	4623      	moveq	r3, r4
 800bfb0:	9304      	str	r3, [sp, #16]
 800bfb2:	9307      	str	r3, [sp, #28]
 800bfb4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bfb8:	9002      	str	r0, [sp, #8]
 800bfba:	9006      	str	r0, [sp, #24]
 800bfbc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bfc0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bfc2:	ab21      	add	r3, sp, #132	@ 0x84
 800bfc4:	a902      	add	r1, sp, #8
 800bfc6:	4628      	mov	r0, r5
 800bfc8:	9301      	str	r3, [sp, #4]
 800bfca:	f000 fa73 	bl	800c4b4 <_svfiprintf_r>
 800bfce:	1c43      	adds	r3, r0, #1
 800bfd0:	bfbc      	itt	lt
 800bfd2:	238b      	movlt	r3, #139	@ 0x8b
 800bfd4:	602b      	strlt	r3, [r5, #0]
 800bfd6:	2c00      	cmp	r4, #0
 800bfd8:	d0dd      	beq.n	800bf96 <sniprintf+0x16>
 800bfda:	9b02      	ldr	r3, [sp, #8]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	701a      	strb	r2, [r3, #0]
 800bfe0:	e7d9      	b.n	800bf96 <sniprintf+0x16>
 800bfe2:	bf00      	nop
 800bfe4:	24000030 	.word	0x24000030

0800bfe8 <siprintf>:
 800bfe8:	b40e      	push	{r1, r2, r3}
 800bfea:	b500      	push	{lr}
 800bfec:	b09c      	sub	sp, #112	@ 0x70
 800bfee:	ab1d      	add	r3, sp, #116	@ 0x74
 800bff0:	9002      	str	r0, [sp, #8]
 800bff2:	9006      	str	r0, [sp, #24]
 800bff4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bff8:	4809      	ldr	r0, [pc, #36]	@ (800c020 <siprintf+0x38>)
 800bffa:	9107      	str	r1, [sp, #28]
 800bffc:	9104      	str	r1, [sp, #16]
 800bffe:	4909      	ldr	r1, [pc, #36]	@ (800c024 <siprintf+0x3c>)
 800c000:	f853 2b04 	ldr.w	r2, [r3], #4
 800c004:	9105      	str	r1, [sp, #20]
 800c006:	6800      	ldr	r0, [r0, #0]
 800c008:	9301      	str	r3, [sp, #4]
 800c00a:	a902      	add	r1, sp, #8
 800c00c:	f000 fa52 	bl	800c4b4 <_svfiprintf_r>
 800c010:	9b02      	ldr	r3, [sp, #8]
 800c012:	2200      	movs	r2, #0
 800c014:	701a      	strb	r2, [r3, #0]
 800c016:	b01c      	add	sp, #112	@ 0x70
 800c018:	f85d eb04 	ldr.w	lr, [sp], #4
 800c01c:	b003      	add	sp, #12
 800c01e:	4770      	bx	lr
 800c020:	24000030 	.word	0x24000030
 800c024:	ffff0208 	.word	0xffff0208

0800c028 <__sread>:
 800c028:	b510      	push	{r4, lr}
 800c02a:	460c      	mov	r4, r1
 800c02c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c030:	f000 f89a 	bl	800c168 <_read_r>
 800c034:	2800      	cmp	r0, #0
 800c036:	bfab      	itete	ge
 800c038:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c03a:	89a3      	ldrhlt	r3, [r4, #12]
 800c03c:	181b      	addge	r3, r3, r0
 800c03e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c042:	bfac      	ite	ge
 800c044:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c046:	81a3      	strhlt	r3, [r4, #12]
 800c048:	bd10      	pop	{r4, pc}

0800c04a <__swrite>:
 800c04a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c04e:	461f      	mov	r7, r3
 800c050:	898b      	ldrh	r3, [r1, #12]
 800c052:	05db      	lsls	r3, r3, #23
 800c054:	4605      	mov	r5, r0
 800c056:	460c      	mov	r4, r1
 800c058:	4616      	mov	r6, r2
 800c05a:	d505      	bpl.n	800c068 <__swrite+0x1e>
 800c05c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c060:	2302      	movs	r3, #2
 800c062:	2200      	movs	r2, #0
 800c064:	f000 f86e 	bl	800c144 <_lseek_r>
 800c068:	89a3      	ldrh	r3, [r4, #12]
 800c06a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c06e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c072:	81a3      	strh	r3, [r4, #12]
 800c074:	4632      	mov	r2, r6
 800c076:	463b      	mov	r3, r7
 800c078:	4628      	mov	r0, r5
 800c07a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c07e:	f000 b885 	b.w	800c18c <_write_r>

0800c082 <__sseek>:
 800c082:	b510      	push	{r4, lr}
 800c084:	460c      	mov	r4, r1
 800c086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c08a:	f000 f85b 	bl	800c144 <_lseek_r>
 800c08e:	1c43      	adds	r3, r0, #1
 800c090:	89a3      	ldrh	r3, [r4, #12]
 800c092:	bf15      	itete	ne
 800c094:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c096:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c09a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c09e:	81a3      	strheq	r3, [r4, #12]
 800c0a0:	bf18      	it	ne
 800c0a2:	81a3      	strhne	r3, [r4, #12]
 800c0a4:	bd10      	pop	{r4, pc}

0800c0a6 <__sclose>:
 800c0a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0aa:	f000 b83b 	b.w	800c124 <_close_r>

0800c0ae <memset>:
 800c0ae:	4402      	add	r2, r0
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d100      	bne.n	800c0b8 <memset+0xa>
 800c0b6:	4770      	bx	lr
 800c0b8:	f803 1b01 	strb.w	r1, [r3], #1
 800c0bc:	e7f9      	b.n	800c0b2 <memset+0x4>

0800c0be <strcat>:
 800c0be:	b510      	push	{r4, lr}
 800c0c0:	4602      	mov	r2, r0
 800c0c2:	7814      	ldrb	r4, [r2, #0]
 800c0c4:	4613      	mov	r3, r2
 800c0c6:	3201      	adds	r2, #1
 800c0c8:	2c00      	cmp	r4, #0
 800c0ca:	d1fa      	bne.n	800c0c2 <strcat+0x4>
 800c0cc:	3b01      	subs	r3, #1
 800c0ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c0d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c0d6:	2a00      	cmp	r2, #0
 800c0d8:	d1f9      	bne.n	800c0ce <strcat+0x10>
 800c0da:	bd10      	pop	{r4, pc}

0800c0dc <strchr>:
 800c0dc:	b2c9      	uxtb	r1, r1
 800c0de:	4603      	mov	r3, r0
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0e6:	b112      	cbz	r2, 800c0ee <strchr+0x12>
 800c0e8:	428a      	cmp	r2, r1
 800c0ea:	d1f9      	bne.n	800c0e0 <strchr+0x4>
 800c0ec:	4770      	bx	lr
 800c0ee:	2900      	cmp	r1, #0
 800c0f0:	bf18      	it	ne
 800c0f2:	2000      	movne	r0, #0
 800c0f4:	4770      	bx	lr

0800c0f6 <strstr>:
 800c0f6:	780a      	ldrb	r2, [r1, #0]
 800c0f8:	b570      	push	{r4, r5, r6, lr}
 800c0fa:	b96a      	cbnz	r2, 800c118 <strstr+0x22>
 800c0fc:	bd70      	pop	{r4, r5, r6, pc}
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d109      	bne.n	800c116 <strstr+0x20>
 800c102:	460c      	mov	r4, r1
 800c104:	4605      	mov	r5, r0
 800c106:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d0f6      	beq.n	800c0fc <strstr+0x6>
 800c10e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c112:	429e      	cmp	r6, r3
 800c114:	d0f7      	beq.n	800c106 <strstr+0x10>
 800c116:	3001      	adds	r0, #1
 800c118:	7803      	ldrb	r3, [r0, #0]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d1ef      	bne.n	800c0fe <strstr+0x8>
 800c11e:	4618      	mov	r0, r3
 800c120:	e7ec      	b.n	800c0fc <strstr+0x6>
	...

0800c124 <_close_r>:
 800c124:	b538      	push	{r3, r4, r5, lr}
 800c126:	4d06      	ldr	r5, [pc, #24]	@ (800c140 <_close_r+0x1c>)
 800c128:	2300      	movs	r3, #0
 800c12a:	4604      	mov	r4, r0
 800c12c:	4608      	mov	r0, r1
 800c12e:	602b      	str	r3, [r5, #0]
 800c130:	f7f5 fda2 	bl	8001c78 <_close>
 800c134:	1c43      	adds	r3, r0, #1
 800c136:	d102      	bne.n	800c13e <_close_r+0x1a>
 800c138:	682b      	ldr	r3, [r5, #0]
 800c13a:	b103      	cbz	r3, 800c13e <_close_r+0x1a>
 800c13c:	6023      	str	r3, [r4, #0]
 800c13e:	bd38      	pop	{r3, r4, r5, pc}
 800c140:	24000ed8 	.word	0x24000ed8

0800c144 <_lseek_r>:
 800c144:	b538      	push	{r3, r4, r5, lr}
 800c146:	4d07      	ldr	r5, [pc, #28]	@ (800c164 <_lseek_r+0x20>)
 800c148:	4604      	mov	r4, r0
 800c14a:	4608      	mov	r0, r1
 800c14c:	4611      	mov	r1, r2
 800c14e:	2200      	movs	r2, #0
 800c150:	602a      	str	r2, [r5, #0]
 800c152:	461a      	mov	r2, r3
 800c154:	f7f5 fdb7 	bl	8001cc6 <_lseek>
 800c158:	1c43      	adds	r3, r0, #1
 800c15a:	d102      	bne.n	800c162 <_lseek_r+0x1e>
 800c15c:	682b      	ldr	r3, [r5, #0]
 800c15e:	b103      	cbz	r3, 800c162 <_lseek_r+0x1e>
 800c160:	6023      	str	r3, [r4, #0]
 800c162:	bd38      	pop	{r3, r4, r5, pc}
 800c164:	24000ed8 	.word	0x24000ed8

0800c168 <_read_r>:
 800c168:	b538      	push	{r3, r4, r5, lr}
 800c16a:	4d07      	ldr	r5, [pc, #28]	@ (800c188 <_read_r+0x20>)
 800c16c:	4604      	mov	r4, r0
 800c16e:	4608      	mov	r0, r1
 800c170:	4611      	mov	r1, r2
 800c172:	2200      	movs	r2, #0
 800c174:	602a      	str	r2, [r5, #0]
 800c176:	461a      	mov	r2, r3
 800c178:	f7f5 fd45 	bl	8001c06 <_read>
 800c17c:	1c43      	adds	r3, r0, #1
 800c17e:	d102      	bne.n	800c186 <_read_r+0x1e>
 800c180:	682b      	ldr	r3, [r5, #0]
 800c182:	b103      	cbz	r3, 800c186 <_read_r+0x1e>
 800c184:	6023      	str	r3, [r4, #0]
 800c186:	bd38      	pop	{r3, r4, r5, pc}
 800c188:	24000ed8 	.word	0x24000ed8

0800c18c <_write_r>:
 800c18c:	b538      	push	{r3, r4, r5, lr}
 800c18e:	4d07      	ldr	r5, [pc, #28]	@ (800c1ac <_write_r+0x20>)
 800c190:	4604      	mov	r4, r0
 800c192:	4608      	mov	r0, r1
 800c194:	4611      	mov	r1, r2
 800c196:	2200      	movs	r2, #0
 800c198:	602a      	str	r2, [r5, #0]
 800c19a:	461a      	mov	r2, r3
 800c19c:	f7f5 fd50 	bl	8001c40 <_write>
 800c1a0:	1c43      	adds	r3, r0, #1
 800c1a2:	d102      	bne.n	800c1aa <_write_r+0x1e>
 800c1a4:	682b      	ldr	r3, [r5, #0]
 800c1a6:	b103      	cbz	r3, 800c1aa <_write_r+0x1e>
 800c1a8:	6023      	str	r3, [r4, #0]
 800c1aa:	bd38      	pop	{r3, r4, r5, pc}
 800c1ac:	24000ed8 	.word	0x24000ed8

0800c1b0 <__errno>:
 800c1b0:	4b01      	ldr	r3, [pc, #4]	@ (800c1b8 <__errno+0x8>)
 800c1b2:	6818      	ldr	r0, [r3, #0]
 800c1b4:	4770      	bx	lr
 800c1b6:	bf00      	nop
 800c1b8:	24000030 	.word	0x24000030

0800c1bc <__libc_init_array>:
 800c1bc:	b570      	push	{r4, r5, r6, lr}
 800c1be:	4d0d      	ldr	r5, [pc, #52]	@ (800c1f4 <__libc_init_array+0x38>)
 800c1c0:	4c0d      	ldr	r4, [pc, #52]	@ (800c1f8 <__libc_init_array+0x3c>)
 800c1c2:	1b64      	subs	r4, r4, r5
 800c1c4:	10a4      	asrs	r4, r4, #2
 800c1c6:	2600      	movs	r6, #0
 800c1c8:	42a6      	cmp	r6, r4
 800c1ca:	d109      	bne.n	800c1e0 <__libc_init_array+0x24>
 800c1cc:	4d0b      	ldr	r5, [pc, #44]	@ (800c1fc <__libc_init_array+0x40>)
 800c1ce:	4c0c      	ldr	r4, [pc, #48]	@ (800c200 <__libc_init_array+0x44>)
 800c1d0:	f000 ff6e 	bl	800d0b0 <_init>
 800c1d4:	1b64      	subs	r4, r4, r5
 800c1d6:	10a4      	asrs	r4, r4, #2
 800c1d8:	2600      	movs	r6, #0
 800c1da:	42a6      	cmp	r6, r4
 800c1dc:	d105      	bne.n	800c1ea <__libc_init_array+0x2e>
 800c1de:	bd70      	pop	{r4, r5, r6, pc}
 800c1e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1e4:	4798      	blx	r3
 800c1e6:	3601      	adds	r6, #1
 800c1e8:	e7ee      	b.n	800c1c8 <__libc_init_array+0xc>
 800c1ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1ee:	4798      	blx	r3
 800c1f0:	3601      	adds	r6, #1
 800c1f2:	e7f2      	b.n	800c1da <__libc_init_array+0x1e>
 800c1f4:	0800d2c4 	.word	0x0800d2c4
 800c1f8:	0800d2c4 	.word	0x0800d2c4
 800c1fc:	0800d2c4 	.word	0x0800d2c4
 800c200:	0800d2c8 	.word	0x0800d2c8

0800c204 <__retarget_lock_init_recursive>:
 800c204:	4770      	bx	lr

0800c206 <__retarget_lock_acquire_recursive>:
 800c206:	4770      	bx	lr

0800c208 <__retarget_lock_release_recursive>:
 800c208:	4770      	bx	lr
	...

0800c20c <_free_r>:
 800c20c:	b538      	push	{r3, r4, r5, lr}
 800c20e:	4605      	mov	r5, r0
 800c210:	2900      	cmp	r1, #0
 800c212:	d041      	beq.n	800c298 <_free_r+0x8c>
 800c214:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c218:	1f0c      	subs	r4, r1, #4
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	bfb8      	it	lt
 800c21e:	18e4      	addlt	r4, r4, r3
 800c220:	f000 f8e0 	bl	800c3e4 <__malloc_lock>
 800c224:	4a1d      	ldr	r2, [pc, #116]	@ (800c29c <_free_r+0x90>)
 800c226:	6813      	ldr	r3, [r2, #0]
 800c228:	b933      	cbnz	r3, 800c238 <_free_r+0x2c>
 800c22a:	6063      	str	r3, [r4, #4]
 800c22c:	6014      	str	r4, [r2, #0]
 800c22e:	4628      	mov	r0, r5
 800c230:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c234:	f000 b8dc 	b.w	800c3f0 <__malloc_unlock>
 800c238:	42a3      	cmp	r3, r4
 800c23a:	d908      	bls.n	800c24e <_free_r+0x42>
 800c23c:	6820      	ldr	r0, [r4, #0]
 800c23e:	1821      	adds	r1, r4, r0
 800c240:	428b      	cmp	r3, r1
 800c242:	bf01      	itttt	eq
 800c244:	6819      	ldreq	r1, [r3, #0]
 800c246:	685b      	ldreq	r3, [r3, #4]
 800c248:	1809      	addeq	r1, r1, r0
 800c24a:	6021      	streq	r1, [r4, #0]
 800c24c:	e7ed      	b.n	800c22a <_free_r+0x1e>
 800c24e:	461a      	mov	r2, r3
 800c250:	685b      	ldr	r3, [r3, #4]
 800c252:	b10b      	cbz	r3, 800c258 <_free_r+0x4c>
 800c254:	42a3      	cmp	r3, r4
 800c256:	d9fa      	bls.n	800c24e <_free_r+0x42>
 800c258:	6811      	ldr	r1, [r2, #0]
 800c25a:	1850      	adds	r0, r2, r1
 800c25c:	42a0      	cmp	r0, r4
 800c25e:	d10b      	bne.n	800c278 <_free_r+0x6c>
 800c260:	6820      	ldr	r0, [r4, #0]
 800c262:	4401      	add	r1, r0
 800c264:	1850      	adds	r0, r2, r1
 800c266:	4283      	cmp	r3, r0
 800c268:	6011      	str	r1, [r2, #0]
 800c26a:	d1e0      	bne.n	800c22e <_free_r+0x22>
 800c26c:	6818      	ldr	r0, [r3, #0]
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	6053      	str	r3, [r2, #4]
 800c272:	4408      	add	r0, r1
 800c274:	6010      	str	r0, [r2, #0]
 800c276:	e7da      	b.n	800c22e <_free_r+0x22>
 800c278:	d902      	bls.n	800c280 <_free_r+0x74>
 800c27a:	230c      	movs	r3, #12
 800c27c:	602b      	str	r3, [r5, #0]
 800c27e:	e7d6      	b.n	800c22e <_free_r+0x22>
 800c280:	6820      	ldr	r0, [r4, #0]
 800c282:	1821      	adds	r1, r4, r0
 800c284:	428b      	cmp	r3, r1
 800c286:	bf04      	itt	eq
 800c288:	6819      	ldreq	r1, [r3, #0]
 800c28a:	685b      	ldreq	r3, [r3, #4]
 800c28c:	6063      	str	r3, [r4, #4]
 800c28e:	bf04      	itt	eq
 800c290:	1809      	addeq	r1, r1, r0
 800c292:	6021      	streq	r1, [r4, #0]
 800c294:	6054      	str	r4, [r2, #4]
 800c296:	e7ca      	b.n	800c22e <_free_r+0x22>
 800c298:	bd38      	pop	{r3, r4, r5, pc}
 800c29a:	bf00      	nop
 800c29c:	24000ee4 	.word	0x24000ee4

0800c2a0 <sbrk_aligned>:
 800c2a0:	b570      	push	{r4, r5, r6, lr}
 800c2a2:	4e0f      	ldr	r6, [pc, #60]	@ (800c2e0 <sbrk_aligned+0x40>)
 800c2a4:	460c      	mov	r4, r1
 800c2a6:	6831      	ldr	r1, [r6, #0]
 800c2a8:	4605      	mov	r5, r0
 800c2aa:	b911      	cbnz	r1, 800c2b2 <sbrk_aligned+0x12>
 800c2ac:	f000 fe28 	bl	800cf00 <_sbrk_r>
 800c2b0:	6030      	str	r0, [r6, #0]
 800c2b2:	4621      	mov	r1, r4
 800c2b4:	4628      	mov	r0, r5
 800c2b6:	f000 fe23 	bl	800cf00 <_sbrk_r>
 800c2ba:	1c43      	adds	r3, r0, #1
 800c2bc:	d103      	bne.n	800c2c6 <sbrk_aligned+0x26>
 800c2be:	f04f 34ff 	mov.w	r4, #4294967295
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	bd70      	pop	{r4, r5, r6, pc}
 800c2c6:	1cc4      	adds	r4, r0, #3
 800c2c8:	f024 0403 	bic.w	r4, r4, #3
 800c2cc:	42a0      	cmp	r0, r4
 800c2ce:	d0f8      	beq.n	800c2c2 <sbrk_aligned+0x22>
 800c2d0:	1a21      	subs	r1, r4, r0
 800c2d2:	4628      	mov	r0, r5
 800c2d4:	f000 fe14 	bl	800cf00 <_sbrk_r>
 800c2d8:	3001      	adds	r0, #1
 800c2da:	d1f2      	bne.n	800c2c2 <sbrk_aligned+0x22>
 800c2dc:	e7ef      	b.n	800c2be <sbrk_aligned+0x1e>
 800c2de:	bf00      	nop
 800c2e0:	24000ee0 	.word	0x24000ee0

0800c2e4 <_malloc_r>:
 800c2e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2e8:	1ccd      	adds	r5, r1, #3
 800c2ea:	f025 0503 	bic.w	r5, r5, #3
 800c2ee:	3508      	adds	r5, #8
 800c2f0:	2d0c      	cmp	r5, #12
 800c2f2:	bf38      	it	cc
 800c2f4:	250c      	movcc	r5, #12
 800c2f6:	2d00      	cmp	r5, #0
 800c2f8:	4606      	mov	r6, r0
 800c2fa:	db01      	blt.n	800c300 <_malloc_r+0x1c>
 800c2fc:	42a9      	cmp	r1, r5
 800c2fe:	d904      	bls.n	800c30a <_malloc_r+0x26>
 800c300:	230c      	movs	r3, #12
 800c302:	6033      	str	r3, [r6, #0]
 800c304:	2000      	movs	r0, #0
 800c306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c30a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c3e0 <_malloc_r+0xfc>
 800c30e:	f000 f869 	bl	800c3e4 <__malloc_lock>
 800c312:	f8d8 3000 	ldr.w	r3, [r8]
 800c316:	461c      	mov	r4, r3
 800c318:	bb44      	cbnz	r4, 800c36c <_malloc_r+0x88>
 800c31a:	4629      	mov	r1, r5
 800c31c:	4630      	mov	r0, r6
 800c31e:	f7ff ffbf 	bl	800c2a0 <sbrk_aligned>
 800c322:	1c43      	adds	r3, r0, #1
 800c324:	4604      	mov	r4, r0
 800c326:	d158      	bne.n	800c3da <_malloc_r+0xf6>
 800c328:	f8d8 4000 	ldr.w	r4, [r8]
 800c32c:	4627      	mov	r7, r4
 800c32e:	2f00      	cmp	r7, #0
 800c330:	d143      	bne.n	800c3ba <_malloc_r+0xd6>
 800c332:	2c00      	cmp	r4, #0
 800c334:	d04b      	beq.n	800c3ce <_malloc_r+0xea>
 800c336:	6823      	ldr	r3, [r4, #0]
 800c338:	4639      	mov	r1, r7
 800c33a:	4630      	mov	r0, r6
 800c33c:	eb04 0903 	add.w	r9, r4, r3
 800c340:	f000 fdde 	bl	800cf00 <_sbrk_r>
 800c344:	4581      	cmp	r9, r0
 800c346:	d142      	bne.n	800c3ce <_malloc_r+0xea>
 800c348:	6821      	ldr	r1, [r4, #0]
 800c34a:	1a6d      	subs	r5, r5, r1
 800c34c:	4629      	mov	r1, r5
 800c34e:	4630      	mov	r0, r6
 800c350:	f7ff ffa6 	bl	800c2a0 <sbrk_aligned>
 800c354:	3001      	adds	r0, #1
 800c356:	d03a      	beq.n	800c3ce <_malloc_r+0xea>
 800c358:	6823      	ldr	r3, [r4, #0]
 800c35a:	442b      	add	r3, r5
 800c35c:	6023      	str	r3, [r4, #0]
 800c35e:	f8d8 3000 	ldr.w	r3, [r8]
 800c362:	685a      	ldr	r2, [r3, #4]
 800c364:	bb62      	cbnz	r2, 800c3c0 <_malloc_r+0xdc>
 800c366:	f8c8 7000 	str.w	r7, [r8]
 800c36a:	e00f      	b.n	800c38c <_malloc_r+0xa8>
 800c36c:	6822      	ldr	r2, [r4, #0]
 800c36e:	1b52      	subs	r2, r2, r5
 800c370:	d420      	bmi.n	800c3b4 <_malloc_r+0xd0>
 800c372:	2a0b      	cmp	r2, #11
 800c374:	d917      	bls.n	800c3a6 <_malloc_r+0xc2>
 800c376:	1961      	adds	r1, r4, r5
 800c378:	42a3      	cmp	r3, r4
 800c37a:	6025      	str	r5, [r4, #0]
 800c37c:	bf18      	it	ne
 800c37e:	6059      	strne	r1, [r3, #4]
 800c380:	6863      	ldr	r3, [r4, #4]
 800c382:	bf08      	it	eq
 800c384:	f8c8 1000 	streq.w	r1, [r8]
 800c388:	5162      	str	r2, [r4, r5]
 800c38a:	604b      	str	r3, [r1, #4]
 800c38c:	4630      	mov	r0, r6
 800c38e:	f000 f82f 	bl	800c3f0 <__malloc_unlock>
 800c392:	f104 000b 	add.w	r0, r4, #11
 800c396:	1d23      	adds	r3, r4, #4
 800c398:	f020 0007 	bic.w	r0, r0, #7
 800c39c:	1ac2      	subs	r2, r0, r3
 800c39e:	bf1c      	itt	ne
 800c3a0:	1a1b      	subne	r3, r3, r0
 800c3a2:	50a3      	strne	r3, [r4, r2]
 800c3a4:	e7af      	b.n	800c306 <_malloc_r+0x22>
 800c3a6:	6862      	ldr	r2, [r4, #4]
 800c3a8:	42a3      	cmp	r3, r4
 800c3aa:	bf0c      	ite	eq
 800c3ac:	f8c8 2000 	streq.w	r2, [r8]
 800c3b0:	605a      	strne	r2, [r3, #4]
 800c3b2:	e7eb      	b.n	800c38c <_malloc_r+0xa8>
 800c3b4:	4623      	mov	r3, r4
 800c3b6:	6864      	ldr	r4, [r4, #4]
 800c3b8:	e7ae      	b.n	800c318 <_malloc_r+0x34>
 800c3ba:	463c      	mov	r4, r7
 800c3bc:	687f      	ldr	r7, [r7, #4]
 800c3be:	e7b6      	b.n	800c32e <_malloc_r+0x4a>
 800c3c0:	461a      	mov	r2, r3
 800c3c2:	685b      	ldr	r3, [r3, #4]
 800c3c4:	42a3      	cmp	r3, r4
 800c3c6:	d1fb      	bne.n	800c3c0 <_malloc_r+0xdc>
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	6053      	str	r3, [r2, #4]
 800c3cc:	e7de      	b.n	800c38c <_malloc_r+0xa8>
 800c3ce:	230c      	movs	r3, #12
 800c3d0:	6033      	str	r3, [r6, #0]
 800c3d2:	4630      	mov	r0, r6
 800c3d4:	f000 f80c 	bl	800c3f0 <__malloc_unlock>
 800c3d8:	e794      	b.n	800c304 <_malloc_r+0x20>
 800c3da:	6005      	str	r5, [r0, #0]
 800c3dc:	e7d6      	b.n	800c38c <_malloc_r+0xa8>
 800c3de:	bf00      	nop
 800c3e0:	24000ee4 	.word	0x24000ee4

0800c3e4 <__malloc_lock>:
 800c3e4:	4801      	ldr	r0, [pc, #4]	@ (800c3ec <__malloc_lock+0x8>)
 800c3e6:	f7ff bf0e 	b.w	800c206 <__retarget_lock_acquire_recursive>
 800c3ea:	bf00      	nop
 800c3ec:	24000edc 	.word	0x24000edc

0800c3f0 <__malloc_unlock>:
 800c3f0:	4801      	ldr	r0, [pc, #4]	@ (800c3f8 <__malloc_unlock+0x8>)
 800c3f2:	f7ff bf09 	b.w	800c208 <__retarget_lock_release_recursive>
 800c3f6:	bf00      	nop
 800c3f8:	24000edc 	.word	0x24000edc

0800c3fc <__ssputs_r>:
 800c3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c400:	688e      	ldr	r6, [r1, #8]
 800c402:	461f      	mov	r7, r3
 800c404:	42be      	cmp	r6, r7
 800c406:	680b      	ldr	r3, [r1, #0]
 800c408:	4682      	mov	sl, r0
 800c40a:	460c      	mov	r4, r1
 800c40c:	4690      	mov	r8, r2
 800c40e:	d82d      	bhi.n	800c46c <__ssputs_r+0x70>
 800c410:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c414:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c418:	d026      	beq.n	800c468 <__ssputs_r+0x6c>
 800c41a:	6965      	ldr	r5, [r4, #20]
 800c41c:	6909      	ldr	r1, [r1, #16]
 800c41e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c422:	eba3 0901 	sub.w	r9, r3, r1
 800c426:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c42a:	1c7b      	adds	r3, r7, #1
 800c42c:	444b      	add	r3, r9
 800c42e:	106d      	asrs	r5, r5, #1
 800c430:	429d      	cmp	r5, r3
 800c432:	bf38      	it	cc
 800c434:	461d      	movcc	r5, r3
 800c436:	0553      	lsls	r3, r2, #21
 800c438:	d527      	bpl.n	800c48a <__ssputs_r+0x8e>
 800c43a:	4629      	mov	r1, r5
 800c43c:	f7ff ff52 	bl	800c2e4 <_malloc_r>
 800c440:	4606      	mov	r6, r0
 800c442:	b360      	cbz	r0, 800c49e <__ssputs_r+0xa2>
 800c444:	6921      	ldr	r1, [r4, #16]
 800c446:	464a      	mov	r2, r9
 800c448:	f000 fd6a 	bl	800cf20 <memcpy>
 800c44c:	89a3      	ldrh	r3, [r4, #12]
 800c44e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c456:	81a3      	strh	r3, [r4, #12]
 800c458:	6126      	str	r6, [r4, #16]
 800c45a:	6165      	str	r5, [r4, #20]
 800c45c:	444e      	add	r6, r9
 800c45e:	eba5 0509 	sub.w	r5, r5, r9
 800c462:	6026      	str	r6, [r4, #0]
 800c464:	60a5      	str	r5, [r4, #8]
 800c466:	463e      	mov	r6, r7
 800c468:	42be      	cmp	r6, r7
 800c46a:	d900      	bls.n	800c46e <__ssputs_r+0x72>
 800c46c:	463e      	mov	r6, r7
 800c46e:	6820      	ldr	r0, [r4, #0]
 800c470:	4632      	mov	r2, r6
 800c472:	4641      	mov	r1, r8
 800c474:	f000 fd2a 	bl	800cecc <memmove>
 800c478:	68a3      	ldr	r3, [r4, #8]
 800c47a:	1b9b      	subs	r3, r3, r6
 800c47c:	60a3      	str	r3, [r4, #8]
 800c47e:	6823      	ldr	r3, [r4, #0]
 800c480:	4433      	add	r3, r6
 800c482:	6023      	str	r3, [r4, #0]
 800c484:	2000      	movs	r0, #0
 800c486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c48a:	462a      	mov	r2, r5
 800c48c:	f000 fd56 	bl	800cf3c <_realloc_r>
 800c490:	4606      	mov	r6, r0
 800c492:	2800      	cmp	r0, #0
 800c494:	d1e0      	bne.n	800c458 <__ssputs_r+0x5c>
 800c496:	6921      	ldr	r1, [r4, #16]
 800c498:	4650      	mov	r0, sl
 800c49a:	f7ff feb7 	bl	800c20c <_free_r>
 800c49e:	230c      	movs	r3, #12
 800c4a0:	f8ca 3000 	str.w	r3, [sl]
 800c4a4:	89a3      	ldrh	r3, [r4, #12]
 800c4a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4aa:	81a3      	strh	r3, [r4, #12]
 800c4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c4b0:	e7e9      	b.n	800c486 <__ssputs_r+0x8a>
	...

0800c4b4 <_svfiprintf_r>:
 800c4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b8:	4698      	mov	r8, r3
 800c4ba:	898b      	ldrh	r3, [r1, #12]
 800c4bc:	061b      	lsls	r3, r3, #24
 800c4be:	b09d      	sub	sp, #116	@ 0x74
 800c4c0:	4607      	mov	r7, r0
 800c4c2:	460d      	mov	r5, r1
 800c4c4:	4614      	mov	r4, r2
 800c4c6:	d510      	bpl.n	800c4ea <_svfiprintf_r+0x36>
 800c4c8:	690b      	ldr	r3, [r1, #16]
 800c4ca:	b973      	cbnz	r3, 800c4ea <_svfiprintf_r+0x36>
 800c4cc:	2140      	movs	r1, #64	@ 0x40
 800c4ce:	f7ff ff09 	bl	800c2e4 <_malloc_r>
 800c4d2:	6028      	str	r0, [r5, #0]
 800c4d4:	6128      	str	r0, [r5, #16]
 800c4d6:	b930      	cbnz	r0, 800c4e6 <_svfiprintf_r+0x32>
 800c4d8:	230c      	movs	r3, #12
 800c4da:	603b      	str	r3, [r7, #0]
 800c4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c4e0:	b01d      	add	sp, #116	@ 0x74
 800c4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4e6:	2340      	movs	r3, #64	@ 0x40
 800c4e8:	616b      	str	r3, [r5, #20]
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4ee:	2320      	movs	r3, #32
 800c4f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c4f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4f8:	2330      	movs	r3, #48	@ 0x30
 800c4fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c698 <_svfiprintf_r+0x1e4>
 800c4fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c502:	f04f 0901 	mov.w	r9, #1
 800c506:	4623      	mov	r3, r4
 800c508:	469a      	mov	sl, r3
 800c50a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c50e:	b10a      	cbz	r2, 800c514 <_svfiprintf_r+0x60>
 800c510:	2a25      	cmp	r2, #37	@ 0x25
 800c512:	d1f9      	bne.n	800c508 <_svfiprintf_r+0x54>
 800c514:	ebba 0b04 	subs.w	fp, sl, r4
 800c518:	d00b      	beq.n	800c532 <_svfiprintf_r+0x7e>
 800c51a:	465b      	mov	r3, fp
 800c51c:	4622      	mov	r2, r4
 800c51e:	4629      	mov	r1, r5
 800c520:	4638      	mov	r0, r7
 800c522:	f7ff ff6b 	bl	800c3fc <__ssputs_r>
 800c526:	3001      	adds	r0, #1
 800c528:	f000 80a7 	beq.w	800c67a <_svfiprintf_r+0x1c6>
 800c52c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c52e:	445a      	add	r2, fp
 800c530:	9209      	str	r2, [sp, #36]	@ 0x24
 800c532:	f89a 3000 	ldrb.w	r3, [sl]
 800c536:	2b00      	cmp	r3, #0
 800c538:	f000 809f 	beq.w	800c67a <_svfiprintf_r+0x1c6>
 800c53c:	2300      	movs	r3, #0
 800c53e:	f04f 32ff 	mov.w	r2, #4294967295
 800c542:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c546:	f10a 0a01 	add.w	sl, sl, #1
 800c54a:	9304      	str	r3, [sp, #16]
 800c54c:	9307      	str	r3, [sp, #28]
 800c54e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c552:	931a      	str	r3, [sp, #104]	@ 0x68
 800c554:	4654      	mov	r4, sl
 800c556:	2205      	movs	r2, #5
 800c558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c55c:	484e      	ldr	r0, [pc, #312]	@ (800c698 <_svfiprintf_r+0x1e4>)
 800c55e:	f7f3 fedf 	bl	8000320 <memchr>
 800c562:	9a04      	ldr	r2, [sp, #16]
 800c564:	b9d8      	cbnz	r0, 800c59e <_svfiprintf_r+0xea>
 800c566:	06d0      	lsls	r0, r2, #27
 800c568:	bf44      	itt	mi
 800c56a:	2320      	movmi	r3, #32
 800c56c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c570:	0711      	lsls	r1, r2, #28
 800c572:	bf44      	itt	mi
 800c574:	232b      	movmi	r3, #43	@ 0x2b
 800c576:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c57a:	f89a 3000 	ldrb.w	r3, [sl]
 800c57e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c580:	d015      	beq.n	800c5ae <_svfiprintf_r+0xfa>
 800c582:	9a07      	ldr	r2, [sp, #28]
 800c584:	4654      	mov	r4, sl
 800c586:	2000      	movs	r0, #0
 800c588:	f04f 0c0a 	mov.w	ip, #10
 800c58c:	4621      	mov	r1, r4
 800c58e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c592:	3b30      	subs	r3, #48	@ 0x30
 800c594:	2b09      	cmp	r3, #9
 800c596:	d94b      	bls.n	800c630 <_svfiprintf_r+0x17c>
 800c598:	b1b0      	cbz	r0, 800c5c8 <_svfiprintf_r+0x114>
 800c59a:	9207      	str	r2, [sp, #28]
 800c59c:	e014      	b.n	800c5c8 <_svfiprintf_r+0x114>
 800c59e:	eba0 0308 	sub.w	r3, r0, r8
 800c5a2:	fa09 f303 	lsl.w	r3, r9, r3
 800c5a6:	4313      	orrs	r3, r2
 800c5a8:	9304      	str	r3, [sp, #16]
 800c5aa:	46a2      	mov	sl, r4
 800c5ac:	e7d2      	b.n	800c554 <_svfiprintf_r+0xa0>
 800c5ae:	9b03      	ldr	r3, [sp, #12]
 800c5b0:	1d19      	adds	r1, r3, #4
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	9103      	str	r1, [sp, #12]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	bfbb      	ittet	lt
 800c5ba:	425b      	neglt	r3, r3
 800c5bc:	f042 0202 	orrlt.w	r2, r2, #2
 800c5c0:	9307      	strge	r3, [sp, #28]
 800c5c2:	9307      	strlt	r3, [sp, #28]
 800c5c4:	bfb8      	it	lt
 800c5c6:	9204      	strlt	r2, [sp, #16]
 800c5c8:	7823      	ldrb	r3, [r4, #0]
 800c5ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800c5cc:	d10a      	bne.n	800c5e4 <_svfiprintf_r+0x130>
 800c5ce:	7863      	ldrb	r3, [r4, #1]
 800c5d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5d2:	d132      	bne.n	800c63a <_svfiprintf_r+0x186>
 800c5d4:	9b03      	ldr	r3, [sp, #12]
 800c5d6:	1d1a      	adds	r2, r3, #4
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	9203      	str	r2, [sp, #12]
 800c5dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c5e0:	3402      	adds	r4, #2
 800c5e2:	9305      	str	r3, [sp, #20]
 800c5e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c6a8 <_svfiprintf_r+0x1f4>
 800c5e8:	7821      	ldrb	r1, [r4, #0]
 800c5ea:	2203      	movs	r2, #3
 800c5ec:	4650      	mov	r0, sl
 800c5ee:	f7f3 fe97 	bl	8000320 <memchr>
 800c5f2:	b138      	cbz	r0, 800c604 <_svfiprintf_r+0x150>
 800c5f4:	9b04      	ldr	r3, [sp, #16]
 800c5f6:	eba0 000a 	sub.w	r0, r0, sl
 800c5fa:	2240      	movs	r2, #64	@ 0x40
 800c5fc:	4082      	lsls	r2, r0
 800c5fe:	4313      	orrs	r3, r2
 800c600:	3401      	adds	r4, #1
 800c602:	9304      	str	r3, [sp, #16]
 800c604:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c608:	4824      	ldr	r0, [pc, #144]	@ (800c69c <_svfiprintf_r+0x1e8>)
 800c60a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c60e:	2206      	movs	r2, #6
 800c610:	f7f3 fe86 	bl	8000320 <memchr>
 800c614:	2800      	cmp	r0, #0
 800c616:	d036      	beq.n	800c686 <_svfiprintf_r+0x1d2>
 800c618:	4b21      	ldr	r3, [pc, #132]	@ (800c6a0 <_svfiprintf_r+0x1ec>)
 800c61a:	bb1b      	cbnz	r3, 800c664 <_svfiprintf_r+0x1b0>
 800c61c:	9b03      	ldr	r3, [sp, #12]
 800c61e:	3307      	adds	r3, #7
 800c620:	f023 0307 	bic.w	r3, r3, #7
 800c624:	3308      	adds	r3, #8
 800c626:	9303      	str	r3, [sp, #12]
 800c628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c62a:	4433      	add	r3, r6
 800c62c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c62e:	e76a      	b.n	800c506 <_svfiprintf_r+0x52>
 800c630:	fb0c 3202 	mla	r2, ip, r2, r3
 800c634:	460c      	mov	r4, r1
 800c636:	2001      	movs	r0, #1
 800c638:	e7a8      	b.n	800c58c <_svfiprintf_r+0xd8>
 800c63a:	2300      	movs	r3, #0
 800c63c:	3401      	adds	r4, #1
 800c63e:	9305      	str	r3, [sp, #20]
 800c640:	4619      	mov	r1, r3
 800c642:	f04f 0c0a 	mov.w	ip, #10
 800c646:	4620      	mov	r0, r4
 800c648:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c64c:	3a30      	subs	r2, #48	@ 0x30
 800c64e:	2a09      	cmp	r2, #9
 800c650:	d903      	bls.n	800c65a <_svfiprintf_r+0x1a6>
 800c652:	2b00      	cmp	r3, #0
 800c654:	d0c6      	beq.n	800c5e4 <_svfiprintf_r+0x130>
 800c656:	9105      	str	r1, [sp, #20]
 800c658:	e7c4      	b.n	800c5e4 <_svfiprintf_r+0x130>
 800c65a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c65e:	4604      	mov	r4, r0
 800c660:	2301      	movs	r3, #1
 800c662:	e7f0      	b.n	800c646 <_svfiprintf_r+0x192>
 800c664:	ab03      	add	r3, sp, #12
 800c666:	9300      	str	r3, [sp, #0]
 800c668:	462a      	mov	r2, r5
 800c66a:	4b0e      	ldr	r3, [pc, #56]	@ (800c6a4 <_svfiprintf_r+0x1f0>)
 800c66c:	a904      	add	r1, sp, #16
 800c66e:	4638      	mov	r0, r7
 800c670:	f3af 8000 	nop.w
 800c674:	1c42      	adds	r2, r0, #1
 800c676:	4606      	mov	r6, r0
 800c678:	d1d6      	bne.n	800c628 <_svfiprintf_r+0x174>
 800c67a:	89ab      	ldrh	r3, [r5, #12]
 800c67c:	065b      	lsls	r3, r3, #25
 800c67e:	f53f af2d 	bmi.w	800c4dc <_svfiprintf_r+0x28>
 800c682:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c684:	e72c      	b.n	800c4e0 <_svfiprintf_r+0x2c>
 800c686:	ab03      	add	r3, sp, #12
 800c688:	9300      	str	r3, [sp, #0]
 800c68a:	462a      	mov	r2, r5
 800c68c:	4b05      	ldr	r3, [pc, #20]	@ (800c6a4 <_svfiprintf_r+0x1f0>)
 800c68e:	a904      	add	r1, sp, #16
 800c690:	4638      	mov	r0, r7
 800c692:	f000 f9bb 	bl	800ca0c <_printf_i>
 800c696:	e7ed      	b.n	800c674 <_svfiprintf_r+0x1c0>
 800c698:	0800d288 	.word	0x0800d288
 800c69c:	0800d292 	.word	0x0800d292
 800c6a0:	00000000 	.word	0x00000000
 800c6a4:	0800c3fd 	.word	0x0800c3fd
 800c6a8:	0800d28e 	.word	0x0800d28e

0800c6ac <__sfputc_r>:
 800c6ac:	6893      	ldr	r3, [r2, #8]
 800c6ae:	3b01      	subs	r3, #1
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	b410      	push	{r4}
 800c6b4:	6093      	str	r3, [r2, #8]
 800c6b6:	da08      	bge.n	800c6ca <__sfputc_r+0x1e>
 800c6b8:	6994      	ldr	r4, [r2, #24]
 800c6ba:	42a3      	cmp	r3, r4
 800c6bc:	db01      	blt.n	800c6c2 <__sfputc_r+0x16>
 800c6be:	290a      	cmp	r1, #10
 800c6c0:	d103      	bne.n	800c6ca <__sfputc_r+0x1e>
 800c6c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6c6:	f000 bb6d 	b.w	800cda4 <__swbuf_r>
 800c6ca:	6813      	ldr	r3, [r2, #0]
 800c6cc:	1c58      	adds	r0, r3, #1
 800c6ce:	6010      	str	r0, [r2, #0]
 800c6d0:	7019      	strb	r1, [r3, #0]
 800c6d2:	4608      	mov	r0, r1
 800c6d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6d8:	4770      	bx	lr

0800c6da <__sfputs_r>:
 800c6da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6dc:	4606      	mov	r6, r0
 800c6de:	460f      	mov	r7, r1
 800c6e0:	4614      	mov	r4, r2
 800c6e2:	18d5      	adds	r5, r2, r3
 800c6e4:	42ac      	cmp	r4, r5
 800c6e6:	d101      	bne.n	800c6ec <__sfputs_r+0x12>
 800c6e8:	2000      	movs	r0, #0
 800c6ea:	e007      	b.n	800c6fc <__sfputs_r+0x22>
 800c6ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6f0:	463a      	mov	r2, r7
 800c6f2:	4630      	mov	r0, r6
 800c6f4:	f7ff ffda 	bl	800c6ac <__sfputc_r>
 800c6f8:	1c43      	adds	r3, r0, #1
 800c6fa:	d1f3      	bne.n	800c6e4 <__sfputs_r+0xa>
 800c6fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c700 <_vfiprintf_r>:
 800c700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c704:	460d      	mov	r5, r1
 800c706:	b09d      	sub	sp, #116	@ 0x74
 800c708:	4614      	mov	r4, r2
 800c70a:	4698      	mov	r8, r3
 800c70c:	4606      	mov	r6, r0
 800c70e:	b118      	cbz	r0, 800c718 <_vfiprintf_r+0x18>
 800c710:	6a03      	ldr	r3, [r0, #32]
 800c712:	b90b      	cbnz	r3, 800c718 <_vfiprintf_r+0x18>
 800c714:	f7ff fbec 	bl	800bef0 <__sinit>
 800c718:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c71a:	07d9      	lsls	r1, r3, #31
 800c71c:	d405      	bmi.n	800c72a <_vfiprintf_r+0x2a>
 800c71e:	89ab      	ldrh	r3, [r5, #12]
 800c720:	059a      	lsls	r2, r3, #22
 800c722:	d402      	bmi.n	800c72a <_vfiprintf_r+0x2a>
 800c724:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c726:	f7ff fd6e 	bl	800c206 <__retarget_lock_acquire_recursive>
 800c72a:	89ab      	ldrh	r3, [r5, #12]
 800c72c:	071b      	lsls	r3, r3, #28
 800c72e:	d501      	bpl.n	800c734 <_vfiprintf_r+0x34>
 800c730:	692b      	ldr	r3, [r5, #16]
 800c732:	b99b      	cbnz	r3, 800c75c <_vfiprintf_r+0x5c>
 800c734:	4629      	mov	r1, r5
 800c736:	4630      	mov	r0, r6
 800c738:	f000 fb72 	bl	800ce20 <__swsetup_r>
 800c73c:	b170      	cbz	r0, 800c75c <_vfiprintf_r+0x5c>
 800c73e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c740:	07dc      	lsls	r4, r3, #31
 800c742:	d504      	bpl.n	800c74e <_vfiprintf_r+0x4e>
 800c744:	f04f 30ff 	mov.w	r0, #4294967295
 800c748:	b01d      	add	sp, #116	@ 0x74
 800c74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c74e:	89ab      	ldrh	r3, [r5, #12]
 800c750:	0598      	lsls	r0, r3, #22
 800c752:	d4f7      	bmi.n	800c744 <_vfiprintf_r+0x44>
 800c754:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c756:	f7ff fd57 	bl	800c208 <__retarget_lock_release_recursive>
 800c75a:	e7f3      	b.n	800c744 <_vfiprintf_r+0x44>
 800c75c:	2300      	movs	r3, #0
 800c75e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c760:	2320      	movs	r3, #32
 800c762:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c766:	f8cd 800c 	str.w	r8, [sp, #12]
 800c76a:	2330      	movs	r3, #48	@ 0x30
 800c76c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c91c <_vfiprintf_r+0x21c>
 800c770:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c774:	f04f 0901 	mov.w	r9, #1
 800c778:	4623      	mov	r3, r4
 800c77a:	469a      	mov	sl, r3
 800c77c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c780:	b10a      	cbz	r2, 800c786 <_vfiprintf_r+0x86>
 800c782:	2a25      	cmp	r2, #37	@ 0x25
 800c784:	d1f9      	bne.n	800c77a <_vfiprintf_r+0x7a>
 800c786:	ebba 0b04 	subs.w	fp, sl, r4
 800c78a:	d00b      	beq.n	800c7a4 <_vfiprintf_r+0xa4>
 800c78c:	465b      	mov	r3, fp
 800c78e:	4622      	mov	r2, r4
 800c790:	4629      	mov	r1, r5
 800c792:	4630      	mov	r0, r6
 800c794:	f7ff ffa1 	bl	800c6da <__sfputs_r>
 800c798:	3001      	adds	r0, #1
 800c79a:	f000 80a7 	beq.w	800c8ec <_vfiprintf_r+0x1ec>
 800c79e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c7a0:	445a      	add	r2, fp
 800c7a2:	9209      	str	r2, [sp, #36]	@ 0x24
 800c7a4:	f89a 3000 	ldrb.w	r3, [sl]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	f000 809f 	beq.w	800c8ec <_vfiprintf_r+0x1ec>
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c7b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7b8:	f10a 0a01 	add.w	sl, sl, #1
 800c7bc:	9304      	str	r3, [sp, #16]
 800c7be:	9307      	str	r3, [sp, #28]
 800c7c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c7c4:	931a      	str	r3, [sp, #104]	@ 0x68
 800c7c6:	4654      	mov	r4, sl
 800c7c8:	2205      	movs	r2, #5
 800c7ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7ce:	4853      	ldr	r0, [pc, #332]	@ (800c91c <_vfiprintf_r+0x21c>)
 800c7d0:	f7f3 fda6 	bl	8000320 <memchr>
 800c7d4:	9a04      	ldr	r2, [sp, #16]
 800c7d6:	b9d8      	cbnz	r0, 800c810 <_vfiprintf_r+0x110>
 800c7d8:	06d1      	lsls	r1, r2, #27
 800c7da:	bf44      	itt	mi
 800c7dc:	2320      	movmi	r3, #32
 800c7de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c7e2:	0713      	lsls	r3, r2, #28
 800c7e4:	bf44      	itt	mi
 800c7e6:	232b      	movmi	r3, #43	@ 0x2b
 800c7e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c7ec:	f89a 3000 	ldrb.w	r3, [sl]
 800c7f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7f2:	d015      	beq.n	800c820 <_vfiprintf_r+0x120>
 800c7f4:	9a07      	ldr	r2, [sp, #28]
 800c7f6:	4654      	mov	r4, sl
 800c7f8:	2000      	movs	r0, #0
 800c7fa:	f04f 0c0a 	mov.w	ip, #10
 800c7fe:	4621      	mov	r1, r4
 800c800:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c804:	3b30      	subs	r3, #48	@ 0x30
 800c806:	2b09      	cmp	r3, #9
 800c808:	d94b      	bls.n	800c8a2 <_vfiprintf_r+0x1a2>
 800c80a:	b1b0      	cbz	r0, 800c83a <_vfiprintf_r+0x13a>
 800c80c:	9207      	str	r2, [sp, #28]
 800c80e:	e014      	b.n	800c83a <_vfiprintf_r+0x13a>
 800c810:	eba0 0308 	sub.w	r3, r0, r8
 800c814:	fa09 f303 	lsl.w	r3, r9, r3
 800c818:	4313      	orrs	r3, r2
 800c81a:	9304      	str	r3, [sp, #16]
 800c81c:	46a2      	mov	sl, r4
 800c81e:	e7d2      	b.n	800c7c6 <_vfiprintf_r+0xc6>
 800c820:	9b03      	ldr	r3, [sp, #12]
 800c822:	1d19      	adds	r1, r3, #4
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	9103      	str	r1, [sp, #12]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	bfbb      	ittet	lt
 800c82c:	425b      	neglt	r3, r3
 800c82e:	f042 0202 	orrlt.w	r2, r2, #2
 800c832:	9307      	strge	r3, [sp, #28]
 800c834:	9307      	strlt	r3, [sp, #28]
 800c836:	bfb8      	it	lt
 800c838:	9204      	strlt	r2, [sp, #16]
 800c83a:	7823      	ldrb	r3, [r4, #0]
 800c83c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c83e:	d10a      	bne.n	800c856 <_vfiprintf_r+0x156>
 800c840:	7863      	ldrb	r3, [r4, #1]
 800c842:	2b2a      	cmp	r3, #42	@ 0x2a
 800c844:	d132      	bne.n	800c8ac <_vfiprintf_r+0x1ac>
 800c846:	9b03      	ldr	r3, [sp, #12]
 800c848:	1d1a      	adds	r2, r3, #4
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	9203      	str	r2, [sp, #12]
 800c84e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c852:	3402      	adds	r4, #2
 800c854:	9305      	str	r3, [sp, #20]
 800c856:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c92c <_vfiprintf_r+0x22c>
 800c85a:	7821      	ldrb	r1, [r4, #0]
 800c85c:	2203      	movs	r2, #3
 800c85e:	4650      	mov	r0, sl
 800c860:	f7f3 fd5e 	bl	8000320 <memchr>
 800c864:	b138      	cbz	r0, 800c876 <_vfiprintf_r+0x176>
 800c866:	9b04      	ldr	r3, [sp, #16]
 800c868:	eba0 000a 	sub.w	r0, r0, sl
 800c86c:	2240      	movs	r2, #64	@ 0x40
 800c86e:	4082      	lsls	r2, r0
 800c870:	4313      	orrs	r3, r2
 800c872:	3401      	adds	r4, #1
 800c874:	9304      	str	r3, [sp, #16]
 800c876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c87a:	4829      	ldr	r0, [pc, #164]	@ (800c920 <_vfiprintf_r+0x220>)
 800c87c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c880:	2206      	movs	r2, #6
 800c882:	f7f3 fd4d 	bl	8000320 <memchr>
 800c886:	2800      	cmp	r0, #0
 800c888:	d03f      	beq.n	800c90a <_vfiprintf_r+0x20a>
 800c88a:	4b26      	ldr	r3, [pc, #152]	@ (800c924 <_vfiprintf_r+0x224>)
 800c88c:	bb1b      	cbnz	r3, 800c8d6 <_vfiprintf_r+0x1d6>
 800c88e:	9b03      	ldr	r3, [sp, #12]
 800c890:	3307      	adds	r3, #7
 800c892:	f023 0307 	bic.w	r3, r3, #7
 800c896:	3308      	adds	r3, #8
 800c898:	9303      	str	r3, [sp, #12]
 800c89a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c89c:	443b      	add	r3, r7
 800c89e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8a0:	e76a      	b.n	800c778 <_vfiprintf_r+0x78>
 800c8a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8a6:	460c      	mov	r4, r1
 800c8a8:	2001      	movs	r0, #1
 800c8aa:	e7a8      	b.n	800c7fe <_vfiprintf_r+0xfe>
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	3401      	adds	r4, #1
 800c8b0:	9305      	str	r3, [sp, #20]
 800c8b2:	4619      	mov	r1, r3
 800c8b4:	f04f 0c0a 	mov.w	ip, #10
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8be:	3a30      	subs	r2, #48	@ 0x30
 800c8c0:	2a09      	cmp	r2, #9
 800c8c2:	d903      	bls.n	800c8cc <_vfiprintf_r+0x1cc>
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d0c6      	beq.n	800c856 <_vfiprintf_r+0x156>
 800c8c8:	9105      	str	r1, [sp, #20]
 800c8ca:	e7c4      	b.n	800c856 <_vfiprintf_r+0x156>
 800c8cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8d0:	4604      	mov	r4, r0
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	e7f0      	b.n	800c8b8 <_vfiprintf_r+0x1b8>
 800c8d6:	ab03      	add	r3, sp, #12
 800c8d8:	9300      	str	r3, [sp, #0]
 800c8da:	462a      	mov	r2, r5
 800c8dc:	4b12      	ldr	r3, [pc, #72]	@ (800c928 <_vfiprintf_r+0x228>)
 800c8de:	a904      	add	r1, sp, #16
 800c8e0:	4630      	mov	r0, r6
 800c8e2:	f3af 8000 	nop.w
 800c8e6:	4607      	mov	r7, r0
 800c8e8:	1c78      	adds	r0, r7, #1
 800c8ea:	d1d6      	bne.n	800c89a <_vfiprintf_r+0x19a>
 800c8ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c8ee:	07d9      	lsls	r1, r3, #31
 800c8f0:	d405      	bmi.n	800c8fe <_vfiprintf_r+0x1fe>
 800c8f2:	89ab      	ldrh	r3, [r5, #12]
 800c8f4:	059a      	lsls	r2, r3, #22
 800c8f6:	d402      	bmi.n	800c8fe <_vfiprintf_r+0x1fe>
 800c8f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c8fa:	f7ff fc85 	bl	800c208 <__retarget_lock_release_recursive>
 800c8fe:	89ab      	ldrh	r3, [r5, #12]
 800c900:	065b      	lsls	r3, r3, #25
 800c902:	f53f af1f 	bmi.w	800c744 <_vfiprintf_r+0x44>
 800c906:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c908:	e71e      	b.n	800c748 <_vfiprintf_r+0x48>
 800c90a:	ab03      	add	r3, sp, #12
 800c90c:	9300      	str	r3, [sp, #0]
 800c90e:	462a      	mov	r2, r5
 800c910:	4b05      	ldr	r3, [pc, #20]	@ (800c928 <_vfiprintf_r+0x228>)
 800c912:	a904      	add	r1, sp, #16
 800c914:	4630      	mov	r0, r6
 800c916:	f000 f879 	bl	800ca0c <_printf_i>
 800c91a:	e7e4      	b.n	800c8e6 <_vfiprintf_r+0x1e6>
 800c91c:	0800d288 	.word	0x0800d288
 800c920:	0800d292 	.word	0x0800d292
 800c924:	00000000 	.word	0x00000000
 800c928:	0800c6db 	.word	0x0800c6db
 800c92c:	0800d28e 	.word	0x0800d28e

0800c930 <_printf_common>:
 800c930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c934:	4616      	mov	r6, r2
 800c936:	4698      	mov	r8, r3
 800c938:	688a      	ldr	r2, [r1, #8]
 800c93a:	690b      	ldr	r3, [r1, #16]
 800c93c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c940:	4293      	cmp	r3, r2
 800c942:	bfb8      	it	lt
 800c944:	4613      	movlt	r3, r2
 800c946:	6033      	str	r3, [r6, #0]
 800c948:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c94c:	4607      	mov	r7, r0
 800c94e:	460c      	mov	r4, r1
 800c950:	b10a      	cbz	r2, 800c956 <_printf_common+0x26>
 800c952:	3301      	adds	r3, #1
 800c954:	6033      	str	r3, [r6, #0]
 800c956:	6823      	ldr	r3, [r4, #0]
 800c958:	0699      	lsls	r1, r3, #26
 800c95a:	bf42      	ittt	mi
 800c95c:	6833      	ldrmi	r3, [r6, #0]
 800c95e:	3302      	addmi	r3, #2
 800c960:	6033      	strmi	r3, [r6, #0]
 800c962:	6825      	ldr	r5, [r4, #0]
 800c964:	f015 0506 	ands.w	r5, r5, #6
 800c968:	d106      	bne.n	800c978 <_printf_common+0x48>
 800c96a:	f104 0a19 	add.w	sl, r4, #25
 800c96e:	68e3      	ldr	r3, [r4, #12]
 800c970:	6832      	ldr	r2, [r6, #0]
 800c972:	1a9b      	subs	r3, r3, r2
 800c974:	42ab      	cmp	r3, r5
 800c976:	dc26      	bgt.n	800c9c6 <_printf_common+0x96>
 800c978:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c97c:	6822      	ldr	r2, [r4, #0]
 800c97e:	3b00      	subs	r3, #0
 800c980:	bf18      	it	ne
 800c982:	2301      	movne	r3, #1
 800c984:	0692      	lsls	r2, r2, #26
 800c986:	d42b      	bmi.n	800c9e0 <_printf_common+0xb0>
 800c988:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c98c:	4641      	mov	r1, r8
 800c98e:	4638      	mov	r0, r7
 800c990:	47c8      	blx	r9
 800c992:	3001      	adds	r0, #1
 800c994:	d01e      	beq.n	800c9d4 <_printf_common+0xa4>
 800c996:	6823      	ldr	r3, [r4, #0]
 800c998:	6922      	ldr	r2, [r4, #16]
 800c99a:	f003 0306 	and.w	r3, r3, #6
 800c99e:	2b04      	cmp	r3, #4
 800c9a0:	bf02      	ittt	eq
 800c9a2:	68e5      	ldreq	r5, [r4, #12]
 800c9a4:	6833      	ldreq	r3, [r6, #0]
 800c9a6:	1aed      	subeq	r5, r5, r3
 800c9a8:	68a3      	ldr	r3, [r4, #8]
 800c9aa:	bf0c      	ite	eq
 800c9ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c9b0:	2500      	movne	r5, #0
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	bfc4      	itt	gt
 800c9b6:	1a9b      	subgt	r3, r3, r2
 800c9b8:	18ed      	addgt	r5, r5, r3
 800c9ba:	2600      	movs	r6, #0
 800c9bc:	341a      	adds	r4, #26
 800c9be:	42b5      	cmp	r5, r6
 800c9c0:	d11a      	bne.n	800c9f8 <_printf_common+0xc8>
 800c9c2:	2000      	movs	r0, #0
 800c9c4:	e008      	b.n	800c9d8 <_printf_common+0xa8>
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	4652      	mov	r2, sl
 800c9ca:	4641      	mov	r1, r8
 800c9cc:	4638      	mov	r0, r7
 800c9ce:	47c8      	blx	r9
 800c9d0:	3001      	adds	r0, #1
 800c9d2:	d103      	bne.n	800c9dc <_printf_common+0xac>
 800c9d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c9d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9dc:	3501      	adds	r5, #1
 800c9de:	e7c6      	b.n	800c96e <_printf_common+0x3e>
 800c9e0:	18e1      	adds	r1, r4, r3
 800c9e2:	1c5a      	adds	r2, r3, #1
 800c9e4:	2030      	movs	r0, #48	@ 0x30
 800c9e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c9ea:	4422      	add	r2, r4
 800c9ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c9f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c9f4:	3302      	adds	r3, #2
 800c9f6:	e7c7      	b.n	800c988 <_printf_common+0x58>
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	4622      	mov	r2, r4
 800c9fc:	4641      	mov	r1, r8
 800c9fe:	4638      	mov	r0, r7
 800ca00:	47c8      	blx	r9
 800ca02:	3001      	adds	r0, #1
 800ca04:	d0e6      	beq.n	800c9d4 <_printf_common+0xa4>
 800ca06:	3601      	adds	r6, #1
 800ca08:	e7d9      	b.n	800c9be <_printf_common+0x8e>
	...

0800ca0c <_printf_i>:
 800ca0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca10:	7e0f      	ldrb	r7, [r1, #24]
 800ca12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ca14:	2f78      	cmp	r7, #120	@ 0x78
 800ca16:	4691      	mov	r9, r2
 800ca18:	4680      	mov	r8, r0
 800ca1a:	460c      	mov	r4, r1
 800ca1c:	469a      	mov	sl, r3
 800ca1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ca22:	d807      	bhi.n	800ca34 <_printf_i+0x28>
 800ca24:	2f62      	cmp	r7, #98	@ 0x62
 800ca26:	d80a      	bhi.n	800ca3e <_printf_i+0x32>
 800ca28:	2f00      	cmp	r7, #0
 800ca2a:	f000 80d2 	beq.w	800cbd2 <_printf_i+0x1c6>
 800ca2e:	2f58      	cmp	r7, #88	@ 0x58
 800ca30:	f000 80b9 	beq.w	800cba6 <_printf_i+0x19a>
 800ca34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ca38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ca3c:	e03a      	b.n	800cab4 <_printf_i+0xa8>
 800ca3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ca42:	2b15      	cmp	r3, #21
 800ca44:	d8f6      	bhi.n	800ca34 <_printf_i+0x28>
 800ca46:	a101      	add	r1, pc, #4	@ (adr r1, 800ca4c <_printf_i+0x40>)
 800ca48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca4c:	0800caa5 	.word	0x0800caa5
 800ca50:	0800cab9 	.word	0x0800cab9
 800ca54:	0800ca35 	.word	0x0800ca35
 800ca58:	0800ca35 	.word	0x0800ca35
 800ca5c:	0800ca35 	.word	0x0800ca35
 800ca60:	0800ca35 	.word	0x0800ca35
 800ca64:	0800cab9 	.word	0x0800cab9
 800ca68:	0800ca35 	.word	0x0800ca35
 800ca6c:	0800ca35 	.word	0x0800ca35
 800ca70:	0800ca35 	.word	0x0800ca35
 800ca74:	0800ca35 	.word	0x0800ca35
 800ca78:	0800cbb9 	.word	0x0800cbb9
 800ca7c:	0800cae3 	.word	0x0800cae3
 800ca80:	0800cb73 	.word	0x0800cb73
 800ca84:	0800ca35 	.word	0x0800ca35
 800ca88:	0800ca35 	.word	0x0800ca35
 800ca8c:	0800cbdb 	.word	0x0800cbdb
 800ca90:	0800ca35 	.word	0x0800ca35
 800ca94:	0800cae3 	.word	0x0800cae3
 800ca98:	0800ca35 	.word	0x0800ca35
 800ca9c:	0800ca35 	.word	0x0800ca35
 800caa0:	0800cb7b 	.word	0x0800cb7b
 800caa4:	6833      	ldr	r3, [r6, #0]
 800caa6:	1d1a      	adds	r2, r3, #4
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	6032      	str	r2, [r6, #0]
 800caac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cab0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cab4:	2301      	movs	r3, #1
 800cab6:	e09d      	b.n	800cbf4 <_printf_i+0x1e8>
 800cab8:	6833      	ldr	r3, [r6, #0]
 800caba:	6820      	ldr	r0, [r4, #0]
 800cabc:	1d19      	adds	r1, r3, #4
 800cabe:	6031      	str	r1, [r6, #0]
 800cac0:	0606      	lsls	r6, r0, #24
 800cac2:	d501      	bpl.n	800cac8 <_printf_i+0xbc>
 800cac4:	681d      	ldr	r5, [r3, #0]
 800cac6:	e003      	b.n	800cad0 <_printf_i+0xc4>
 800cac8:	0645      	lsls	r5, r0, #25
 800caca:	d5fb      	bpl.n	800cac4 <_printf_i+0xb8>
 800cacc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cad0:	2d00      	cmp	r5, #0
 800cad2:	da03      	bge.n	800cadc <_printf_i+0xd0>
 800cad4:	232d      	movs	r3, #45	@ 0x2d
 800cad6:	426d      	negs	r5, r5
 800cad8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cadc:	4859      	ldr	r0, [pc, #356]	@ (800cc44 <_printf_i+0x238>)
 800cade:	230a      	movs	r3, #10
 800cae0:	e011      	b.n	800cb06 <_printf_i+0xfa>
 800cae2:	6821      	ldr	r1, [r4, #0]
 800cae4:	6833      	ldr	r3, [r6, #0]
 800cae6:	0608      	lsls	r0, r1, #24
 800cae8:	f853 5b04 	ldr.w	r5, [r3], #4
 800caec:	d402      	bmi.n	800caf4 <_printf_i+0xe8>
 800caee:	0649      	lsls	r1, r1, #25
 800caf0:	bf48      	it	mi
 800caf2:	b2ad      	uxthmi	r5, r5
 800caf4:	2f6f      	cmp	r7, #111	@ 0x6f
 800caf6:	4853      	ldr	r0, [pc, #332]	@ (800cc44 <_printf_i+0x238>)
 800caf8:	6033      	str	r3, [r6, #0]
 800cafa:	bf14      	ite	ne
 800cafc:	230a      	movne	r3, #10
 800cafe:	2308      	moveq	r3, #8
 800cb00:	2100      	movs	r1, #0
 800cb02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cb06:	6866      	ldr	r6, [r4, #4]
 800cb08:	60a6      	str	r6, [r4, #8]
 800cb0a:	2e00      	cmp	r6, #0
 800cb0c:	bfa2      	ittt	ge
 800cb0e:	6821      	ldrge	r1, [r4, #0]
 800cb10:	f021 0104 	bicge.w	r1, r1, #4
 800cb14:	6021      	strge	r1, [r4, #0]
 800cb16:	b90d      	cbnz	r5, 800cb1c <_printf_i+0x110>
 800cb18:	2e00      	cmp	r6, #0
 800cb1a:	d04b      	beq.n	800cbb4 <_printf_i+0x1a8>
 800cb1c:	4616      	mov	r6, r2
 800cb1e:	fbb5 f1f3 	udiv	r1, r5, r3
 800cb22:	fb03 5711 	mls	r7, r3, r1, r5
 800cb26:	5dc7      	ldrb	r7, [r0, r7]
 800cb28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cb2c:	462f      	mov	r7, r5
 800cb2e:	42bb      	cmp	r3, r7
 800cb30:	460d      	mov	r5, r1
 800cb32:	d9f4      	bls.n	800cb1e <_printf_i+0x112>
 800cb34:	2b08      	cmp	r3, #8
 800cb36:	d10b      	bne.n	800cb50 <_printf_i+0x144>
 800cb38:	6823      	ldr	r3, [r4, #0]
 800cb3a:	07df      	lsls	r7, r3, #31
 800cb3c:	d508      	bpl.n	800cb50 <_printf_i+0x144>
 800cb3e:	6923      	ldr	r3, [r4, #16]
 800cb40:	6861      	ldr	r1, [r4, #4]
 800cb42:	4299      	cmp	r1, r3
 800cb44:	bfde      	ittt	le
 800cb46:	2330      	movle	r3, #48	@ 0x30
 800cb48:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cb4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cb50:	1b92      	subs	r2, r2, r6
 800cb52:	6122      	str	r2, [r4, #16]
 800cb54:	f8cd a000 	str.w	sl, [sp]
 800cb58:	464b      	mov	r3, r9
 800cb5a:	aa03      	add	r2, sp, #12
 800cb5c:	4621      	mov	r1, r4
 800cb5e:	4640      	mov	r0, r8
 800cb60:	f7ff fee6 	bl	800c930 <_printf_common>
 800cb64:	3001      	adds	r0, #1
 800cb66:	d14a      	bne.n	800cbfe <_printf_i+0x1f2>
 800cb68:	f04f 30ff 	mov.w	r0, #4294967295
 800cb6c:	b004      	add	sp, #16
 800cb6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb72:	6823      	ldr	r3, [r4, #0]
 800cb74:	f043 0320 	orr.w	r3, r3, #32
 800cb78:	6023      	str	r3, [r4, #0]
 800cb7a:	4833      	ldr	r0, [pc, #204]	@ (800cc48 <_printf_i+0x23c>)
 800cb7c:	2778      	movs	r7, #120	@ 0x78
 800cb7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cb82:	6823      	ldr	r3, [r4, #0]
 800cb84:	6831      	ldr	r1, [r6, #0]
 800cb86:	061f      	lsls	r7, r3, #24
 800cb88:	f851 5b04 	ldr.w	r5, [r1], #4
 800cb8c:	d402      	bmi.n	800cb94 <_printf_i+0x188>
 800cb8e:	065f      	lsls	r7, r3, #25
 800cb90:	bf48      	it	mi
 800cb92:	b2ad      	uxthmi	r5, r5
 800cb94:	6031      	str	r1, [r6, #0]
 800cb96:	07d9      	lsls	r1, r3, #31
 800cb98:	bf44      	itt	mi
 800cb9a:	f043 0320 	orrmi.w	r3, r3, #32
 800cb9e:	6023      	strmi	r3, [r4, #0]
 800cba0:	b11d      	cbz	r5, 800cbaa <_printf_i+0x19e>
 800cba2:	2310      	movs	r3, #16
 800cba4:	e7ac      	b.n	800cb00 <_printf_i+0xf4>
 800cba6:	4827      	ldr	r0, [pc, #156]	@ (800cc44 <_printf_i+0x238>)
 800cba8:	e7e9      	b.n	800cb7e <_printf_i+0x172>
 800cbaa:	6823      	ldr	r3, [r4, #0]
 800cbac:	f023 0320 	bic.w	r3, r3, #32
 800cbb0:	6023      	str	r3, [r4, #0]
 800cbb2:	e7f6      	b.n	800cba2 <_printf_i+0x196>
 800cbb4:	4616      	mov	r6, r2
 800cbb6:	e7bd      	b.n	800cb34 <_printf_i+0x128>
 800cbb8:	6833      	ldr	r3, [r6, #0]
 800cbba:	6825      	ldr	r5, [r4, #0]
 800cbbc:	6961      	ldr	r1, [r4, #20]
 800cbbe:	1d18      	adds	r0, r3, #4
 800cbc0:	6030      	str	r0, [r6, #0]
 800cbc2:	062e      	lsls	r6, r5, #24
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	d501      	bpl.n	800cbcc <_printf_i+0x1c0>
 800cbc8:	6019      	str	r1, [r3, #0]
 800cbca:	e002      	b.n	800cbd2 <_printf_i+0x1c6>
 800cbcc:	0668      	lsls	r0, r5, #25
 800cbce:	d5fb      	bpl.n	800cbc8 <_printf_i+0x1bc>
 800cbd0:	8019      	strh	r1, [r3, #0]
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	6123      	str	r3, [r4, #16]
 800cbd6:	4616      	mov	r6, r2
 800cbd8:	e7bc      	b.n	800cb54 <_printf_i+0x148>
 800cbda:	6833      	ldr	r3, [r6, #0]
 800cbdc:	1d1a      	adds	r2, r3, #4
 800cbde:	6032      	str	r2, [r6, #0]
 800cbe0:	681e      	ldr	r6, [r3, #0]
 800cbe2:	6862      	ldr	r2, [r4, #4]
 800cbe4:	2100      	movs	r1, #0
 800cbe6:	4630      	mov	r0, r6
 800cbe8:	f7f3 fb9a 	bl	8000320 <memchr>
 800cbec:	b108      	cbz	r0, 800cbf2 <_printf_i+0x1e6>
 800cbee:	1b80      	subs	r0, r0, r6
 800cbf0:	6060      	str	r0, [r4, #4]
 800cbf2:	6863      	ldr	r3, [r4, #4]
 800cbf4:	6123      	str	r3, [r4, #16]
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cbfc:	e7aa      	b.n	800cb54 <_printf_i+0x148>
 800cbfe:	6923      	ldr	r3, [r4, #16]
 800cc00:	4632      	mov	r2, r6
 800cc02:	4649      	mov	r1, r9
 800cc04:	4640      	mov	r0, r8
 800cc06:	47d0      	blx	sl
 800cc08:	3001      	adds	r0, #1
 800cc0a:	d0ad      	beq.n	800cb68 <_printf_i+0x15c>
 800cc0c:	6823      	ldr	r3, [r4, #0]
 800cc0e:	079b      	lsls	r3, r3, #30
 800cc10:	d413      	bmi.n	800cc3a <_printf_i+0x22e>
 800cc12:	68e0      	ldr	r0, [r4, #12]
 800cc14:	9b03      	ldr	r3, [sp, #12]
 800cc16:	4298      	cmp	r0, r3
 800cc18:	bfb8      	it	lt
 800cc1a:	4618      	movlt	r0, r3
 800cc1c:	e7a6      	b.n	800cb6c <_printf_i+0x160>
 800cc1e:	2301      	movs	r3, #1
 800cc20:	4632      	mov	r2, r6
 800cc22:	4649      	mov	r1, r9
 800cc24:	4640      	mov	r0, r8
 800cc26:	47d0      	blx	sl
 800cc28:	3001      	adds	r0, #1
 800cc2a:	d09d      	beq.n	800cb68 <_printf_i+0x15c>
 800cc2c:	3501      	adds	r5, #1
 800cc2e:	68e3      	ldr	r3, [r4, #12]
 800cc30:	9903      	ldr	r1, [sp, #12]
 800cc32:	1a5b      	subs	r3, r3, r1
 800cc34:	42ab      	cmp	r3, r5
 800cc36:	dcf2      	bgt.n	800cc1e <_printf_i+0x212>
 800cc38:	e7eb      	b.n	800cc12 <_printf_i+0x206>
 800cc3a:	2500      	movs	r5, #0
 800cc3c:	f104 0619 	add.w	r6, r4, #25
 800cc40:	e7f5      	b.n	800cc2e <_printf_i+0x222>
 800cc42:	bf00      	nop
 800cc44:	0800d299 	.word	0x0800d299
 800cc48:	0800d2aa 	.word	0x0800d2aa

0800cc4c <__sflush_r>:
 800cc4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cc50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc54:	0716      	lsls	r6, r2, #28
 800cc56:	4605      	mov	r5, r0
 800cc58:	460c      	mov	r4, r1
 800cc5a:	d454      	bmi.n	800cd06 <__sflush_r+0xba>
 800cc5c:	684b      	ldr	r3, [r1, #4]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	dc02      	bgt.n	800cc68 <__sflush_r+0x1c>
 800cc62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	dd48      	ble.n	800ccfa <__sflush_r+0xae>
 800cc68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cc6a:	2e00      	cmp	r6, #0
 800cc6c:	d045      	beq.n	800ccfa <__sflush_r+0xae>
 800cc6e:	2300      	movs	r3, #0
 800cc70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cc74:	682f      	ldr	r7, [r5, #0]
 800cc76:	6a21      	ldr	r1, [r4, #32]
 800cc78:	602b      	str	r3, [r5, #0]
 800cc7a:	d030      	beq.n	800ccde <__sflush_r+0x92>
 800cc7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cc7e:	89a3      	ldrh	r3, [r4, #12]
 800cc80:	0759      	lsls	r1, r3, #29
 800cc82:	d505      	bpl.n	800cc90 <__sflush_r+0x44>
 800cc84:	6863      	ldr	r3, [r4, #4]
 800cc86:	1ad2      	subs	r2, r2, r3
 800cc88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cc8a:	b10b      	cbz	r3, 800cc90 <__sflush_r+0x44>
 800cc8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cc8e:	1ad2      	subs	r2, r2, r3
 800cc90:	2300      	movs	r3, #0
 800cc92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cc94:	6a21      	ldr	r1, [r4, #32]
 800cc96:	4628      	mov	r0, r5
 800cc98:	47b0      	blx	r6
 800cc9a:	1c43      	adds	r3, r0, #1
 800cc9c:	89a3      	ldrh	r3, [r4, #12]
 800cc9e:	d106      	bne.n	800ccae <__sflush_r+0x62>
 800cca0:	6829      	ldr	r1, [r5, #0]
 800cca2:	291d      	cmp	r1, #29
 800cca4:	d82b      	bhi.n	800ccfe <__sflush_r+0xb2>
 800cca6:	4a2a      	ldr	r2, [pc, #168]	@ (800cd50 <__sflush_r+0x104>)
 800cca8:	410a      	asrs	r2, r1
 800ccaa:	07d6      	lsls	r6, r2, #31
 800ccac:	d427      	bmi.n	800ccfe <__sflush_r+0xb2>
 800ccae:	2200      	movs	r2, #0
 800ccb0:	6062      	str	r2, [r4, #4]
 800ccb2:	04d9      	lsls	r1, r3, #19
 800ccb4:	6922      	ldr	r2, [r4, #16]
 800ccb6:	6022      	str	r2, [r4, #0]
 800ccb8:	d504      	bpl.n	800ccc4 <__sflush_r+0x78>
 800ccba:	1c42      	adds	r2, r0, #1
 800ccbc:	d101      	bne.n	800ccc2 <__sflush_r+0x76>
 800ccbe:	682b      	ldr	r3, [r5, #0]
 800ccc0:	b903      	cbnz	r3, 800ccc4 <__sflush_r+0x78>
 800ccc2:	6560      	str	r0, [r4, #84]	@ 0x54
 800ccc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ccc6:	602f      	str	r7, [r5, #0]
 800ccc8:	b1b9      	cbz	r1, 800ccfa <__sflush_r+0xae>
 800ccca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ccce:	4299      	cmp	r1, r3
 800ccd0:	d002      	beq.n	800ccd8 <__sflush_r+0x8c>
 800ccd2:	4628      	mov	r0, r5
 800ccd4:	f7ff fa9a 	bl	800c20c <_free_r>
 800ccd8:	2300      	movs	r3, #0
 800ccda:	6363      	str	r3, [r4, #52]	@ 0x34
 800ccdc:	e00d      	b.n	800ccfa <__sflush_r+0xae>
 800ccde:	2301      	movs	r3, #1
 800cce0:	4628      	mov	r0, r5
 800cce2:	47b0      	blx	r6
 800cce4:	4602      	mov	r2, r0
 800cce6:	1c50      	adds	r0, r2, #1
 800cce8:	d1c9      	bne.n	800cc7e <__sflush_r+0x32>
 800ccea:	682b      	ldr	r3, [r5, #0]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d0c6      	beq.n	800cc7e <__sflush_r+0x32>
 800ccf0:	2b1d      	cmp	r3, #29
 800ccf2:	d001      	beq.n	800ccf8 <__sflush_r+0xac>
 800ccf4:	2b16      	cmp	r3, #22
 800ccf6:	d11e      	bne.n	800cd36 <__sflush_r+0xea>
 800ccf8:	602f      	str	r7, [r5, #0]
 800ccfa:	2000      	movs	r0, #0
 800ccfc:	e022      	b.n	800cd44 <__sflush_r+0xf8>
 800ccfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd02:	b21b      	sxth	r3, r3
 800cd04:	e01b      	b.n	800cd3e <__sflush_r+0xf2>
 800cd06:	690f      	ldr	r7, [r1, #16]
 800cd08:	2f00      	cmp	r7, #0
 800cd0a:	d0f6      	beq.n	800ccfa <__sflush_r+0xae>
 800cd0c:	0793      	lsls	r3, r2, #30
 800cd0e:	680e      	ldr	r6, [r1, #0]
 800cd10:	bf08      	it	eq
 800cd12:	694b      	ldreq	r3, [r1, #20]
 800cd14:	600f      	str	r7, [r1, #0]
 800cd16:	bf18      	it	ne
 800cd18:	2300      	movne	r3, #0
 800cd1a:	eba6 0807 	sub.w	r8, r6, r7
 800cd1e:	608b      	str	r3, [r1, #8]
 800cd20:	f1b8 0f00 	cmp.w	r8, #0
 800cd24:	dde9      	ble.n	800ccfa <__sflush_r+0xae>
 800cd26:	6a21      	ldr	r1, [r4, #32]
 800cd28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cd2a:	4643      	mov	r3, r8
 800cd2c:	463a      	mov	r2, r7
 800cd2e:	4628      	mov	r0, r5
 800cd30:	47b0      	blx	r6
 800cd32:	2800      	cmp	r0, #0
 800cd34:	dc08      	bgt.n	800cd48 <__sflush_r+0xfc>
 800cd36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd3e:	81a3      	strh	r3, [r4, #12]
 800cd40:	f04f 30ff 	mov.w	r0, #4294967295
 800cd44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd48:	4407      	add	r7, r0
 800cd4a:	eba8 0800 	sub.w	r8, r8, r0
 800cd4e:	e7e7      	b.n	800cd20 <__sflush_r+0xd4>
 800cd50:	dfbffffe 	.word	0xdfbffffe

0800cd54 <_fflush_r>:
 800cd54:	b538      	push	{r3, r4, r5, lr}
 800cd56:	690b      	ldr	r3, [r1, #16]
 800cd58:	4605      	mov	r5, r0
 800cd5a:	460c      	mov	r4, r1
 800cd5c:	b913      	cbnz	r3, 800cd64 <_fflush_r+0x10>
 800cd5e:	2500      	movs	r5, #0
 800cd60:	4628      	mov	r0, r5
 800cd62:	bd38      	pop	{r3, r4, r5, pc}
 800cd64:	b118      	cbz	r0, 800cd6e <_fflush_r+0x1a>
 800cd66:	6a03      	ldr	r3, [r0, #32]
 800cd68:	b90b      	cbnz	r3, 800cd6e <_fflush_r+0x1a>
 800cd6a:	f7ff f8c1 	bl	800bef0 <__sinit>
 800cd6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d0f3      	beq.n	800cd5e <_fflush_r+0xa>
 800cd76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cd78:	07d0      	lsls	r0, r2, #31
 800cd7a:	d404      	bmi.n	800cd86 <_fflush_r+0x32>
 800cd7c:	0599      	lsls	r1, r3, #22
 800cd7e:	d402      	bmi.n	800cd86 <_fflush_r+0x32>
 800cd80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cd82:	f7ff fa40 	bl	800c206 <__retarget_lock_acquire_recursive>
 800cd86:	4628      	mov	r0, r5
 800cd88:	4621      	mov	r1, r4
 800cd8a:	f7ff ff5f 	bl	800cc4c <__sflush_r>
 800cd8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cd90:	07da      	lsls	r2, r3, #31
 800cd92:	4605      	mov	r5, r0
 800cd94:	d4e4      	bmi.n	800cd60 <_fflush_r+0xc>
 800cd96:	89a3      	ldrh	r3, [r4, #12]
 800cd98:	059b      	lsls	r3, r3, #22
 800cd9a:	d4e1      	bmi.n	800cd60 <_fflush_r+0xc>
 800cd9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cd9e:	f7ff fa33 	bl	800c208 <__retarget_lock_release_recursive>
 800cda2:	e7dd      	b.n	800cd60 <_fflush_r+0xc>

0800cda4 <__swbuf_r>:
 800cda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cda6:	460e      	mov	r6, r1
 800cda8:	4614      	mov	r4, r2
 800cdaa:	4605      	mov	r5, r0
 800cdac:	b118      	cbz	r0, 800cdb6 <__swbuf_r+0x12>
 800cdae:	6a03      	ldr	r3, [r0, #32]
 800cdb0:	b90b      	cbnz	r3, 800cdb6 <__swbuf_r+0x12>
 800cdb2:	f7ff f89d 	bl	800bef0 <__sinit>
 800cdb6:	69a3      	ldr	r3, [r4, #24]
 800cdb8:	60a3      	str	r3, [r4, #8]
 800cdba:	89a3      	ldrh	r3, [r4, #12]
 800cdbc:	071a      	lsls	r2, r3, #28
 800cdbe:	d501      	bpl.n	800cdc4 <__swbuf_r+0x20>
 800cdc0:	6923      	ldr	r3, [r4, #16]
 800cdc2:	b943      	cbnz	r3, 800cdd6 <__swbuf_r+0x32>
 800cdc4:	4621      	mov	r1, r4
 800cdc6:	4628      	mov	r0, r5
 800cdc8:	f000 f82a 	bl	800ce20 <__swsetup_r>
 800cdcc:	b118      	cbz	r0, 800cdd6 <__swbuf_r+0x32>
 800cdce:	f04f 37ff 	mov.w	r7, #4294967295
 800cdd2:	4638      	mov	r0, r7
 800cdd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdd6:	6823      	ldr	r3, [r4, #0]
 800cdd8:	6922      	ldr	r2, [r4, #16]
 800cdda:	1a98      	subs	r0, r3, r2
 800cddc:	6963      	ldr	r3, [r4, #20]
 800cdde:	b2f6      	uxtb	r6, r6
 800cde0:	4283      	cmp	r3, r0
 800cde2:	4637      	mov	r7, r6
 800cde4:	dc05      	bgt.n	800cdf2 <__swbuf_r+0x4e>
 800cde6:	4621      	mov	r1, r4
 800cde8:	4628      	mov	r0, r5
 800cdea:	f7ff ffb3 	bl	800cd54 <_fflush_r>
 800cdee:	2800      	cmp	r0, #0
 800cdf0:	d1ed      	bne.n	800cdce <__swbuf_r+0x2a>
 800cdf2:	68a3      	ldr	r3, [r4, #8]
 800cdf4:	3b01      	subs	r3, #1
 800cdf6:	60a3      	str	r3, [r4, #8]
 800cdf8:	6823      	ldr	r3, [r4, #0]
 800cdfa:	1c5a      	adds	r2, r3, #1
 800cdfc:	6022      	str	r2, [r4, #0]
 800cdfe:	701e      	strb	r6, [r3, #0]
 800ce00:	6962      	ldr	r2, [r4, #20]
 800ce02:	1c43      	adds	r3, r0, #1
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d004      	beq.n	800ce12 <__swbuf_r+0x6e>
 800ce08:	89a3      	ldrh	r3, [r4, #12]
 800ce0a:	07db      	lsls	r3, r3, #31
 800ce0c:	d5e1      	bpl.n	800cdd2 <__swbuf_r+0x2e>
 800ce0e:	2e0a      	cmp	r6, #10
 800ce10:	d1df      	bne.n	800cdd2 <__swbuf_r+0x2e>
 800ce12:	4621      	mov	r1, r4
 800ce14:	4628      	mov	r0, r5
 800ce16:	f7ff ff9d 	bl	800cd54 <_fflush_r>
 800ce1a:	2800      	cmp	r0, #0
 800ce1c:	d0d9      	beq.n	800cdd2 <__swbuf_r+0x2e>
 800ce1e:	e7d6      	b.n	800cdce <__swbuf_r+0x2a>

0800ce20 <__swsetup_r>:
 800ce20:	b538      	push	{r3, r4, r5, lr}
 800ce22:	4b29      	ldr	r3, [pc, #164]	@ (800cec8 <__swsetup_r+0xa8>)
 800ce24:	4605      	mov	r5, r0
 800ce26:	6818      	ldr	r0, [r3, #0]
 800ce28:	460c      	mov	r4, r1
 800ce2a:	b118      	cbz	r0, 800ce34 <__swsetup_r+0x14>
 800ce2c:	6a03      	ldr	r3, [r0, #32]
 800ce2e:	b90b      	cbnz	r3, 800ce34 <__swsetup_r+0x14>
 800ce30:	f7ff f85e 	bl	800bef0 <__sinit>
 800ce34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce38:	0719      	lsls	r1, r3, #28
 800ce3a:	d422      	bmi.n	800ce82 <__swsetup_r+0x62>
 800ce3c:	06da      	lsls	r2, r3, #27
 800ce3e:	d407      	bmi.n	800ce50 <__swsetup_r+0x30>
 800ce40:	2209      	movs	r2, #9
 800ce42:	602a      	str	r2, [r5, #0]
 800ce44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce48:	81a3      	strh	r3, [r4, #12]
 800ce4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ce4e:	e033      	b.n	800ceb8 <__swsetup_r+0x98>
 800ce50:	0758      	lsls	r0, r3, #29
 800ce52:	d512      	bpl.n	800ce7a <__swsetup_r+0x5a>
 800ce54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ce56:	b141      	cbz	r1, 800ce6a <__swsetup_r+0x4a>
 800ce58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ce5c:	4299      	cmp	r1, r3
 800ce5e:	d002      	beq.n	800ce66 <__swsetup_r+0x46>
 800ce60:	4628      	mov	r0, r5
 800ce62:	f7ff f9d3 	bl	800c20c <_free_r>
 800ce66:	2300      	movs	r3, #0
 800ce68:	6363      	str	r3, [r4, #52]	@ 0x34
 800ce6a:	89a3      	ldrh	r3, [r4, #12]
 800ce6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ce70:	81a3      	strh	r3, [r4, #12]
 800ce72:	2300      	movs	r3, #0
 800ce74:	6063      	str	r3, [r4, #4]
 800ce76:	6923      	ldr	r3, [r4, #16]
 800ce78:	6023      	str	r3, [r4, #0]
 800ce7a:	89a3      	ldrh	r3, [r4, #12]
 800ce7c:	f043 0308 	orr.w	r3, r3, #8
 800ce80:	81a3      	strh	r3, [r4, #12]
 800ce82:	6923      	ldr	r3, [r4, #16]
 800ce84:	b94b      	cbnz	r3, 800ce9a <__swsetup_r+0x7a>
 800ce86:	89a3      	ldrh	r3, [r4, #12]
 800ce88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ce8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce90:	d003      	beq.n	800ce9a <__swsetup_r+0x7a>
 800ce92:	4621      	mov	r1, r4
 800ce94:	4628      	mov	r0, r5
 800ce96:	f000 f8a5 	bl	800cfe4 <__smakebuf_r>
 800ce9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce9e:	f013 0201 	ands.w	r2, r3, #1
 800cea2:	d00a      	beq.n	800ceba <__swsetup_r+0x9a>
 800cea4:	2200      	movs	r2, #0
 800cea6:	60a2      	str	r2, [r4, #8]
 800cea8:	6962      	ldr	r2, [r4, #20]
 800ceaa:	4252      	negs	r2, r2
 800ceac:	61a2      	str	r2, [r4, #24]
 800ceae:	6922      	ldr	r2, [r4, #16]
 800ceb0:	b942      	cbnz	r2, 800cec4 <__swsetup_r+0xa4>
 800ceb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ceb6:	d1c5      	bne.n	800ce44 <__swsetup_r+0x24>
 800ceb8:	bd38      	pop	{r3, r4, r5, pc}
 800ceba:	0799      	lsls	r1, r3, #30
 800cebc:	bf58      	it	pl
 800cebe:	6962      	ldrpl	r2, [r4, #20]
 800cec0:	60a2      	str	r2, [r4, #8]
 800cec2:	e7f4      	b.n	800ceae <__swsetup_r+0x8e>
 800cec4:	2000      	movs	r0, #0
 800cec6:	e7f7      	b.n	800ceb8 <__swsetup_r+0x98>
 800cec8:	24000030 	.word	0x24000030

0800cecc <memmove>:
 800cecc:	4288      	cmp	r0, r1
 800cece:	b510      	push	{r4, lr}
 800ced0:	eb01 0402 	add.w	r4, r1, r2
 800ced4:	d902      	bls.n	800cedc <memmove+0x10>
 800ced6:	4284      	cmp	r4, r0
 800ced8:	4623      	mov	r3, r4
 800ceda:	d807      	bhi.n	800ceec <memmove+0x20>
 800cedc:	1e43      	subs	r3, r0, #1
 800cede:	42a1      	cmp	r1, r4
 800cee0:	d008      	beq.n	800cef4 <memmove+0x28>
 800cee2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cee6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ceea:	e7f8      	b.n	800cede <memmove+0x12>
 800ceec:	4402      	add	r2, r0
 800ceee:	4601      	mov	r1, r0
 800cef0:	428a      	cmp	r2, r1
 800cef2:	d100      	bne.n	800cef6 <memmove+0x2a>
 800cef4:	bd10      	pop	{r4, pc}
 800cef6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cefa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cefe:	e7f7      	b.n	800cef0 <memmove+0x24>

0800cf00 <_sbrk_r>:
 800cf00:	b538      	push	{r3, r4, r5, lr}
 800cf02:	4d06      	ldr	r5, [pc, #24]	@ (800cf1c <_sbrk_r+0x1c>)
 800cf04:	2300      	movs	r3, #0
 800cf06:	4604      	mov	r4, r0
 800cf08:	4608      	mov	r0, r1
 800cf0a:	602b      	str	r3, [r5, #0]
 800cf0c:	f7f4 fee8 	bl	8001ce0 <_sbrk>
 800cf10:	1c43      	adds	r3, r0, #1
 800cf12:	d102      	bne.n	800cf1a <_sbrk_r+0x1a>
 800cf14:	682b      	ldr	r3, [r5, #0]
 800cf16:	b103      	cbz	r3, 800cf1a <_sbrk_r+0x1a>
 800cf18:	6023      	str	r3, [r4, #0]
 800cf1a:	bd38      	pop	{r3, r4, r5, pc}
 800cf1c:	24000ed8 	.word	0x24000ed8

0800cf20 <memcpy>:
 800cf20:	440a      	add	r2, r1
 800cf22:	4291      	cmp	r1, r2
 800cf24:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf28:	d100      	bne.n	800cf2c <memcpy+0xc>
 800cf2a:	4770      	bx	lr
 800cf2c:	b510      	push	{r4, lr}
 800cf2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf36:	4291      	cmp	r1, r2
 800cf38:	d1f9      	bne.n	800cf2e <memcpy+0xe>
 800cf3a:	bd10      	pop	{r4, pc}

0800cf3c <_realloc_r>:
 800cf3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf40:	4680      	mov	r8, r0
 800cf42:	4615      	mov	r5, r2
 800cf44:	460c      	mov	r4, r1
 800cf46:	b921      	cbnz	r1, 800cf52 <_realloc_r+0x16>
 800cf48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf4c:	4611      	mov	r1, r2
 800cf4e:	f7ff b9c9 	b.w	800c2e4 <_malloc_r>
 800cf52:	b92a      	cbnz	r2, 800cf60 <_realloc_r+0x24>
 800cf54:	f7ff f95a 	bl	800c20c <_free_r>
 800cf58:	2400      	movs	r4, #0
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf60:	f000 f89e 	bl	800d0a0 <_malloc_usable_size_r>
 800cf64:	4285      	cmp	r5, r0
 800cf66:	4606      	mov	r6, r0
 800cf68:	d802      	bhi.n	800cf70 <_realloc_r+0x34>
 800cf6a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cf6e:	d8f4      	bhi.n	800cf5a <_realloc_r+0x1e>
 800cf70:	4629      	mov	r1, r5
 800cf72:	4640      	mov	r0, r8
 800cf74:	f7ff f9b6 	bl	800c2e4 <_malloc_r>
 800cf78:	4607      	mov	r7, r0
 800cf7a:	2800      	cmp	r0, #0
 800cf7c:	d0ec      	beq.n	800cf58 <_realloc_r+0x1c>
 800cf7e:	42b5      	cmp	r5, r6
 800cf80:	462a      	mov	r2, r5
 800cf82:	4621      	mov	r1, r4
 800cf84:	bf28      	it	cs
 800cf86:	4632      	movcs	r2, r6
 800cf88:	f7ff ffca 	bl	800cf20 <memcpy>
 800cf8c:	4621      	mov	r1, r4
 800cf8e:	4640      	mov	r0, r8
 800cf90:	f7ff f93c 	bl	800c20c <_free_r>
 800cf94:	463c      	mov	r4, r7
 800cf96:	e7e0      	b.n	800cf5a <_realloc_r+0x1e>

0800cf98 <__swhatbuf_r>:
 800cf98:	b570      	push	{r4, r5, r6, lr}
 800cf9a:	460c      	mov	r4, r1
 800cf9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfa0:	2900      	cmp	r1, #0
 800cfa2:	b096      	sub	sp, #88	@ 0x58
 800cfa4:	4615      	mov	r5, r2
 800cfa6:	461e      	mov	r6, r3
 800cfa8:	da0d      	bge.n	800cfc6 <__swhatbuf_r+0x2e>
 800cfaa:	89a3      	ldrh	r3, [r4, #12]
 800cfac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cfb0:	f04f 0100 	mov.w	r1, #0
 800cfb4:	bf14      	ite	ne
 800cfb6:	2340      	movne	r3, #64	@ 0x40
 800cfb8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cfbc:	2000      	movs	r0, #0
 800cfbe:	6031      	str	r1, [r6, #0]
 800cfc0:	602b      	str	r3, [r5, #0]
 800cfc2:	b016      	add	sp, #88	@ 0x58
 800cfc4:	bd70      	pop	{r4, r5, r6, pc}
 800cfc6:	466a      	mov	r2, sp
 800cfc8:	f000 f848 	bl	800d05c <_fstat_r>
 800cfcc:	2800      	cmp	r0, #0
 800cfce:	dbec      	blt.n	800cfaa <__swhatbuf_r+0x12>
 800cfd0:	9901      	ldr	r1, [sp, #4]
 800cfd2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cfd6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cfda:	4259      	negs	r1, r3
 800cfdc:	4159      	adcs	r1, r3
 800cfde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cfe2:	e7eb      	b.n	800cfbc <__swhatbuf_r+0x24>

0800cfe4 <__smakebuf_r>:
 800cfe4:	898b      	ldrh	r3, [r1, #12]
 800cfe6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cfe8:	079d      	lsls	r5, r3, #30
 800cfea:	4606      	mov	r6, r0
 800cfec:	460c      	mov	r4, r1
 800cfee:	d507      	bpl.n	800d000 <__smakebuf_r+0x1c>
 800cff0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cff4:	6023      	str	r3, [r4, #0]
 800cff6:	6123      	str	r3, [r4, #16]
 800cff8:	2301      	movs	r3, #1
 800cffa:	6163      	str	r3, [r4, #20]
 800cffc:	b003      	add	sp, #12
 800cffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d000:	ab01      	add	r3, sp, #4
 800d002:	466a      	mov	r2, sp
 800d004:	f7ff ffc8 	bl	800cf98 <__swhatbuf_r>
 800d008:	9f00      	ldr	r7, [sp, #0]
 800d00a:	4605      	mov	r5, r0
 800d00c:	4639      	mov	r1, r7
 800d00e:	4630      	mov	r0, r6
 800d010:	f7ff f968 	bl	800c2e4 <_malloc_r>
 800d014:	b948      	cbnz	r0, 800d02a <__smakebuf_r+0x46>
 800d016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d01a:	059a      	lsls	r2, r3, #22
 800d01c:	d4ee      	bmi.n	800cffc <__smakebuf_r+0x18>
 800d01e:	f023 0303 	bic.w	r3, r3, #3
 800d022:	f043 0302 	orr.w	r3, r3, #2
 800d026:	81a3      	strh	r3, [r4, #12]
 800d028:	e7e2      	b.n	800cff0 <__smakebuf_r+0xc>
 800d02a:	89a3      	ldrh	r3, [r4, #12]
 800d02c:	6020      	str	r0, [r4, #0]
 800d02e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d032:	81a3      	strh	r3, [r4, #12]
 800d034:	9b01      	ldr	r3, [sp, #4]
 800d036:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d03a:	b15b      	cbz	r3, 800d054 <__smakebuf_r+0x70>
 800d03c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d040:	4630      	mov	r0, r6
 800d042:	f000 f81d 	bl	800d080 <_isatty_r>
 800d046:	b128      	cbz	r0, 800d054 <__smakebuf_r+0x70>
 800d048:	89a3      	ldrh	r3, [r4, #12]
 800d04a:	f023 0303 	bic.w	r3, r3, #3
 800d04e:	f043 0301 	orr.w	r3, r3, #1
 800d052:	81a3      	strh	r3, [r4, #12]
 800d054:	89a3      	ldrh	r3, [r4, #12]
 800d056:	431d      	orrs	r5, r3
 800d058:	81a5      	strh	r5, [r4, #12]
 800d05a:	e7cf      	b.n	800cffc <__smakebuf_r+0x18>

0800d05c <_fstat_r>:
 800d05c:	b538      	push	{r3, r4, r5, lr}
 800d05e:	4d07      	ldr	r5, [pc, #28]	@ (800d07c <_fstat_r+0x20>)
 800d060:	2300      	movs	r3, #0
 800d062:	4604      	mov	r4, r0
 800d064:	4608      	mov	r0, r1
 800d066:	4611      	mov	r1, r2
 800d068:	602b      	str	r3, [r5, #0]
 800d06a:	f7f4 fe11 	bl	8001c90 <_fstat>
 800d06e:	1c43      	adds	r3, r0, #1
 800d070:	d102      	bne.n	800d078 <_fstat_r+0x1c>
 800d072:	682b      	ldr	r3, [r5, #0]
 800d074:	b103      	cbz	r3, 800d078 <_fstat_r+0x1c>
 800d076:	6023      	str	r3, [r4, #0]
 800d078:	bd38      	pop	{r3, r4, r5, pc}
 800d07a:	bf00      	nop
 800d07c:	24000ed8 	.word	0x24000ed8

0800d080 <_isatty_r>:
 800d080:	b538      	push	{r3, r4, r5, lr}
 800d082:	4d06      	ldr	r5, [pc, #24]	@ (800d09c <_isatty_r+0x1c>)
 800d084:	2300      	movs	r3, #0
 800d086:	4604      	mov	r4, r0
 800d088:	4608      	mov	r0, r1
 800d08a:	602b      	str	r3, [r5, #0]
 800d08c:	f7f4 fe10 	bl	8001cb0 <_isatty>
 800d090:	1c43      	adds	r3, r0, #1
 800d092:	d102      	bne.n	800d09a <_isatty_r+0x1a>
 800d094:	682b      	ldr	r3, [r5, #0]
 800d096:	b103      	cbz	r3, 800d09a <_isatty_r+0x1a>
 800d098:	6023      	str	r3, [r4, #0]
 800d09a:	bd38      	pop	{r3, r4, r5, pc}
 800d09c:	24000ed8 	.word	0x24000ed8

0800d0a0 <_malloc_usable_size_r>:
 800d0a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0a4:	1f18      	subs	r0, r3, #4
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	bfbc      	itt	lt
 800d0aa:	580b      	ldrlt	r3, [r1, r0]
 800d0ac:	18c0      	addlt	r0, r0, r3
 800d0ae:	4770      	bx	lr

0800d0b0 <_init>:
 800d0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0b2:	bf00      	nop
 800d0b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0b6:	bc08      	pop	{r3}
 800d0b8:	469e      	mov	lr, r3
 800d0ba:	4770      	bx	lr

0800d0bc <_fini>:
 800d0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0be:	bf00      	nop
 800d0c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0c2:	bc08      	pop	{r3}
 800d0c4:	469e      	mov	lr, r3
 800d0c6:	4770      	bx	lr
